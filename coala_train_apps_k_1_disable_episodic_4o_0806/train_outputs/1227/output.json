{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['2', 'blue yellow green orange black green', 'green yellow green orange black green'] Output: NO\nYES\n\nTests failed:\nNone",
    "code": "\ndef check_adjacent_colors(test_cases):\n    for test_case in test_cases:\n        colors = test_case.split()\n        # Check all possible sets of three adjacent sides\n        if (colors[0] == colors[2] == colors[5] or  # Front, Left, Bottom\n            colors[0] == colors[3] == colors[5] or  # Front, Right, Bottom\n            colors[1] == colors[2] == colors[4] or  # Back, Left, Top\n            colors[1] == colors[3] == colors[4] or  # Back, Right, Top\n            colors[0] == colors[2] == colors[4] or  # Front, Left, Top\n            colors[0] == colors[3] == colors[4] or  # Front, Right, Top\n            colors[1] == colors[2] == colors[5] or  # Back, Left, Bottom\n            colors[1] == colors[3] == colors[5]):   # Back, Right, Bottom\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().strip().split('\\n')\n\n# First line is the number of test cases\nT = int(data[0])\n\n# Remaining lines are the test cases\ntest_cases = data[1:T+1]\n\n# Check each test case\ncheck_adjacent_colors(test_cases)\n",
    "full_code": "\ndef check_adjacent_colors(test_cases):\n    for test_case in test_cases:\n        colors = test_case.split()\n        # Check all possible sets of three adjacent sides\n        if (colors[0] == colors[2] == colors[5] or  # Front, Left, Bottom\n            colors[0] == colors[3] == colors[5] or  # Front, Right, Bottom\n            colors[1] == colors[2] == colors[4] or  # Back, Left, Top\n            colors[1] == colors[3] == colors[4] or  # Back, Right, Top\n            colors[0] == colors[2] == colors[4] or  # Front, Left, Top\n            colors[0] == colors[3] == colors[4] or  # Front, Right, Top\n            colors[1] == colors[2] == colors[5] or  # Back, Left, Bottom\n            colors[1] == colors[3] == colors[5]):   # Back, Right, Bottom\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().strip().split('\\n')\n\n# First line is the number of test cases\nT = int(data[0])\n\n# Remaining lines are the test cases\ntest_cases = data[1:T+1]\n\n# Check each test case\ncheck_adjacent_colors(test_cases)\n",
    "reward": true,
    "program_code": "\ndef check_adjacent_colors(test_cases):\n    for test_case in test_cases:\n        colors = test_case.split()\n        # Check all possible sets of three adjacent sides\n        if (colors[0] == colors[2] == colors[5] or  # Front, Left, Bottom\n            colors[0] == colors[3] == colors[5] or  # Front, Right, Bottom\n            colors[1] == colors[2] == colors[4] or  # Back, Left, Top\n            colors[1] == colors[3] == colors[4] or  # Back, Right, Top\n            colors[0] == colors[2] == colors[4] or  # Front, Left, Top\n            colors[0] == colors[3] == colors[4] or  # Front, Right, Top\n            colors[1] == colors[2] == colors[5] or  # Back, Left, Bottom\n            colors[1] == colors[3] == colors[5]):   # Back, Right, Bottom\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().strip().split('\\n')\n\n# First line is the number of test cases\nT = int(data[0])\n\n# Remaining lines are the test cases\ntest_cases = data[1:T+1]\n\n# Check each test case\ncheck_adjacent_colors(test_cases)\n",
    "program_name": "check_adjacent_colors",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nWe have a cube with each of its six sides painted in one of six possible colors: black, blue, red, green, yellow, or orange. For each test case, we are given the colors of the six sides in a specific order: front, back, left, right, top, and bottom. Our task is to determine if there are three sides that are pairwise adjacent and painted in the same color. If such a set of sides exists, we should output \"YES\"; otherwise, output \"NO\".\n\n## Conceptual Solution\n\n1. **Understand Adjacency on a Cube**: On a cube, the following sets of three sides are pairwise adjacent:\n   - Front, Left, Bottom\n   - Front, Right, Bottom\n   - Back, Left, Top\n   - Back, Right, Top\n   - Front, Left, Top\n   - Front, Right, Top\n   - Back, Left, Bottom\n   - Back, Right, Bottom\n\n2. **Check Each Test Case**: For each test case, we need to check if any of these sets of three sides have the same color.\n\n3. **Output the Result**: If any set of three adjacent sides has the same color, output \"YES\". Otherwise, output \"NO\".\n\n## Pseudocode\n\n```\nfunction check_adjacent_colors(test_cases):\n    for each test_case in test_cases:\n        colors = test_case.split()\n        if (colors[0] == colors[2] == colors[5] or  # Front, Left, Bottom\n            colors[0] == colors[3] == colors[5] or  # Front, Right, Bottom\n            colors[1] == colors[2] == colors[4] or  # Back, Left, Top\n            colors[1] == colors[3] == colors[4] or  # Back, Right, Top\n            colors[0] == colors[2] == colors[4] or  # Front, Left, Top\n            colors[0] == colors[3] == colors[4] or  # Front, Right, Top\n            colors[1] == colors[2] == colors[5] or  # Back, Left, Bottom\n            colors[1] == colors[3] == colors[5]):   # Back, Right, Bottom\n            print(\"YES\")\n        else:\n            print(\"NO\")\n```\n\n## Final Python Solution\n\n```python\ndef check_adjacent_colors(test_cases):\n    for test_case in test_cases:\n        colors = test_case.split()\n        # Check all possible sets of three adjacent sides\n        if (colors[0] == colors[2] == colors[5] or  # Front, Left, Bottom\n            colors[0] == colors[3] == colors[5] or  # Front, Right, Bottom\n            colors[1] == colors[2] == colors[4] or  # Back, Left, Top\n            colors[1] == colors[3] == colors[4] or  # Back, Right, Top\n            colors[0] == colors[2] == colors[4] or  # Front, Left, Top\n            colors[0] == colors[3] == colors[4] or  # Front, Right, Top\n            colors[1] == colors[2] == colors[5] or  # Back, Left, Bottom\n            colors[1] == colors[3] == colors[5]):   # Back, Right, Bottom\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().strip().split('\\n')\n\n# First line is the number of test cases\nT = int(data[0])\n\n# Remaining lines are the test cases\ntest_cases = data[1:T+1]\n\n# Check each test case\ncheck_adjacent_colors(test_cases)\n```\n\nThis solution reads the input, processes each test case, and checks the specified sets of adjacent sides for matching colors, outputting \"YES\" or \"NO\" accordingly.",
    "no_parent": false,
    "dependency_used": false
}