{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: 4\n3 0\n5 1 2\n7 3 5\n10 -1 0\n2 12\n5 7 10\n10 16 20\n3 -100\n100 0 0\n100 -50 50\n200 100 100\n1 100\n99 -100 0\n Output: YES\nNO\nYES\nNO\n\n\nTests failed:\nNone",
    "code": "\ndef canSatisfyAllCustomers(test_cases):\n    results = []\n    for test_case in test_cases:\n        n, m = test_case[0]\n        customers = test_case[1]\n        \n        current_temp_range = (m, m)\n        current_time = 0\n        satisfied = True\n        \n        for customer in customers:\n            t_i, l_i, h_i = customer\n            time_diff = t_i - current_time\n            min_temp, max_temp = current_temp_range\n            \n            # Calculate possible temperature range at t_i\n            min_possible_temp = min_temp - time_diff\n            max_possible_temp = max_temp + time_diff\n            \n            # Update the possible temperature range to satisfy the current customer\n            new_min_temp = max(min_possible_temp, l_i)\n            new_max_temp = min(max_possible_temp, h_i)\n            \n            if new_min_temp > new_max_temp:\n                satisfied = False\n                break\n            \n            # Update for the next customer\n            current_temp_range = (new_min_temp, new_max_temp)\n            current_time = t_i\n        \n        if satisfied:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    q = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(q):\n        n = int(data[index])\n        m = int(data[index + 1])\n        customers = []\n        index += 2\n        for _ in range(n):\n            t_i = int(data[index])\n            l_i = int(data[index + 1])\n            h_i = int(data[index + 2])\n            customers.append((t_i, l_i, h_i))\n            index += 3\n        test_cases.append(((n, m), customers))\n    \n    results = canSatisfyAllCustomers(test_cases)\n    for result in results:\n        print(result)\n\nmain()\n",
    "full_code": "\ndef canSatisfyAllCustomers(test_cases):\n    results = []\n    for test_case in test_cases:\n        n, m = test_case[0]\n        customers = test_case[1]\n        \n        current_temp_range = (m, m)\n        current_time = 0\n        satisfied = True\n        \n        for customer in customers:\n            t_i, l_i, h_i = customer\n            time_diff = t_i - current_time\n            min_temp, max_temp = current_temp_range\n            \n            # Calculate possible temperature range at t_i\n            min_possible_temp = min_temp - time_diff\n            max_possible_temp = max_temp + time_diff\n            \n            # Update the possible temperature range to satisfy the current customer\n            new_min_temp = max(min_possible_temp, l_i)\n            new_max_temp = min(max_possible_temp, h_i)\n            \n            if new_min_temp > new_max_temp:\n                satisfied = False\n                break\n            \n            # Update for the next customer\n            current_temp_range = (new_min_temp, new_max_temp)\n            current_time = t_i\n        \n        if satisfied:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    q = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(q):\n        n = int(data[index])\n        m = int(data[index + 1])\n        customers = []\n        index += 2\n        for _ in range(n):\n            t_i = int(data[index])\n            l_i = int(data[index + 1])\n            h_i = int(data[index + 2])\n            customers.append((t_i, l_i, h_i))\n            index += 3\n        test_cases.append(((n, m), customers))\n    \n    results = canSatisfyAllCustomers(test_cases)\n    for result in results:\n        print(result)\n\nmain()\n",
    "reward": true,
    "program_code": "\ndef canSatisfyAllCustomers(test_cases):\n    results = []\n    for test_case in test_cases:\n        n, m = test_case[0]\n        customers = test_case[1]\n        \n        current_temp_range = (m, m)\n        current_time = 0\n        satisfied = True\n        \n        for customer in customers:\n            t_i, l_i, h_i = customer\n            time_diff = t_i - current_time\n            min_temp, max_temp = current_temp_range\n            \n            # Calculate possible temperature range at t_i\n            min_possible_temp = min_temp - time_diff\n            max_possible_temp = max_temp + time_diff\n            \n            # Update the possible temperature range to satisfy the current customer\n            new_min_temp = max(min_possible_temp, l_i)\n            new_max_temp = min(max_possible_temp, h_i)\n            \n            if new_min_temp > new_max_temp:\n                satisfied = False\n                break\n            \n            # Update for the next customer\n            current_temp_range = (new_min_temp, new_max_temp)\n            current_time = t_i\n        \n        if satisfied:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    q = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(q):\n        n = int(data[index])\n        m = int(data[index + 1])\n        customers = []\n        index += 2\n        for _ in range(n):\n            t_i = int(data[index])\n            l_i = int(data[index + 1])\n            h_i = int(data[index + 2])\n            customers.append((t_i, l_i, h_i))\n            index += 3\n        test_cases.append(((n, m), customers))\n    \n    results = canSatisfyAllCustomers(test_cases)\n    for result in results:\n        print(result)\n\nmain()\n",
    "program_name": "main",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nGildong owns a restaurant and wants to ensure that the temperature is comfortable for all customers who have made reservations. Each customer has a preferred temperature range and a specific time they will arrive. The restaurant's air conditioner can heat, cool, or remain off, and it starts off. We need to determine if it's possible to adjust the temperature to satisfy all customers at their respective arrival times.\n\n## Conceptual Solution\n\n1. **Initial Setup**: Start with the initial temperature and the air conditioner off.\n2. **Iterate Over Customers**: For each customer, calculate the time difference from the previous customer (or from time 0 for the first customer).\n3. **Temperature Range Calculation**: Determine the possible temperature range at the current customer's arrival time by considering the time difference and the air conditioner's ability to change the temperature by 1 degree per minute.\n4. **Check Satisfaction**: Ensure that the customer's preferred temperature range overlaps with the possible temperature range. If it does, update the possible temperature range for the next iteration.\n5. **Output Result**: If all customers can be satisfied, output \"YES\". Otherwise, output \"NO\".\n\n## Pseudocode\n\n```\nfunction canSatisfyAllCustomers(test_cases):\n    for each test_case in test_cases:\n        read n, m\n        initialize current_temp_range as (m, m)\n        initialize current_time as 0\n        satisfied = True\n        \n        for each customer in test_case:\n            read t_i, l_i, h_i\n            time_diff = t_i - current_time\n            min_temp, max_temp = current_temp_range\n            \n            # Calculate possible temperature range at t_i\n            min_possible_temp = min_temp - time_diff\n            max_possible_temp = max_temp + time_diff\n            \n            # Update the possible temperature range to satisfy the current customer\n            new_min_temp = max(min_possible_temp, l_i)\n            new_max_temp = min(max_possible_temp, h_i)\n            \n            if new_min_temp > new_max_temp:\n                satisfied = False\n                break\n            \n            # Update for the next customer\n            current_temp_range = (new_min_temp, new_max_temp)\n            current_time = t_i\n        \n        if satisfied:\n            print \"YES\"\n        else:\n            print \"NO\"\n```\n\n## Final Python Solution\n\n```python\ndef canSatisfyAllCustomers(test_cases):\n    results = []\n    for test_case in test_cases:\n        n, m = test_case[0]\n        customers = test_case[1]\n        \n        current_temp_range = (m, m)\n        current_time = 0\n        satisfied = True\n        \n        for customer in customers:\n            t_i, l_i, h_i = customer\n            time_diff = t_i - current_time\n            min_temp, max_temp = current_temp_range\n            \n            # Calculate possible temperature range at t_i\n            min_possible_temp = min_temp - time_diff\n            max_possible_temp = max_temp + time_diff\n            \n            # Update the possible temperature range to satisfy the current customer\n            new_min_temp = max(min_possible_temp, l_i)\n            new_max_temp = min(max_possible_temp, h_i)\n            \n            if new_min_temp > new_max_temp:\n                satisfied = False\n                break\n            \n            # Update for the next customer\n            current_temp_range = (new_min_temp, new_max_temp)\n            current_time = t_i\n        \n        if satisfied:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    q = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(q):\n        n = int(data[index])\n        m = int(data[index + 1])\n        customers = []\n        index += 2\n        for _ in range(n):\n            t_i = int(data[index])\n            l_i = int(data[index + 1])\n            h_i = int(data[index + 2])\n            customers.append((t_i, l_i, h_i))\n            index += 3\n        test_cases.append(((n, m), customers))\n    \n    results = canSatisfyAllCustomers(test_cases)\n    for result in results:\n        print(result)\n\nmain()\n```\n\nThis solution reads input, processes each test case to determine if all customers can be satisfied, and outputs the result for each test case.",
    "no_parent": false,
    "dependency_used": false
}