{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\nNone\n\nTests failed:\n Input: ['2', '0 1', '1 -1'] Expected output: [{'YES'}] # Execution output: []\nNo output detected. You might want to check the reading from / writing to standard IO.\nA common mistake is to put the IO inside a function, but the function is not called.\n",
    "code": "\ndef find_mutual_spitting():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    zebra_map = {}\n    \n    for i in range(1, t + 1):\n        a, b = map(int, data[i].split())\n        zebra_map[a] = b\n    \n    for a in zebra_map:\n        target_position = a + zebra_map[a]\n        if target_position in zebra_map:\n            if target_position + zebra_map[target_position] == a:\n                print(\"YES\")\n                return\n    \n    print(\"NO\")\n",
    "full_code": "\ndef find_mutual_spitting():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    zebra_map = {}\n    \n    for i in range(1, t + 1):\n        a, b = map(int, data[i].split())\n        zebra_map[a] = b\n    \n    for a in zebra_map:\n        target_position = a + zebra_map[a]\n        if target_position in zebra_map:\n            if target_position + zebra_map[target_position] == a:\n                print(\"YES\")\n                return\n    \n    print(\"NO\")\n",
    "reward": false,
    "program_code": "\ndef find_mutual_spitting():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    zebra_map = {}\n    \n    for i in range(1, t + 1):\n        a, b = map(int, data[i].split())\n        zebra_map[a] = b\n    \n    for a in zebra_map:\n        target_position = a + zebra_map[a]\n        if target_position in zebra_map:\n            if target_position + zebra_map[target_position] == a:\n                print(\"YES\")\n                return\n    \n    print(\"NO\")\n",
    "program_name": "find_mutual_spitting",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nWe have a number of zebras in a jungle, each positioned at a unique location. Each zebra can spit a certain distance either to the left or right. We need to determine if there are any two zebras that spit at each other. A zebra at position `a` spits `b` meters, and it can hit another zebra at position `a + b`. We need to check if there exists a pair of zebras such that one spits and hits the other, and vice versa.\n\n## Conceptual Solution\n\n1. **Input Parsing**: First, we need to read the number of zebras and their respective positions and spit distances.\n2. **Position Mapping**: Create a dictionary to map each zebra's position to its spit distance.\n3. **Check for Mutual Spitting**: For each zebra, calculate the position it can hit. Check if the zebra at that position can spit back to the original zebra's position.\n4. **Output Result**: If such a pair is found, output \"YES\". If no such pair exists after checking all zebras, output \"NO\".\n\n## Pseudocode\n\n1. Read the number of zebras `t`.\n2. Initialize an empty dictionary `zebra_map`.\n3. For each zebra:\n   - Read its position `a` and spit distance `b`.\n   - Store this information in `zebra_map` with `a` as the key and `b` as the value.\n4. For each zebra position `a` in `zebra_map`:\n   - Calculate the position it can hit: `target_position = a + zebra_map[a]`.\n   - Check if `target_position` exists in `zebra_map`.\n   - If it exists, check if the zebra at `target_position` can spit back to `a` (i.e., `target_position + zebra_map[target_position] == a`).\n   - If such a pair is found, print \"YES\" and exit.\n5. If no such pair is found after checking all zebras, print \"NO\".\n\n## Final Python Solution\n\n```python\ndef find_mutual_spitting():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    zebra_map = {}\n    \n    for i in range(1, t + 1):\n        a, b = map(int, data[i].split())\n        zebra_map[a] = b\n    \n    for a in zebra_map:\n        target_position = a + zebra_map[a]\n        if target_position in zebra_map:\n            if target_position + zebra_map[target_position] == a:\n                print(\"YES\")\n                return\n    \n    print(\"NO\")\n```\n\nThis solution reads input from standard input, processes the zebra positions and spit distances, and checks for any pair of zebras that spit at each other. If such a pair is found, it outputs \"YES\"; otherwise, it outputs \"NO\".",
    "no_parent": false,
    "dependency_used": false
}