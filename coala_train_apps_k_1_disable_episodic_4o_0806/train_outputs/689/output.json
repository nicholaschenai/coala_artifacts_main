{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['2', '0 1', '1 -1'] Output: YES\n\nTests failed:\nNone",
    "code": "\ndef find_mutual_spitting():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    zebra_map = {}\n    \n    for i in range(1, t + 1):\n        a, b = map(int, data[i].split())\n        zebra_map[a] = b\n    \n    for a in zebra_map:\n        target_position = a + zebra_map[a]\n        if target_position in zebra_map:\n            if target_position + zebra_map[target_position] == a:\n                print(\"YES\")\n                return\n    \n    print(\"NO\")\n\n# Call the function to execute the solution\nfind_mutual_spitting()\n",
    "full_code": "\ndef find_mutual_spitting():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    zebra_map = {}\n    \n    for i in range(1, t + 1):\n        a, b = map(int, data[i].split())\n        zebra_map[a] = b\n    \n    for a in zebra_map:\n        target_position = a + zebra_map[a]\n        if target_position in zebra_map:\n            if target_position + zebra_map[target_position] == a:\n                print(\"YES\")\n                return\n    \n    print(\"NO\")\n\n# Call the function to execute the solution\nfind_mutual_spitting()\n",
    "reward": true,
    "program_code": "\ndef find_mutual_spitting():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    zebra_map = {}\n    \n    for i in range(1, t + 1):\n        a, b = map(int, data[i].split())\n        zebra_map[a] = b\n    \n    for a in zebra_map:\n        target_position = a + zebra_map[a]\n        if target_position in zebra_map:\n            if target_position + zebra_map[target_position] == a:\n                print(\"YES\")\n                return\n    \n    print(\"NO\")\n\n# Call the function to execute the solution\nfind_mutual_spitting()\n",
    "program_name": "find_mutual_spitting",
    "dependencies": [],
    "raw_msg": "Let's fix the solution by ensuring the function is called and the input is handled correctly. Here's the corrected Python code:\n\n```python\ndef find_mutual_spitting():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    zebra_map = {}\n    \n    for i in range(1, t + 1):\n        a, b = map(int, data[i].split())\n        zebra_map[a] = b\n    \n    for a in zebra_map:\n        target_position = a + zebra_map[a]\n        if target_position in zebra_map:\n            if target_position + zebra_map[target_position] == a:\n                print(\"YES\")\n                return\n    \n    print(\"NO\")\n\n# Call the function to execute the solution\nfind_mutual_spitting()\n```\n\n### Explanation:\n- **Function Call**: The function `find_mutual_spitting()` is now called at the end of the script to ensure the logic is executed.\n- **Input Handling**: The input is read using `sys.stdin.read()`, which is suitable for reading multiple lines of input in a competitive programming context. The input is split into lines and processed accordingly.\n- **Logic**: The logic checks for mutual spitting by calculating the target position each zebra can hit and verifying if the target zebra can spit back to the original zebra's position. If such a pair is found, it prints \"YES\"; otherwise, it prints \"NO\".",
    "no_parent": false,
    "dependency_used": false
}