{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['2', 'i do not have any fancy quotes', 'when nothing goes right go left'] Output: Real Fancy\nregularly fancy\n\nTests failed:\nNone",
    "code": "\ndef classify_quotes(T, quotes):\n    for quote in quotes:\n        # Split the quote into words\n        words = quote.split()\n        # Check if \"not\" is a standalone word in the list\n        if \"not\" in words:\n            print(\"Real Fancy\")\n        else:\n            print(\"regularly fancy\")\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    # First line is the number of test cases\n    T = int(data[0])\n    # The rest are the quotes\n    quotes = data[1:T+1]\n    \n    classify_quotes(T, quotes)\n\nmain()\n",
    "full_code": "\ndef classify_quotes(T, quotes):\n    for quote in quotes:\n        # Split the quote into words\n        words = quote.split()\n        # Check if \"not\" is a standalone word in the list\n        if \"not\" in words:\n            print(\"Real Fancy\")\n        else:\n            print(\"regularly fancy\")\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    # First line is the number of test cases\n    T = int(data[0])\n    # The rest are the quotes\n    quotes = data[1:T+1]\n    \n    classify_quotes(T, quotes)\n\nmain()\n",
    "reward": true,
    "program_code": "\ndef classify_quotes(T, quotes):\n    for quote in quotes:\n        # Split the quote into words\n        words = quote.split()\n        # Check if \"not\" is a standalone word in the list\n        if \"not\" in words:\n            print(\"Real Fancy\")\n        else:\n            print(\"regularly fancy\")\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    # First line is the number of test cases\n    T = int(data[0])\n    # The rest are the quotes\n    quotes = data[1:T+1]\n    \n    classify_quotes(T, quotes)\n\nmain()\n",
    "program_name": "main",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nWe need to classify quotes based on whether they contain the word \"not\" as a standalone word. If a quote contains \"not\" as a separate word, it is considered \"Real Fancy\". Otherwise, it is \"regularly fancy\". We will be given multiple quotes, and for each quote, we need to determine its classification.\n\n## Conceptual Solution\n\n1. For each quote, we need to check if the word \"not\" appears as a standalone word.\n2. A standalone word means it is surrounded by spaces or is at the beginning or end of the string.\n3. We will split each quote into words and check if \"not\" is one of those words.\n4. If \"not\" is found, classify the quote as \"Real Fancy\". Otherwise, classify it as \"regularly fancy\".\n\n## Pseudocode\n\n```\nfunction classify_quotes(T, quotes):\n    for each quote in quotes:\n        split the quote into words\n        if \"not\" is in the list of words:\n            print \"Real Fancy\"\n        else:\n            print \"regularly fancy\"\n\nread T from input\ninitialize an empty list for quotes\nfor i from 1 to T:\n    read a quote and append it to the quotes list\n\ncall classify_quotes(T, quotes)\n```\n\n## Final Python Solution\n\n```python\ndef classify_quotes(T, quotes):\n    for quote in quotes:\n        # Split the quote into words\n        words = quote.split()\n        # Check if \"not\" is a standalone word in the list\n        if \"not\" in words:\n            print(\"Real Fancy\")\n        else:\n            print(\"regularly fancy\")\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    # First line is the number of test cases\n    T = int(data[0])\n    # The rest are the quotes\n    quotes = data[1:T+1]\n    \n    classify_quotes(T, quotes)\n\nmain()\n```\n\n### Explanation\n\n- We define a function `classify_quotes` that takes the number of test cases `T` and a list of `quotes`.\n- For each quote, we split it into words using the `split()` method, which handles spaces and returns a list of words.\n- We check if \"not\" is in the list of words. If it is, we print \"Real Fancy\". Otherwise, we print \"regularly fancy\".\n- The `main` function reads input from standard input, processes it to extract the number of test cases and the quotes, and then calls `classify_quotes` to classify each quote.",
    "no_parent": false,
    "dependency_used": false
}