{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\nNone\n\nTests failed:\n Input: ['1', '1 1', '4 4'] Expected output: [{'1.60'}] # Execution output: []\nNo output detected. You might want to check the reading from / writing to standard IO.\nA common mistake is to put the IO inside a function, but the function is not called.\n",
    "code": "\ndef calculate_mirror_position(x1, y1, x2, y2):\n    # Calculate the x-coordinate of the mirror using the formula\n    return (x1 * y2 + x2 * y1) / (y1 + y2)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        x1 = int(data[index])\n        y1 = int(data[index + 1])\n        x2 = int(data[index + 2])\n        y2 = int(data[index + 3])\n        index += 4\n        \n        mirror_x = calculate_mirror_position(x1, y1, x2, y2)\n        results.append(f\"{mirror_x:.2f}\")\n    \n    for result in results:\n        print(result)\n\n",
    "full_code": "\ndef calculate_mirror_position(x1, y1, x2, y2):\n    # Calculate the x-coordinate of the mirror using the formula\n    return (x1 * y2 + x2 * y1) / (y1 + y2)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        x1 = int(data[index])\n        y1 = int(data[index + 1])\n        x2 = int(data[index + 2])\n        y2 = int(data[index + 3])\n        index += 4\n        \n        mirror_x = calculate_mirror_position(x1, y1, x2, y2)\n        results.append(f\"{mirror_x:.2f}\")\n    \n    for result in results:\n        print(result)\n\n",
    "reward": false,
    "program_code": "\ndef calculate_mirror_position(x1, y1, x2, y2):\n    # Calculate the x-coordinate of the mirror using the formula\n    return (x1 * y2 + x2 * y1) / (y1 + y2)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        x1 = int(data[index])\n        y1 = int(data[index + 1])\n        x2 = int(data[index + 2])\n        y2 = int(data[index + 3])\n        index += 4\n        \n        mirror_x = calculate_mirror_position(x1, y1, x2, y2)\n        results.append(f\"{mirror_x:.2f}\")\n    \n    for result in results:\n        print(result)\n\n",
    "program_name": "main",
    "dependencies": [],
    "raw_msg": "### Problem Restatement\n\nKabir wants to see Tara's smile using a mirror placed on the x-axis. Given the coordinates of Kabir and Tara, we need to determine the x-coordinate on the x-axis where the mirror should be placed so that Kabir can see Tara's reflection.\n\n### Conceptual Solution\n\n1. **Understanding Reflection**: The mirror should be placed such that the angle of incidence equals the angle of reflection. This means the line from Kabir to the mirror and the line from the mirror to Tara should form equal angles with the x-axis.\n\n2. **Geometric Insight**: The x-coordinate of the mirror can be found using the formula derived from the reflection property:\n   - The x-coordinate of the mirror is the weighted average of the x-coordinates of Kabir and Tara, weighted by their y-coordinates.\n   - Formula: \\( x_{\\text{mirror}} = \\frac{x_1 \\cdot y_2 + x_2 \\cdot y_1}{y_1 + y_2} \\)\n\n3. **Implementation**: For each test case, compute the x-coordinate of the mirror using the above formula and print it.\n\n### Pseudocode\n\n```\nfunction calculate_mirror_position(x1, y1, x2, y2):\n    return (x1 * y2 + x2 * y1) / (y1 + y2)\n\nread T  // number of test cases\nfor each test case:\n    read x1, y1\n    read x2, y2\n    mirror_x = calculate_mirror_position(x1, y1, x2, y2)\n    print mirror_x with precision up to two decimal places\n```\n\n### Final Python Solution\n\n```python\ndef calculate_mirror_position(x1, y1, x2, y2):\n    # Calculate the x-coordinate of the mirror using the formula\n    return (x1 * y2 + x2 * y1) / (y1 + y2)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        x1 = int(data[index])\n        y1 = int(data[index + 1])\n        x2 = int(data[index + 2])\n        y2 = int(data[index + 3])\n        index += 4\n        \n        mirror_x = calculate_mirror_position(x1, y1, x2, y2)\n        results.append(f\"{mirror_x:.2f}\")\n    \n    for result in results:\n        print(result)\n\n```\n\nThis solution reads input data, processes each test case to compute the x-coordinate of the mirror, and outputs the result with a precision of two decimal places.",
    "no_parent": false,
    "dependency_used": false
}