{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['1', '1 1', '4 4'] Output: 1.60\n\nTests failed:\nNone",
    "code": "\ndef calculate_mirror_position(x1, y1, x2, y2):\n    # Calculate the x-coordinate of the mirror using the formula\n    return (x1 * y2 + x2 * y1) / (y1 + y2)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        x1 = int(data[index])\n        y1 = int(data[index + 1])\n        x2 = int(data[index + 2])\n        y2 = int(data[index + 3])\n        index += 4\n        \n        mirror_x = calculate_mirror_position(x1, y1, x2, y2)\n        results.append(f\"{mirror_x:.2f}\")\n    \n    for result in results:\n        print(result)\n\n# Call the main function to execute the program\nif __name__ == \"__main__\":\n    main()\n",
    "full_code": "\ndef calculate_mirror_position(x1, y1, x2, y2):\n    # Calculate the x-coordinate of the mirror using the formula\n    return (x1 * y2 + x2 * y1) / (y1 + y2)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        x1 = int(data[index])\n        y1 = int(data[index + 1])\n        x2 = int(data[index + 2])\n        y2 = int(data[index + 3])\n        index += 4\n        \n        mirror_x = calculate_mirror_position(x1, y1, x2, y2)\n        results.append(f\"{mirror_x:.2f}\")\n    \n    for result in results:\n        print(result)\n\n# Call the main function to execute the program\nif __name__ == \"__main__\":\n    main()\n",
    "reward": true,
    "program_code": "\ndef calculate_mirror_position(x1, y1, x2, y2):\n    # Calculate the x-coordinate of the mirror using the formula\n    return (x1 * y2 + x2 * y1) / (y1 + y2)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        x1 = int(data[index])\n        y1 = int(data[index + 1])\n        x2 = int(data[index + 2])\n        y2 = int(data[index + 3])\n        index += 4\n        \n        mirror_x = calculate_mirror_position(x1, y1, x2, y2)\n        results.append(f\"{mirror_x:.2f}\")\n    \n    for result in results:\n        print(result)\n\n# Call the main function to execute the program\nif __name__ == \"__main__\":\n    main()\n",
    "program_name": "main",
    "dependencies": [],
    "raw_msg": "```python\ndef calculate_mirror_position(x1, y1, x2, y2):\n    # Calculate the x-coordinate of the mirror using the formula\n    return (x1 * y2 + x2 * y1) / (y1 + y2)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        x1 = int(data[index])\n        y1 = int(data[index + 1])\n        x2 = int(data[index + 2])\n        y2 = int(data[index + 3])\n        index += 4\n        \n        mirror_x = calculate_mirror_position(x1, y1, x2, y2)\n        results.append(f\"{mirror_x:.2f}\")\n    \n    for result in results:\n        print(result)\n\n# Call the main function to execute the program\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n\n- **Function Call**: The `main()` function is now called within the `if __name__ == \"__main__\":` block. This ensures that the function is executed when the script is run directly, which is a common practice in Python to prevent code from being executed when the module is imported.\n- **Input Handling**: The input is read from standard input, split into a list of strings, and processed to extract the necessary integers for each test case.\n- **Output**: The results are stored in a list and printed with the required precision of two decimal places. This ensures that the output format matches the problem's requirements.",
    "no_parent": false,
    "dependency_used": false
}