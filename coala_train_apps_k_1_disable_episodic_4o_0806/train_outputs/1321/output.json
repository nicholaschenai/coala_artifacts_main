{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['3', '1', '7', '8'] Output: 0\n91\n140\n\nTests failed:\nNone",
    "code": "\ndef compute_nth_term(N):\n    # Calculate the N'th term using the derived formula\n    return (N - 1) * N * (2 * N - 1) // 6\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    results = []\n    \n    for i in range(1, T + 1):\n        N = int(data[i])\n        result = compute_nth_term(N)\n        results.append(result)\n    \n    for res in results:\n        print(res)\n\nmain()\n",
    "full_code": "\ndef compute_nth_term(N):\n    # Calculate the N'th term using the derived formula\n    return (N - 1) * N * (2 * N - 1) // 6\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    results = []\n    \n    for i in range(1, T + 1):\n        N = int(data[i])\n        result = compute_nth_term(N)\n        results.append(result)\n    \n    for res in results:\n        print(res)\n\nmain()\n",
    "reward": true,
    "program_code": "\ndef compute_nth_term(N):\n    # Calculate the N'th term using the derived formula\n    return (N - 1) * N * (2 * N - 1) // 6\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    results = []\n    \n    for i in range(1, T + 1):\n        N = int(data[i])\n        result = compute_nth_term(N)\n        results.append(result)\n    \n    for res in results:\n        print(res)\n\nmain()\n",
    "program_name": "main",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nWe need to find the N'th number in a specific series: 0, 1, 5, 14, 30, 55, ... for multiple test cases. The series appears to be generated by a specific pattern or formula, and our task is to determine this pattern and use it to compute the N'th term efficiently.\n\n## Conceptual Solution\n\n1. **Identify the Pattern**: First, we need to determine the pattern or formula that generates the series. By examining the differences between consecutive terms, we can deduce that the series is generated by a quadratic formula.\n\n2. **Derive the Formula**: By analyzing the differences:\n   - 1 - 0 = 1\n   - 5 - 1 = 4\n   - 14 - 5 = 9\n   - 30 - 14 = 16\n   - 55 - 30 = 25\n   These differences (1, 4, 9, 16, 25, ...) are perfect squares (1^2, 2^2, 3^2, 4^2, 5^2, ...). This suggests that the N'th term is the sum of squares of the first N-1 natural numbers.\n\n3. **Formula for the N'th Term**: The N'th term can be expressed as the sum of squares of the first (N-1) natural numbers:\n   \\[\n   a_N = \\sum_{i=1}^{N-1} i^2 = \\frac{(N-1) \\cdot N \\cdot (2N-1)}{6}\n   \\]\n\n4. **Implement the Solution**: Using the derived formula, compute the N'th term for each test case.\n\n## Pseudocode\n\n1. Read the number of test cases, T.\n2. For each test case:\n   - Read the integer N.\n   - Compute the N'th term using the formula: \\((N-1) \\cdot N \\cdot (2N-1) / 6\\).\n   - Output the result.\n\n## Final Python Solution\n\n```python\ndef compute_nth_term(N):\n    # Calculate the N'th term using the derived formula\n    return (N - 1) * N * (2 * N - 1) // 6\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    results = []\n    \n    for i in range(1, T + 1):\n        N = int(data[i])\n        result = compute_nth_term(N)\n        results.append(result)\n    \n    for res in results:\n        print(res)\n\nmain()\n```\n\n### Explanation\n\n- **compute_nth_term**: This function calculates the N'th term using the formula derived from the pattern of the series.\n- **main**: This function handles input and output. It reads all input at once, processes each test case, and prints the results. This approach is efficient for handling up to 10,000 test cases as specified by the constraints.",
    "no_parent": false,
    "dependency_used": false
}