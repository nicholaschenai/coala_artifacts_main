{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\nNone\n\nTests failed:\n Input: ['1', '2 6'] Expected output: [{'3'}] # Execution output: []\nNo output detected. You might want to check the reading from / writing to standard IO.\nA common mistake is to put the IO inside a function, but the function is not called.\n",
    "code": "\ndef countDivisors(n):\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n        i += 1\n    return count\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        A = int(data[index])\n        B = int(data[index + 1])\n        index += 2\n        \n        if A == B:\n            results.append(-1)\n        else:\n            diff = abs(A - B)\n            result = countDivisors(diff)\n            results.append(result)\n    \n    for res in results:\n        print(res)\n\n",
    "full_code": "\ndef countDivisors(n):\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n        i += 1\n    return count\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        A = int(data[index])\n        B = int(data[index + 1])\n        index += 2\n        \n        if A == B:\n            results.append(-1)\n        else:\n            diff = abs(A - B)\n            result = countDivisors(diff)\n            results.append(result)\n    \n    for res in results:\n        print(res)\n\n",
    "reward": false,
    "program_code": "\ndef countDivisors(n):\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n        i += 1\n    return count\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        A = int(data[index])\n        B = int(data[index + 1])\n        index += 2\n        \n        if A == B:\n            results.append(-1)\n        else:\n            diff = abs(A - B)\n            result = countDivisors(diff)\n            results.append(result)\n    \n    for res in results:\n        print(res)\n\n",
    "program_name": "solve",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nRam and Shyam want to cheat on an exam by getting the same set of questions. The exam board has `p` different sets of questions, and students are assigned sets based on their roll numbers. Given Ram's roll number `A` and Shyam's roll number `B`, we need to find how many values of `p` allow them to receive the same set of questions. If there are infinite such values, we should return `-1`.\n\n## Conceptual Solution\n\n1. **Understanding the Condition**: Ram and Shyam can cheat if the sets they receive are the same, i.e., `((A-1) % p) == ((B-1) % p)`. This simplifies to `(A-1) % p == (B-1) % p`.\n\n2. **Simplifying the Condition**: The above condition implies that `p` must divide the difference `(A-1) - (B-1)`, which simplifies to `A - B`.\n\n3. **Counting Possible Values of `p`**: \n   - If `A == B`, then `A - B = 0`, and any positive integer `p` will satisfy the condition, leading to an infinite number of solutions.\n   - If `A != B`, we need to count the divisors of `|A - B|`.\n\n4. **Algorithm**:\n   - For each test case, calculate `|A - B|`.\n   - If `A == B`, output `-1`.\n   - Otherwise, count the divisors of `|A - B|` and output this count.\n\n## Pseudocode\n\n```\nfunction countDivisors(n):\n    count = 0\n    for i from 1 to sqrt(n):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count\n\nfunction solve():\n    read T\n    for each test case:\n        read A, B\n        if A == B:\n            print -1\n        else:\n            diff = abs(A - B)\n            result = countDivisors(diff)\n            print result\n```\n\n## Final Python Solution\n\n```python\ndef countDivisors(n):\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n        i += 1\n    return count\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        A = int(data[index])\n        B = int(data[index + 1])\n        index += 2\n        \n        if A == B:\n            results.append(-1)\n        else:\n            diff = abs(A - B)\n            result = countDivisors(diff)\n            results.append(result)\n    \n    for res in results:\n        print(res)\n\n```",
    "no_parent": false,
    "dependency_used": false
}