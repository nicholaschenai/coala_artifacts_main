{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['4', '5 6', '6 10', '258303 89837245228', '616153 77878145466'] Output: [{'5.00000', '3.00000', '4.00000'}, {'-1'}, {'-1'}, {'616153.000000', '285168.817674', '546189.769984'}]\n\nTests failed:\nNone",
    "code": "\nimport sys\nimport math\n\ndef find_triangle_sides(H, S):\n    if 2 * S > H * H:\n        return -1\n    else:\n        discriminant = H * H * H * H - 16 * S * S\n        if discriminant < 0:\n            return -1\n        else:\n            sqrt_discriminant = math.sqrt(discriminant)\n            a1 = (H * H + sqrt_discriminant) / 2\n            a2 = (H * H - sqrt_discriminant) / 2\n            if a1 > 0:\n                a = math.sqrt(a1)\n                b = 2 * S / a\n                return sorted([a, b, H])\n            elif a2 > 0:\n                a = math.sqrt(a2)\n                b = 2 * S / a\n                return sorted([a, b, H])\n            else:\n                return -1\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    T = int(data[0])\n    index = 1\n    results = []\n    for _ in range(T):\n        H = int(data[index])\n        S = int(data[index + 1])\n        index += 2\n        result = find_triangle_sides(H, S)\n        if result == -1:\n            results.append(\"-1\")\n        else:\n            results.append(f\"{result[0]:.5f} {result[1]:.5f} {result[2]:.5f}\")\n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    main()\n",
    "full_code": "\nimport sys\nimport math\n\ndef find_triangle_sides(H, S):\n    if 2 * S > H * H:\n        return -1\n    else:\n        discriminant = H * H * H * H - 16 * S * S\n        if discriminant < 0:\n            return -1\n        else:\n            sqrt_discriminant = math.sqrt(discriminant)\n            a1 = (H * H + sqrt_discriminant) / 2\n            a2 = (H * H - sqrt_discriminant) / 2\n            if a1 > 0:\n                a = math.sqrt(a1)\n                b = 2 * S / a\n                return sorted([a, b, H])\n            elif a2 > 0:\n                a = math.sqrt(a2)\n                b = 2 * S / a\n                return sorted([a, b, H])\n            else:\n                return -1\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    T = int(data[0])\n    index = 1\n    results = []\n    for _ in range(T):\n        H = int(data[index])\n        S = int(data[index + 1])\n        index += 2\n        result = find_triangle_sides(H, S)\n        if result == -1:\n            results.append(\"-1\")\n        else:\n            results.append(f\"{result[0]:.5f} {result[1]:.5f} {result[2]:.5f}\")\n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    main()\n",
    "reward": true,
    "program_code": "\nimport sys\nimport math\n\ndef find_triangle_sides(H, S):\n    if 2 * S > H * H:\n        return -1\n    else:\n        discriminant = H * H * H * H - 16 * S * S\n        if discriminant < 0:\n            return -1\n        else:\n            sqrt_discriminant = math.sqrt(discriminant)\n            a1 = (H * H + sqrt_discriminant) / 2\n            a2 = (H * H - sqrt_discriminant) / 2\n            if a1 > 0:\n                a = math.sqrt(a1)\n                b = 2 * S / a\n                return sorted([a, b, H])\n            elif a2 > 0:\n                a = math.sqrt(a2)\n                b = 2 * S / a\n                return sorted([a, b, H])\n            else:\n                return -1\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    T = int(data[0])\n    index = 1\n    results = []\n    for _ in range(T):\n        H = int(data[index])\n        S = int(data[index + 1])\n        index += 2\n        result = find_triangle_sides(H, S)\n        if result == -1:\n            results.append(\"-1\")\n        else:\n            results.append(f\"{result[0]:.5f} {result[1]:.5f} {result[2]:.5f}\")\n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    main()\n",
    "program_name": "main",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nWe need to determine if there exists a right-angled triangle with a given hypotenuse \\( H \\) and area \\( S \\). If such a triangle exists, we should output the lengths of its sides in non-decreasing order. If no such triangle exists, we should output -1.\n\n## Conceptual Solution\n\n1. **Understanding Triangle Properties**:\n   - For a right-angled triangle with sides \\( a \\), \\( b \\), and hypotenuse \\( c \\), the Pythagorean theorem states: \\( a^2 + b^2 = c^2 \\).\n   - The area \\( A \\) of the triangle is given by: \\( A = \\frac{1}{2} \\times a \\times b \\).\n\n2. **Given Conditions**:\n   - We are given \\( c = H \\) and \\( A = S \\).\n\n3. **Formulate the Problem**:\n   - From the area formula: \\( a \\times b = 2S \\).\n   - From the Pythagorean theorem: \\( a^2 + b^2 = H^2 \\).\n\n4. **Solve for \\( a \\) and \\( b \\)**:\n   - Express \\( b \\) in terms of \\( a \\) using the area equation: \\( b = \\frac{2S}{a} \\).\n   - Substitute \\( b \\) in the Pythagorean equation: \\( a^2 + \\left(\\frac{2S}{a}\\right)^2 = H^2 \\).\n   - Simplify and solve the resulting quadratic equation in terms of \\( a \\).\n\n5. **Check for Valid Solutions**:\n   - Ensure that the solutions for \\( a \\) and \\( b \\) are real and positive.\n   - If valid, output the sides in non-decreasing order. If not, output -1.\n\n## Pseudocode\n\n```\nfunction find_triangle_sides(H, S):\n    if 2 * S > H^2:\n        return -1\n    else:\n        discriminant = H^4 - 16 * S^2\n        if discriminant < 0:\n            return -1\n        else:\n            a1 = (H^2 + sqrt(discriminant)) / 2\n            a2 = (H^2 - sqrt(discriminant)) / 2\n            if a1 > 0:\n                a = sqrt(a1)\n                b = 2 * S / a\n                return sorted([a, b, H])\n            elif a2 > 0:\n                a = sqrt(a2)\n                b = 2 * S / a\n                return sorted([a, b, H])\n            else:\n                return -1\n\nread T\nfor each test case:\n    read H, S\n    result = find_triangle_sides(H, S)\n    print result\n```\n\n## Final Python Solution\n\n```python\nimport sys\nimport math\n\ndef find_triangle_sides(H, S):\n    if 2 * S > H * H:\n        return -1\n    else:\n        discriminant = H * H * H * H - 16 * S * S\n        if discriminant < 0:\n            return -1\n        else:\n            sqrt_discriminant = math.sqrt(discriminant)\n            a1 = (H * H + sqrt_discriminant) / 2\n            a2 = (H * H - sqrt_discriminant) / 2\n            if a1 > 0:\n                a = math.sqrt(a1)\n                b = 2 * S / a\n                return sorted([a, b, H])\n            elif a2 > 0:\n                a = math.sqrt(a2)\n                b = 2 * S / a\n                return sorted([a, b, H])\n            else:\n                return -1\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    T = int(data[0])\n    index = 1\n    results = []\n    for _ in range(T):\n        H = int(data[index])\n        S = int(data[index + 1])\n        index += 2\n        result = find_triangle_sides(H, S)\n        if result == -1:\n            results.append(\"-1\")\n        else:\n            results.append(f\"{result[0]:.5f} {result[1]:.5f} {result[2]:.5f}\")\n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis solution reads input, processes each test case, and outputs the result for each case. It checks the feasibility of forming a triangle with the given hypotenuse and area, and calculates the side lengths if possible.",
    "no_parent": false,
    "dependency_used": false
}