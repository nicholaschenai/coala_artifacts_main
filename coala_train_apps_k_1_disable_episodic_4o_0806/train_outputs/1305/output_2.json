{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['2', '4', '1 0 1 0', '0 0 0 1', '0 1 0 0', '1 0 0 1', '4', '1 0 1 0', '0 0 0 0', '1 0 1 1', '0 1 0 0'] Output: SAFE\nUNSAFE\n\nTests failed:\nNone",
    "code": "\ndef is_safe(grid, N):\n    # Directions: right, down, left, up (no diagonals)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                for di, dj in directions:\n                    ni, nj = i + di, j + dj\n                    if 0 <= ni < N and 0 <= nj < N and grid[ni][nj] == 1:\n                        return \"UNSAFE\"\n    return \"SAFE\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        grid = []\n        for _ in range(N):\n            row = list(map(int, data[index:index + N]))\n            index += N\n            grid.append(row)\n        \n        result = is_safe(grid, N)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\n# Call the main function to execute the program\nif __name__ == \"__main__\":\n    main()\n",
    "full_code": "\ndef is_safe(grid, N):\n    # Directions: right, down, left, up (no diagonals)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                for di, dj in directions:\n                    ni, nj = i + di, j + dj\n                    if 0 <= ni < N and 0 <= nj < N and grid[ni][nj] == 1:\n                        return \"UNSAFE\"\n    return \"SAFE\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        grid = []\n        for _ in range(N):\n            row = list(map(int, data[index:index + N]))\n            index += N\n            grid.append(row)\n        \n        result = is_safe(grid, N)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\n# Call the main function to execute the program\nif __name__ == \"__main__\":\n    main()\n",
    "reward": true,
    "program_code": "\ndef is_safe(grid, N):\n    # Directions: right, down, left, up (no diagonals)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                for di, dj in directions:\n                    ni, nj = i + di, j + dj\n                    if 0 <= ni < N and 0 <= nj < N and grid[ni][nj] == 1:\n                        return \"UNSAFE\"\n    return \"SAFE\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        grid = []\n        for _ in range(N):\n            row = list(map(int, data[index:index + N]))\n            index += N\n            grid.append(row)\n        \n        result = is_safe(grid, N)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\n# Call the main function to execute the program\nif __name__ == \"__main__\":\n    main()\n",
    "program_name": "main",
    "dependencies": [],
    "raw_msg": "Let's fix the solution by ensuring that only horizontal and vertical adjacency is considered unsafe, as diagonal adjacency is allowed according to the problem statement. Here's the corrected code:\n\n```python\ndef is_safe(grid, N):\n    # Directions: right, down, left, up (no diagonals)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                for di, dj in directions:\n                    ni, nj = i + di, j + dj\n                    if 0 <= ni < N and 0 <= nj < N and grid[ni][nj] == 1:\n                        return \"UNSAFE\"\n    return \"SAFE\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        grid = []\n        for _ in range(N):\n            row = list(map(int, data[index:index + N]))\n            index += N\n            grid.append(row)\n        \n        result = is_safe(grid, N)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\n# Call the main function to execute the program\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation:\n- **Direction Handling**: The `directions` list now only includes horizontal and vertical directions, which are the only ones that should be checked for adjacency according to the problem statement.\n- **Safety Check**: The `is_safe` function checks each cell with a bed and its horizontal and vertical neighbors to determine if the arrangement is \"SAFE\" or \"UNSAFE\".\n- **Output**: The results for each test case are printed after processing all test cases, ensuring the correct output is generated. \n\nThis should resolve the issue and produce the correct output for the given test cases.",
    "no_parent": false,
    "dependency_used": false
}