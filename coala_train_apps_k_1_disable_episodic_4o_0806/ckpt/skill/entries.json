{
    "count_col_triang": {
        "code": "\ndef are_points_collinear(p1, p2, p3):\n    # Calculate the determinant to check if points are collinear\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n    return (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) == 0\n\ndef count_col_triang(points):\n    from itertools import combinations\n    \n    # Step 1: Categorize points by color\n    color_points = {}\n    for point, color in points:\n        if color not in color_points:\n            color_points[color] = []\n        color_points[color].append(point)\n    \n    # Step 2: Count triangles for each color\n    triangle_counts = {}\n    total_triangles = 0\n    for color, pts in color_points.items():\n        if len(pts) < 3:\n            triangle_counts[color] = 0\n            continue\n        \n        count = 0\n        for p1, p2, p3 in combinations(pts, 3):\n            if not are_points_collinear(p1, p2, p3):\n                count += 1\n        \n        triangle_counts[color] = count\n        total_triangles += count\n    \n    # Step 3: Find the color(s) with the maximum number of triangles\n    max_triangles = max(triangle_counts.values(), default=0)\n    max_colors = [color for color, count in triangle_counts.items() if count == max_triangles]\n    max_colors.sort()\n    \n    # Step 4: Prepare the result\n    total_points = len(points)\n    total_colors = len(color_points)\n    \n    if max_triangles > 0:\n        result = [total_points, total_colors, total_triangles, max_colors + [max_triangles]]\n    else:\n        result = [total_points, total_colors, total_triangles, []]\n    \n    return result\n",
        "dependencies": [],
        "task": "```if:java\n___Note for Java users:___ Due to type checking in Java, inputs and outputs are formated quite differently in this language. See the footnotes of the description.\n\n\n```\n\nYou have the following lattice points with their corresponding coordinates and each one with an specific colour.\n\n ```\nPoint   [x ,  y]     Colour\n----------------------------\n  A     [ 3,  4]     Blue\n  B     [-7, -1]     Red\n  C     [ 7, -6]     Yellow\n  D     [ 2,  5]     Yellow\n  E     [ 1, -5]     Red\n  F     [-1,  4]     Red\n  G     [ 1,  7]     Red\n  H     [-3,  5]     Red\n  I     [-3, -5]     Blue\n  J     [ 4,  1]     Blue\n```\nWe want to count the triangles that have the three vertices with the same colour. The following picture shows the distribution of the points in the plane with the required triangles.\n\n![source: imgur.com](http://i.imgur.com/sP0l1i1.png)\n\nThe input that we will have for the field of lattice points described above is:\n\n```\n[[[3, -4], \"blue\"],  [[-7, -1], \"red\"], [[7, -6], \"yellow\"], [[2, 5], \"yellow\"],\n [[1, -5], \"red\"],   [[-1, 4], \"red\"],  [[1, 7], \"red\"],     [[-3, 5], \"red\"], \n [[-3, -5], \"blue\"], [[4, 1], \"blue\"] ]\n```\nWe see the following result from it:\n\n```\nColour   Amount of Triangles       Triangles\nYellow         0                    -------\nBlue           1                      AIJ\nRed            10                   BEF,BEG,BEH,BFG,BFH,BGH,EFG,EFH,EHG,FGH\n```\nAs we have 5 different points in red and each combination of 3 points that are not aligned.\n\nWe need a code that may give us the following information in order:\n\n```\n1) Total given points\n2) Total number of colours\n3) Total number of possible triangles\n4) and 5) The colour (or colours, sorted alphabetically) with the highest amount of triangles\n```\n\nIn Python our function will work like:\n\n```\n[10, 3, 11, [\"red\",10]]) == count_col_triang([[[3, -4], \"blue\"],  [[-7, -1], \"red\"], [[7, -6], \"yellow\"], [[2, 5], \"yellow\"], \n                                              [[1, -5], \"red\"],   [[-1, 4], \"red\"],  [[1, 7], \"red\"],     [[-3, 5], \"red\"],\n                                              [[-3, -5], \"blue\"], [[4, 1], \"blue\"] ])\n```\nIn the following case we have some points that are aligned and we have less triangles that can be formed:\n\n```\n[10, 3, 7, [\"red\", 6]] == count_col_triang([[[3, -4], \"blue\"],  [[-7, -1], \"red\"], [[7, -6], \"yellow\"], [[2, 5], \"yellow\"],\n                                            [[1, -5], \"red\"],   [[1, 1], \"red\"],   [[1, 7], \"red\"],     [[1, 4], \"red\"], \n                                            [[-3, -5], \"blue\"], [[4, 1], \"blue\"] ])\n```\nJust to see the change with the previous case we have this:\n\n![source: imgur.com](http://i.imgur.com/cCgO7ql.png)\n\nIn the special case that the list of points does not generate an even single triangle, the output will be like this case:\n\n```\n[9, 3, 0, []] == count_col_triang([[[1, -2], \"red\"], [[7, -6], \"yellow\"], [[2, 5], \"yellow\"], [[1, -5], \"red\"],\n                                  [[1, 1], \"red\"],   [[1, 7], \"red\"],     [[1, 4], \"red\"],    [[-3, -5], \"blue\"], \n                                  [[4, 1], \"blue\"] ])\n```\nIt will be this case:\n\n![source: imgur.com](http://i.imgur.com/VB7t7Ij.png)\n\nIf in the result we have two or more colours with the same maximum amount of triangles, the last list should be like (e.g)\n\n```\n[35, 6, 35, [\"blue\", \"red\", \"yellow\", 23]]     # having the names of the colours sorted alphabetically\n```\nFor the condition of three algined points A, B, C, you should know that the the following determinant should be 0.\n\n```\n | xA    yA    1|\n | xB    yB    1|    = 0\n | xC    yC    1|\n\n```\nAssumptions:\n\n- In the list you have unique points, so a point can have only one colour.\n\n- All the inputs are valid\n\nEnjoy it!\n\n````if:java\n---\n\n___For java users:___\n\nTwo immutable objects, `ColouredPoint` and `TriangleResult`, have been designed for you in the preloaded part. You will receive inputs as lists of ColouredPoint objects and will return a TriangleResult object. For the last one, you may note the organization of the arguments of the constructor which differs a bit from the description above.\n\nYou may find below the signatures of the available methods of these objects:\n\n````",
        "description": "\n[description for function: count_col_triang]\nThe function takes a list of points, each associated with a color, and categorizes them by color. It then counts the number of non-collinear triangles that can be formed from points of the same color. For each color, it calculates the number of such triangles and keeps track of the total number of triangles across all colors. It identifies the color(s) with the maximum number of triangles and sorts them. Finally, it returns a list containing the total number of points, the number of distinct colors, the total number of triangles, and the color(s) with the maximum triangles along with the count of those triangles.\n\n[end of description]\nThis knowledge is useful in scenarios where you need to analyze geometric properties of points on a plane, particularly when dealing with problems involving collinearity and triangle formation. It is applicable in computational geometry, computer graphics, and spatial data analysis where determining the number of possible triangles from a set of points is necessary. This can be useful in applications such as geographic information systems (GIS), robotics (for path planning and obstacle avoidance), and in any system that requires spatial reasoning or pattern recognition. The method of checking collinearity using determinants is a fundamental concept in linear algebra and can be applied to various problems involving alignment and geometric configurations."
    }
}