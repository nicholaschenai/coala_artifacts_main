{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\nTests failed:\nNone",
    "code": "\ndef extract_nth_element(list_of_tuples, n):\n    # Initialize an empty list to store the nth elements\n    result = []\n    \n    # Iterate over each tuple in the list\n    for tuple_item in list_of_tuples:\n        # Append the nth element of the current tuple to the result list\n        result.append(tuple_item[n])\n    \n    # Return the list of nth elements\n    return result\n",
    "full_code": "\ndef extract_nth_element(list_of_tuples, n):\n    # Initialize an empty list to store the nth elements\n    result = []\n    \n    # Iterate over each tuple in the list\n    for tuple_item in list_of_tuples:\n        # Append the nth element of the current tuple to the result list\n        result.append(tuple_item[n])\n    \n    # Return the list of nth elements\n    return result\n",
    "reward": true,
    "program_code": "\ndef extract_nth_element(list_of_tuples, n):\n    # Initialize an empty list to store the nth elements\n    result = []\n    \n    # Iterate over each tuple in the list\n    for tuple_item in list_of_tuples:\n        # Append the nth element of the current tuple to the result list\n        result.append(tuple_item[n])\n    \n    # Return the list of nth elements\n    return result\n",
    "program_name": "extract_nth_element",
    "dependencies": [],
    "raw_msg": "### Problem Restatement\n\n1. **Restate the problem in plain English:**\n   We need to create a function that takes a list of tuples and an integer `n` as inputs. The function should return a list containing the `n`-th element from each tuple in the list.\n\n### Conceptualize a Solution\n\n2. **Conceptualize a solution in plain English:**\n   - We will iterate over each tuple in the list.\n   - For each tuple, we will extract the element at the index `n`.\n   - We will collect these elements into a new list.\n   - Finally, we will return this new list.\n\n### Pseudocode\n\n3. **Write a pseudocode solution:**\n   ```\n   Define function extract_nth_element with parameters list_of_tuples and n\n       Initialize an empty list called result\n       For each tuple in list_of_tuples\n           Append the element at index n of the tuple to result\n       Return result\n   ```\n\n### Final Python Solution\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef extract_nth_element(list_of_tuples, n):\n    # Initialize an empty list to store the nth elements\n    result = []\n    \n    # Iterate over each tuple in the list\n    for tuple_item in list_of_tuples:\n        # Append the nth element of the current tuple to the result list\n        result.append(tuple_item[n])\n    \n    # Return the list of nth elements\n    return result\n```\n\nThis function will correctly extract the `n`-th element from each tuple in the provided list and return a list of these elements.",
    "no_parent": true,
    "dependency_used": false
}