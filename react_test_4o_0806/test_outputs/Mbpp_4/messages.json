[
    {
        "role": "system",
        "content": "\nYou are an expert programmer tasked with solving the problem below.\n\nFollow the user's instructions to solve the problem.\nThe user can ask for analysis, code, or both.\n\n## Instructions\nWhen asked to output code,\n- Make sure to wrap your code in '```python' and '```' Markdown delimiters, \n- include exactly one block of code with the entire solution\n- No outside libraries are allowed. \n- Builtins are allowed.\n- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).\n- DO NOT write any assert statements / tests.\n\n## Problem\n[BEGIN PROBLEM]\nWrite a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.\n\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\"\n\n[END PROBLEM]\n"
    },
    {
        "role": "user",
        "content": "\n## Instructions\n\nReason through the problem and:\n1. Restate the problem in plain English\n2. Conceptualize a solution first in plain English\n3. Write a pseudocode solution\n4. Output the final Python 3 solution with your solution steps in comments.\n\nMake sure to wrap your code in '```python' and '```' Markdown delimiters, \nand include exactly one block of code with the entire solution.\n\nNo outside libraries are allowed.\nBuiltins are allowed.\n"
    },
    {
        "role": "assistant",
        "content": "## Problem Restatement\n\n1. **Restate the problem in plain English:**\n\n   We need to create a function that takes a list of numbers and an integer `n`, and returns the `n` largest numbers from the list in descending order.\n\n2. **Conceptualize a solution in plain English:**\n\n   To solve this problem, we can follow these steps:\n   - Sort the list of numbers in descending order.\n   - Select the first `n` numbers from this sorted list, as they will be the largest.\n   - Return these `n` numbers as the result.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   function heap_queue_largest(numbers, n):\n       sort the list 'numbers' in descending order\n       select the first 'n' elements from the sorted list\n       return these 'n' elements\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef heap_queue_largest(numbers, n):\n    # Sort the list in descending order\n    sorted_numbers = sorted(numbers, reverse=True)\n    # Select the first 'n' elements from the sorted list\n    largest_numbers = sorted_numbers[:n]\n    # Return the 'n' largest numbers\n    return largest_numbers\n```\n\nThis solution sorts the list in descending order and then slices the first `n` elements, which are the largest, and returns them."
    },
    {
        "role": "user",
        "content": "\n[Environment Feedback]:\n    Note: Tests are automatically generated and can be wrong.\n\n    Tests passed:\n    assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\n    Tests failed:\n    None\n[/Environment Feedback]\n"
    }
]