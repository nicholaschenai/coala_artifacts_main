INFO - [test iter]: 357/378

INFO - The task prompt is Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a function to find maximum run of uppercase characters in the...

INFO - Attempting task_id Mbpp/806
INFO - [35m Rollout attempt 1/4[0m
INFO - LM call n parse attempt 1 / 3

INFO - [Task id] Mbpp/806 [prompt] 
You are an expert programmer tasked with solving the problem below.

Follow the user's instructions to solve the problem.
The user can ask for analysis, code, or both.

## Instructions
When asked to output code,
- Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
- include exactly one block of code with the entire solution
- No outside libraries are allowed. 
- Builtins are allowed.
- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).
- DO NOT write any assert statements / tests.

## Problem
[BEGIN PROBLEM]
Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a function to find maximum run of uppercase characters in the given string.
assert max_run_uppercase('GeMKSForGERksISBESt') == 5
"""

[END PROBLEM]

INFO - [Task id] Mbpp/806 [prompt] 
## Instructions

Reason through the problem and:
1. Restate the problem in plain English
2. Conceptualize a solution first in plain English
3. Write a pseudocode solution
4. Output the final Python 3 solution with your solution steps in comments.

Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
and include exactly one block of code with the entire solution.

No outside libraries are allowed.
Builtins are allowed.

INFO - [Task id] Mbpp/806 [generation text] ## Problem Restatement

We need to write a function that takes a string as input and returns the length of the longest consecutive sequence (or "run") of uppercase letters in that string.

## Conceptual Solution

1. Initialize a variable to keep track of the maximum length of consecutive uppercase characters found so far.
2. Initialize another variable to keep track of the current length of consecutive uppercase characters as we iterate through the string.
3. Loop through each character in the string:
   - If the character is uppercase, increment the current length counter.
   - If the character is not uppercase, compare the current length counter with the maximum length counter and update the maximum if necessary. Then reset the current length counter to zero.
4. After the loop, perform a final check to update the maximum length counter in case the string ends with an uppercase run.
5. Return the maximum length counter.

## Pseudocode

```
function max_run_uppercase(s):
    max_length = 0
    current_length = 0
    
    for each character in s:
        if character is uppercase:
            increment current_length
        else:
            if current_length > max_length:
                max_length = current_length
            reset current_length to 0
    
    if current_length > max_length:
        max_length = current_length
    
    return max_length
```

## Final Python Solution

```python
def max_run_uppercase(s: str) -> int:
    # Initialize the maximum length of consecutive uppercase characters
    max_length = 0
    # Initialize the current length of consecutive uppercase characters
    current_length = 0
    
    # Iterate over each character in the string
    for char in s:
        # Check if the character is uppercase
        if char.isupper():
            # Increment the current length counter
            current_length += 1
        else:
            # Update the maximum length if the current run is longer
            if current_length > max_length:
                max_length = current_length
            # Reset the current length counter
            current_length = 0
    
    # Final check in case the string ends with an uppercase run
    if current_length > max_length:
        max_length = current_length
    
    # Return the maximum length found
    return max_length
```
INFO - program_code:
 
def max_run_uppercase(s: str) -> int:
    # Initialize the maximum length of consecutive uppercase characters
    max_length = 0
    # Initialize the current length of consecutive uppercase characters
    current_length = 0
    
    # Iterate over each character in the string
    for char in s:
        # Check if the character is uppercase
        if char.isupper():
            # Increment the current length counter
            current_length += 1
        else:
            # Update the maximum length if the current run is longer
            if current_length > max_length:
                max_length = current_length
            # Reset the current length counter
            current_length = 0
    
    # Final check in case the string ends with an uppercase run
    if current_length > max_length:
        max_length = current_length
    
    # Return the maximum length found
    return max_length


INFO - program_name:
 max_run_uppercase

INFO - dependencies:
 []

INFO - raw_msg:
 ## Problem Restatement

We need to write a function that takes a string as input and returns the length of the longest consecutive sequence (or "run") of uppercase letters in that string.

## Conceptual Solution

1. Initialize a variable to keep track of the maximum length of consecutive uppercase characters found so far.
2. Initialize another variable to keep track of the current length of consecutive uppercase characters as we iterate through the string.
3. Loop through each character in the string:
   - If the character is uppercase, increment the current length counter.
   - If the character is not uppercase, compare the current length counter with the maximum length counter and update the maximum if necessary. Then reset the current length counter to zero.
4. After the loop, perform a final check to update the maximum length counter in case the string ends with an uppercase run.
5. Return the maximum length counter.

## Pseudocode

```
function max_run_uppercase(s):
    max_length = 0
    current_length = 0
    
    for each character in s:
        if character is uppercase:
            increment current_length
        else:
            if current_length > max_length:
                max_length = current_length
            reset current_length to 0
    
    if current_length > max_length:
        max_length = current_length
    
    return max_length
```

## Final Python Solution

```python
def max_run_uppercase(s: str) -> int:
    # Initialize the maximum length of consecutive uppercase characters
    max_length = 0
    # Initialize the current length of consecutive uppercase characters
    current_length = 0
    
    # Iterate over each character in the string
    for char in s:
        # Check if the character is uppercase
        if char.isupper():
            # Increment the current length counter
            current_length += 1
        else:
            # Update the maximum length if the current run is longer
            if current_length > max_length:
                max_length = current_length
            # Reset the current length counter
            current_length = 0
    
    # Final check in case the string ends with an uppercase run
    if current_length > max_length:
        max_length = current_length
    
    # Return the maximum length found
    return max_length
```

INFO - no_parent:
 True

INFO - full code to be executed: 
 
def max_run_uppercase(s: str) -> int:
    # Initialize the maximum length of consecutive uppercase characters
    max_length = 0
    # Initialize the current length of consecutive uppercase characters
    current_length = 0
    
    # Iterate over each character in the string
    for char in s:
        # Check if the character is uppercase
        if char.isupper():
            # Increment the current length counter
            current_length += 1
        else:
            # Update the maximum length if the current run is longer
            if current_length > max_length:
                max_length = current_length
            # Reset the current length counter
            current_length = 0
    
    # Final check in case the string ends with an uppercase run
    if current_length > max_length:
        max_length = current_length
    
    # Return the maximum length found
    return max_length


INFO - obs: Note: Tests are automatically generated and can be wrong.

Tests passed:
assert max_run_uppercase('GeMKSForGERksISBESt') == 5

Tests failed:
None
reward: True
done: None
info: {'individual_results': (True,)}
INFO - acc:343/357 = 96.08%
