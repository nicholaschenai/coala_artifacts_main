{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\nTests failed:\nNone",
    "code": "\ndef max_run_uppercase(s: str) -> int:\n    # Initialize the maximum length of consecutive uppercase characters\n    max_length = 0\n    # Initialize the current length of consecutive uppercase characters\n    current_length = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Increment the current length counter\n            current_length += 1\n        else:\n            # Update the maximum length if the current run is longer\n            if current_length > max_length:\n                max_length = current_length\n            # Reset the current length counter\n            current_length = 0\n    \n    # Final check in case the string ends with an uppercase run\n    if current_length > max_length:\n        max_length = current_length\n    \n    # Return the maximum length found\n    return max_length\n",
    "full_code": "\ndef max_run_uppercase(s: str) -> int:\n    # Initialize the maximum length of consecutive uppercase characters\n    max_length = 0\n    # Initialize the current length of consecutive uppercase characters\n    current_length = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Increment the current length counter\n            current_length += 1\n        else:\n            # Update the maximum length if the current run is longer\n            if current_length > max_length:\n                max_length = current_length\n            # Reset the current length counter\n            current_length = 0\n    \n    # Final check in case the string ends with an uppercase run\n    if current_length > max_length:\n        max_length = current_length\n    \n    # Return the maximum length found\n    return max_length\n",
    "reward": true,
    "program_code": "\ndef max_run_uppercase(s: str) -> int:\n    # Initialize the maximum length of consecutive uppercase characters\n    max_length = 0\n    # Initialize the current length of consecutive uppercase characters\n    current_length = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Increment the current length counter\n            current_length += 1\n        else:\n            # Update the maximum length if the current run is longer\n            if current_length > max_length:\n                max_length = current_length\n            # Reset the current length counter\n            current_length = 0\n    \n    # Final check in case the string ends with an uppercase run\n    if current_length > max_length:\n        max_length = current_length\n    \n    # Return the maximum length found\n    return max_length\n",
    "program_name": "max_run_uppercase",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nWe need to write a function that takes a string as input and returns the length of the longest consecutive sequence (or \"run\") of uppercase letters in that string.\n\n## Conceptual Solution\n\n1. Initialize a variable to keep track of the maximum length of consecutive uppercase characters found so far.\n2. Initialize another variable to keep track of the current length of consecutive uppercase characters as we iterate through the string.\n3. Loop through each character in the string:\n   - If the character is uppercase, increment the current length counter.\n   - If the character is not uppercase, compare the current length counter with the maximum length counter and update the maximum if necessary. Then reset the current length counter to zero.\n4. After the loop, perform a final check to update the maximum length counter in case the string ends with an uppercase run.\n5. Return the maximum length counter.\n\n## Pseudocode\n\n```\nfunction max_run_uppercase(s):\n    max_length = 0\n    current_length = 0\n    \n    for each character in s:\n        if character is uppercase:\n            increment current_length\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            reset current_length to 0\n    \n    if current_length > max_length:\n        max_length = current_length\n    \n    return max_length\n```\n\n## Final Python Solution\n\n```python\ndef max_run_uppercase(s: str) -> int:\n    # Initialize the maximum length of consecutive uppercase characters\n    max_length = 0\n    # Initialize the current length of consecutive uppercase characters\n    current_length = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Increment the current length counter\n            current_length += 1\n        else:\n            # Update the maximum length if the current run is longer\n            if current_length > max_length:\n                max_length = current_length\n            # Reset the current length counter\n            current_length = 0\n    \n    # Final check in case the string ends with an uppercase run\n    if current_length > max_length:\n        max_length = current_length\n    \n    # Return the maximum length found\n    return max_length\n```",
    "no_parent": true,
    "dependency_used": false
}