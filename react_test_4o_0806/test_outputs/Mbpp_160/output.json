{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert find_solution(2, 3, 7) == (2, 1)\n\nTests failed:\nNone",
    "code": "\ndef extended_gcd(a, b):\n    # Base case: if b is 0, gcd is a, and coefficients are (1, 0)\n    if b == 0:\n        return (a, 1, 0)\n    else:\n        # Recursive call\n        gcd, x1, y1 = extended_gcd(b, a % b)\n        # Update x and y using results of recursion\n        x = y1\n        y = x1 - (a // b) * y1\n        return (gcd, x, y)\n\ndef find_solution(a, b, n):\n    # Get gcd and coefficients for the equation ax + by = gcd(a, b)\n    gcd, x0, y0 = extended_gcd(a, b)\n    # Check if n is divisible by gcd\n    if n % gcd != 0:\n        return None\n    # Scale the solution to match the equation ax + by = n\n    scale = n // gcd\n    x = x0 * scale\n    y = y0 * scale\n    \n    # Adjust the solution to find a non-negative solution with smaller values\n    # We will adjust x and y to be the smallest non-negative solution\n    # by using the fact that (x + k*(b/gcd), y - k*(a/gcd)) is also a solution\n    # for any integer k.\n    a_div_gcd = a // gcd\n    b_div_gcd = b // gcd\n    \n    # Adjust x and y to be non-negative\n    if x < 0:\n        k = (-x + b_div_gcd - 1) // b_div_gcd\n        x += k * b_div_gcd\n        y -= k * a_div_gcd\n    elif y < 0:\n        k = (-y + a_div_gcd - 1) // a_div_gcd\n        x -= k * b_div_gcd\n        y += k * a_div_gcd\n    \n    return (x, y)\n",
    "full_code": "\ndef extended_gcd(a, b):\n    # Base case: if b is 0, gcd is a, and coefficients are (1, 0)\n    if b == 0:\n        return (a, 1, 0)\n    else:\n        # Recursive call\n        gcd, x1, y1 = extended_gcd(b, a % b)\n        # Update x and y using results of recursion\n        x = y1\n        y = x1 - (a // b) * y1\n        return (gcd, x, y)\n\ndef find_solution(a, b, n):\n    # Get gcd and coefficients for the equation ax + by = gcd(a, b)\n    gcd, x0, y0 = extended_gcd(a, b)\n    # Check if n is divisible by gcd\n    if n % gcd != 0:\n        return None\n    # Scale the solution to match the equation ax + by = n\n    scale = n // gcd\n    x = x0 * scale\n    y = y0 * scale\n    \n    # Adjust the solution to find a non-negative solution with smaller values\n    # We will adjust x and y to be the smallest non-negative solution\n    # by using the fact that (x + k*(b/gcd), y - k*(a/gcd)) is also a solution\n    # for any integer k.\n    a_div_gcd = a // gcd\n    b_div_gcd = b // gcd\n    \n    # Adjust x and y to be non-negative\n    if x < 0:\n        k = (-x + b_div_gcd - 1) // b_div_gcd\n        x += k * b_div_gcd\n        y -= k * a_div_gcd\n    elif y < 0:\n        k = (-y + a_div_gcd - 1) // a_div_gcd\n        x -= k * b_div_gcd\n        y += k * a_div_gcd\n    \n    return (x, y)\n",
    "reward": true,
    "program_code": "\ndef extended_gcd(a, b):\n    # Base case: if b is 0, gcd is a, and coefficients are (1, 0)\n    if b == 0:\n        return (a, 1, 0)\n    else:\n        # Recursive call\n        gcd, x1, y1 = extended_gcd(b, a % b)\n        # Update x and y using results of recursion\n        x = y1\n        y = x1 - (a // b) * y1\n        return (gcd, x, y)\n\ndef find_solution(a, b, n):\n    # Get gcd and coefficients for the equation ax + by = gcd(a, b)\n    gcd, x0, y0 = extended_gcd(a, b)\n    # Check if n is divisible by gcd\n    if n % gcd != 0:\n        return None\n    # Scale the solution to match the equation ax + by = n\n    scale = n // gcd\n    x = x0 * scale\n    y = y0 * scale\n    \n    # Adjust the solution to find a non-negative solution with smaller values\n    # We will adjust x and y to be the smallest non-negative solution\n    # by using the fact that (x + k*(b/gcd), y - k*(a/gcd)) is also a solution\n    # for any integer k.\n    a_div_gcd = a // gcd\n    b_div_gcd = b // gcd\n    \n    # Adjust x and y to be non-negative\n    if x < 0:\n        k = (-x + b_div_gcd - 1) // b_div_gcd\n        x += k * b_div_gcd\n        y -= k * a_div_gcd\n    elif y < 0:\n        k = (-y + a_div_gcd - 1) // a_div_gcd\n        x -= k * b_div_gcd\n        y += k * a_div_gcd\n    \n    return (x, y)\n",
    "program_name": "find_solution",
    "dependencies": [],
    "raw_msg": "```python\ndef extended_gcd(a, b):\n    # Base case: if b is 0, gcd is a, and coefficients are (1, 0)\n    if b == 0:\n        return (a, 1, 0)\n    else:\n        # Recursive call\n        gcd, x1, y1 = extended_gcd(b, a % b)\n        # Update x and y using results of recursion\n        x = y1\n        y = x1 - (a // b) * y1\n        return (gcd, x, y)\n\ndef find_solution(a, b, n):\n    # Get gcd and coefficients for the equation ax + by = gcd(a, b)\n    gcd, x0, y0 = extended_gcd(a, b)\n    # Check if n is divisible by gcd\n    if n % gcd != 0:\n        return None\n    # Scale the solution to match the equation ax + by = n\n    scale = n // gcd\n    x = x0 * scale\n    y = y0 * scale\n    \n    # Adjust the solution to find a non-negative solution with smaller values\n    # We will adjust x and y to be the smallest non-negative solution\n    # by using the fact that (x + k*(b/gcd), y - k*(a/gcd)) is also a solution\n    # for any integer k.\n    a_div_gcd = a // gcd\n    b_div_gcd = b // gcd\n    \n    # Adjust x and y to be non-negative\n    if x < 0:\n        k = (-x + b_div_gcd - 1) // b_div_gcd\n        x += k * b_div_gcd\n        y -= k * a_div_gcd\n    elif y < 0:\n        k = (-y + a_div_gcd - 1) // a_div_gcd\n        x -= k * b_div_gcd\n        y += k * a_div_gcd\n    \n    return (x, y)\n```\n\nThis code adjusts the solution to ensure that \\( x \\) and \\( y \\) are non-negative and as small as possible, which should help in matching the expected test case solution.",
    "no_parent": true,
    "dependency_used": false
}