{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\nTests failed:\nNone",
    "code": "\ndef text_lowercase_underscore(s: str) -> bool:\n    # If the string is empty, it cannot match the pattern\n    if not s:\n        return False\n    \n    # If the first or last character is an underscore, return False\n    if s[0] == '_' or s[-1] == '_':\n        return False\n    \n    # Initialize a variable to track if the previous character was an underscore\n    previous_was_underscore = False\n    \n    # Iterate through each character in the string\n    for char in s:\n        # If the character is not a lowercase letter and not an underscore, return False\n        if not (char.islower() or char == '_'):\n            return False\n        \n        # If the character is an underscore\n        if char == '_':\n            # If the previous character was also an underscore, return False\n            if previous_was_underscore:\n                return False\n            # Set the previous character as underscore\n            previous_was_underscore = True\n        else:\n            # Set the previous character as not underscore\n            previous_was_underscore = False\n    \n    # If all checks are passed, return True\n    return True\n",
    "full_code": "\ndef text_lowercase_underscore(s: str) -> bool:\n    # If the string is empty, it cannot match the pattern\n    if not s:\n        return False\n    \n    # If the first or last character is an underscore, return False\n    if s[0] == '_' or s[-1] == '_':\n        return False\n    \n    # Initialize a variable to track if the previous character was an underscore\n    previous_was_underscore = False\n    \n    # Iterate through each character in the string\n    for char in s:\n        # If the character is not a lowercase letter and not an underscore, return False\n        if not (char.islower() or char == '_'):\n            return False\n        \n        # If the character is an underscore\n        if char == '_':\n            # If the previous character was also an underscore, return False\n            if previous_was_underscore:\n                return False\n            # Set the previous character as underscore\n            previous_was_underscore = True\n        else:\n            # Set the previous character as not underscore\n            previous_was_underscore = False\n    \n    # If all checks are passed, return True\n    return True\n",
    "reward": true,
    "program_code": "\ndef text_lowercase_underscore(s: str) -> bool:\n    # If the string is empty, it cannot match the pattern\n    if not s:\n        return False\n    \n    # If the first or last character is an underscore, return False\n    if s[0] == '_' or s[-1] == '_':\n        return False\n    \n    # Initialize a variable to track if the previous character was an underscore\n    previous_was_underscore = False\n    \n    # Iterate through each character in the string\n    for char in s:\n        # If the character is not a lowercase letter and not an underscore, return False\n        if not (char.islower() or char == '_'):\n            return False\n        \n        # If the character is an underscore\n        if char == '_':\n            # If the previous character was also an underscore, return False\n            if previous_was_underscore:\n                return False\n            # Set the previous character as underscore\n            previous_was_underscore = True\n        else:\n            # Set the previous character as not underscore\n            previous_was_underscore = False\n    \n    # If all checks are passed, return True\n    return True\n",
    "program_name": "text_lowercase_underscore",
    "dependencies": [],
    "raw_msg": "### Problem Restatement\n\n1. **Restate the problem in plain English:**\n   We need to create a function that checks if a given string consists of sequences of lowercase letters separated by underscores. If the string matches this pattern, the function should return `True`; otherwise, it should return `False`.\n\n### Conceptualize a Solution\n\n2. **Conceptualize a solution in plain English:**\n   - We will iterate through each character in the string.\n   - We will check if the string contains only lowercase letters and underscores.\n   - We will ensure that underscores are not at the start or end of the string and that they are not consecutive.\n   - If all these conditions are met, the function will return `True`; otherwise, it will return `False`.\n\n### Pseudocode\n\n3. **Write a pseudocode solution:**\n   ```\n   Define function text_lowercase_underscore(s):\n       If the string is empty, return False\n       If the first or last character is an underscore, return False\n       Initialize a variable to track if the previous character was an underscore\n       For each character in the string:\n           If the character is not a lowercase letter and not an underscore, return False\n           If the character is an underscore:\n               If the previous character was also an underscore, return False\n               Set the previous character as underscore\n           Else:\n               Set the previous character as not underscore\n       Return True\n   ```\n\n### Final Python Solution\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef text_lowercase_underscore(s: str) -> bool:\n    # If the string is empty, it cannot match the pattern\n    if not s:\n        return False\n    \n    # If the first or last character is an underscore, return False\n    if s[0] == '_' or s[-1] == '_':\n        return False\n    \n    # Initialize a variable to track if the previous character was an underscore\n    previous_was_underscore = False\n    \n    # Iterate through each character in the string\n    for char in s:\n        # If the character is not a lowercase letter and not an underscore, return False\n        if not (char.islower() or char == '_'):\n            return False\n        \n        # If the character is an underscore\n        if char == '_':\n            # If the previous character was also an underscore, return False\n            if previous_was_underscore:\n                return False\n            # Set the previous character as underscore\n            previous_was_underscore = True\n        else:\n            # Set the previous character as not underscore\n            previous_was_underscore = False\n    \n    # If all checks are passed, return True\n    return True\n```",
    "no_parent": true,
    "dependency_used": false
}