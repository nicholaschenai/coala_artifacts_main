{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\nTests failed:\nNone",
    "code": "\ndef find_first_occurrence(arr, target):\n    # Iterate over each element in the array\n    for index in range(len(arr)):\n        # Check if the current element is equal to the target\n        if arr[index] == target:\n            # If found, return the current index\n            return index\n    # If the loop completes without finding the target, return -1\n    return -1\n",
    "full_code": "\ndef find_first_occurrence(arr, target):\n    # Iterate over each element in the array\n    for index in range(len(arr)):\n        # Check if the current element is equal to the target\n        if arr[index] == target:\n            # If found, return the current index\n            return index\n    # If the loop completes without finding the target, return -1\n    return -1\n",
    "reward": true,
    "program_code": "\ndef find_first_occurrence(arr, target):\n    # Iterate over each element in the array\n    for index in range(len(arr)):\n        # Check if the current element is equal to the target\n        if arr[index] == target:\n            # If found, return the current index\n            return index\n    # If the loop completes without finding the target, return -1\n    return -1\n",
    "program_name": "find_first_occurrence",
    "dependencies": [],
    "raw_msg": "### Problem Restatement\n\n1. **Restate the problem in plain English:**\n   We need to find the index of the first occurrence of a specified number in a sorted list of numbers. The list is sorted in non-decreasing order, and we need to return the index of the first time the specified number appears in the list.\n\n### Conceptualize a Solution\n\n2. **Conceptualize a solution in plain English:**\n   - Since the list is sorted, we can take advantage of this property to efficiently find the first occurrence of the number.\n   - We can iterate through the list from the beginning and check each element.\n   - As soon as we find the number, we return its index.\n   - If we reach the end of the list without finding the number, it means the number is not present, and we can return a special value like `-1` to indicate this.\n\n### Pseudocode\n\n3. **Write a pseudocode solution:**\n   ```\n   function find_first_occurrence(arr, target):\n       for index from 0 to length of arr - 1:\n           if arr[index] is equal to target:\n               return index\n       return -1\n   ```\n\n### Final Python Solution\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef find_first_occurrence(arr, target):\n    # Iterate over each element in the array\n    for index in range(len(arr)):\n        # Check if the current element is equal to the target\n        if arr[index] == target:\n            # If found, return the current index\n            return index\n    # If the loop completes without finding the target, return -1\n    return -1\n```\n\nThis solution efficiently finds the first occurrence of the target number in a sorted list by leveraging a simple linear search, which is optimal given the sorted nature of the list.",
    "no_parent": true,
    "dependency_used": false
}