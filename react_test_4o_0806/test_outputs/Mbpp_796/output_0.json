{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\nTests failed:\nNone",
    "code": "\ndef return_sum(d: dict) -> int:\n    # Get all the values from the dictionary\n    values = d.values()\n    # Calculate the sum of the values\n    total_sum = sum(values)\n    # Return the sum\n    return total_sum\n",
    "full_code": "\ndef return_sum(d: dict) -> int:\n    # Get all the values from the dictionary\n    values = d.values()\n    # Calculate the sum of the values\n    total_sum = sum(values)\n    # Return the sum\n    return total_sum\n",
    "reward": true,
    "program_code": "\ndef return_sum(d: dict) -> int:\n    # Get all the values from the dictionary\n    values = d.values()\n    # Calculate the sum of the values\n    total_sum = sum(values)\n    # Return the sum\n    return total_sum\n",
    "program_name": "return_sum",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nWe need to write a function called `return_sum` that takes a dictionary as input and returns the sum of all its values. The dictionary will have strings as keys and integers as values.\n\n## Conceptual Solution\n\n1. Extract all the values from the dictionary.\n2. Sum these values.\n3. Return the sum.\n\n## Pseudocode\n\n1. Define a function `return_sum` that takes a dictionary `d` as an argument.\n2. Use the `values()` method of the dictionary to get all the values.\n3. Use the `sum()` function to calculate the sum of these values.\n4. Return the result.\n\n## Final Python Solution\n\n```python\ndef return_sum(d: dict) -> int:\n    # Get all the values from the dictionary\n    values = d.values()\n    # Calculate the sum of the values\n    total_sum = sum(values)\n    # Return the sum\n    return total_sum\n```",
    "no_parent": true,
    "dependency_used": false
}