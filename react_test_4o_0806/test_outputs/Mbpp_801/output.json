{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert test_three_equal(1,1,1) == 3\n\nTests failed:\nNone",
    "code": "\ndef test_three_equal(a: int, b: int, c: int) -> int:\n    # Check if all three numbers are equal\n    if a == b == c:\n        return 3\n    # Check if any two numbers are equal\n    elif a == b or b == c or a == c:\n        return 2\n    # If none are equal\n    else:\n        return 0\n",
    "full_code": "\ndef test_three_equal(a: int, b: int, c: int) -> int:\n    # Check if all three numbers are equal\n    if a == b == c:\n        return 3\n    # Check if any two numbers are equal\n    elif a == b or b == c or a == c:\n        return 2\n    # If none are equal\n    else:\n        return 0\n",
    "reward": true,
    "program_code": "\ndef test_three_equal(a: int, b: int, c: int) -> int:\n    # Check if all three numbers are equal\n    if a == b == c:\n        return 3\n    # Check if any two numbers are equal\n    elif a == b or b == c or a == c:\n        return 2\n    # If none are equal\n    else:\n        return 0\n",
    "program_name": "test_three_equal",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nWe need to write a function that takes three integers as input and returns the count of how many of these integers are equal to each other. \n\n## Conceptual Solution\n\n1. If all three integers are the same, return 3.\n2. If only two of the integers are the same, return 2.\n3. If none of the integers are the same, return 0.\n\n## Pseudocode\n\n1. Check if all three integers are equal:\n   - If `a == b == c`, return 3.\n2. Check if any two integers are equal:\n   - If `a == b` or `b == c` or `a == c`, return 2.\n3. If none of the above conditions are met, return 0.\n\n## Final Python Solution\n\n```python\ndef test_three_equal(a: int, b: int, c: int) -> int:\n    # Check if all three numbers are equal\n    if a == b == c:\n        return 3\n    # Check if any two numbers are equal\n    elif a == b or b == c or a == c:\n        return 2\n    # If none are equal\n    else:\n        return 0\n```",
    "no_parent": true,
    "dependency_used": false
}