{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\nTests failed:\nNone",
    "code": "\ndef list_split(lst, n):\n    # Step 1: Initialize a list of n empty lists\n    result = [[] for _ in range(n)]\n    \n    # Step 2: Iterate over the input list with index\n    for i, elem in enumerate(lst):\n        # Step 3: Append the element to the appropriate sublist\n        result[i % n].append(elem)\n    \n    # Step 4: Return the list of lists\n    return result\n",
    "full_code": "\ndef list_split(lst, n):\n    # Step 1: Initialize a list of n empty lists\n    result = [[] for _ in range(n)]\n    \n    # Step 2: Iterate over the input list with index\n    for i, elem in enumerate(lst):\n        # Step 3: Append the element to the appropriate sublist\n        result[i % n].append(elem)\n    \n    # Step 4: Return the list of lists\n    return result\n",
    "reward": true,
    "program_code": "\ndef list_split(lst, n):\n    # Step 1: Initialize a list of n empty lists\n    result = [[] for _ in range(n)]\n    \n    # Step 2: Iterate over the input list with index\n    for i, elem in enumerate(lst):\n        # Step 3: Append the element to the appropriate sublist\n        result[i % n].append(elem)\n    \n    # Step 4: Return the list of lists\n    return result\n",
    "program_name": "list_split",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nWe need to create a function that takes a list and an integer `n` as inputs. The function should split the list into `n` separate lists, where each list contains every `n`-th element from the original list, starting from different initial positions. The result should be a list of these `n` lists.\n\n## Conceptual Solution\n\n1. **Initialize `n` empty lists**: We will create a list of `n` empty lists to store the results.\n2. **Iterate through the original list**: For each element in the original list, determine which of the `n` lists it should go into.\n3. **Distribute elements**: Use the index of the element modulo `n` to decide which of the `n` lists the element should be appended to.\n4. **Return the list of lists**: After processing all elements, return the list containing the `n` lists.\n\n## Pseudocode\n\n1. Create a list `result` containing `n` empty lists.\n2. For each index `i` and element `elem` in the input list:\n   - Determine the target list index as `i % n`.\n   - Append `elem` to `result[i % n]`.\n3. Return `result`.\n\n## Final Python Solution\n\n```python\ndef list_split(lst, n):\n    # Step 1: Initialize a list of n empty lists\n    result = [[] for _ in range(n)]\n    \n    # Step 2: Iterate over the input list with index\n    for i, elem in enumerate(lst):\n        # Step 3: Append the element to the appropriate sublist\n        result[i % n].append(elem)\n    \n    # Step 4: Return the list of lists\n    return result\n```\n\nThis solution efficiently distributes elements from the input list into `n` separate lists based on their index, ensuring that each list contains every `n`-th element from the original list.",
    "no_parent": true,
    "dependency_used": false
}