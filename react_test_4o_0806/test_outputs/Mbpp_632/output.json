{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\nTests failed:\nNone",
    "code": "\ndef move_zero(lst):\n    # Initialize an empty list to store non-zero elements\n    result = []\n    # Initialize a counter for zeroes\n    zero_count = 0\n    \n    # Iterate through each element in the input list\n    for element in lst:\n        # If the element is not zero, add it to the result list\n        if element != 0:\n            result.append(element)\n        else:\n            # If the element is zero, increment the zero counter\n            zero_count += 1\n    \n    # Append the counted number of zeroes to the end of the result list\n    result.extend([0] * zero_count)\n    \n    # Return the modified list with zeroes moved to the end\n    return result\n",
    "full_code": "\ndef move_zero(lst):\n    # Initialize an empty list to store non-zero elements\n    result = []\n    # Initialize a counter for zeroes\n    zero_count = 0\n    \n    # Iterate through each element in the input list\n    for element in lst:\n        # If the element is not zero, add it to the result list\n        if element != 0:\n            result.append(element)\n        else:\n            # If the element is zero, increment the zero counter\n            zero_count += 1\n    \n    # Append the counted number of zeroes to the end of the result list\n    result.extend([0] * zero_count)\n    \n    # Return the modified list with zeroes moved to the end\n    return result\n",
    "reward": true,
    "program_code": "\ndef move_zero(lst):\n    # Initialize an empty list to store non-zero elements\n    result = []\n    # Initialize a counter for zeroes\n    zero_count = 0\n    \n    # Iterate through each element in the input list\n    for element in lst:\n        # If the element is not zero, add it to the result list\n        if element != 0:\n            result.append(element)\n        else:\n            # If the element is zero, increment the zero counter\n            zero_count += 1\n    \n    # Append the counted number of zeroes to the end of the result list\n    result.extend([0] * zero_count)\n    \n    # Return the modified list with zeroes moved to the end\n    return result\n",
    "program_name": "move_zero",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nWe need to write a function that takes a list of integers and moves all the zeroes in the list to the end, while maintaining the order of the non-zero elements.\n\n## Conceptual Solution\n\n1. Initialize a new list to store the result.\n2. Iterate through the given list and append all non-zero elements to the new list.\n3. Count the number of zeroes in the original list.\n4. Append the counted number of zeroes to the end of the new list.\n5. Return the new list.\n\n## Pseudocode\n\n```\nfunction move_zero(lst):\n    result = []\n    zero_count = 0\n    \n    for each element in lst:\n        if element is not zero:\n            append element to result\n        else:\n            increment zero_count by 1\n    \n    for i from 0 to zero_count:\n        append 0 to result\n    \n    return result\n```\n\n## Final Python Solution\n\n```python\ndef move_zero(lst):\n    # Initialize an empty list to store non-zero elements\n    result = []\n    # Initialize a counter for zeroes\n    zero_count = 0\n    \n    # Iterate through each element in the input list\n    for element in lst:\n        # If the element is not zero, add it to the result list\n        if element != 0:\n            result.append(element)\n        else:\n            # If the element is zero, increment the zero counter\n            zero_count += 1\n    \n    # Append the counted number of zeroes to the end of the result list\n    result.extend([0] * zero_count)\n    \n    # Return the modified list with zeroes moved to the end\n    return result\n```",
    "no_parent": true,
    "dependency_used": false
}