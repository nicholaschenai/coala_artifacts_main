[
    {
        "role": "system",
        "content": "\nYou are an expert programmer tasked with solving the problem below.\n\nFollow the user's instructions to solve the problem.\nThe user can ask for analysis, code, or both.\n\n## Instructions\nWhen asked to output code,\n- Make sure to wrap your code in '```python' and '```' Markdown delimiters, \n- include exactly one block of code with the entire solution\n- No outside libraries are allowed. \n- Builtins are allowed.\n- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).\n- DO NOT write any assert statements / tests.\n\n## Problem\n[BEGIN PROBLEM]\nWrite a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.\n\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\"\"\"\n\n[END PROBLEM]\n"
    },
    {
        "role": "user",
        "content": "\n## Instructions\n\nReason through the problem and:\n1. Restate the problem in plain English\n2. Conceptualize a solution first in plain English\n3. Write a pseudocode solution\n4. Output the final Python 3 solution with your solution steps in comments.\n\nMake sure to wrap your code in '```python' and '```' Markdown delimiters, \nand include exactly one block of code with the entire solution.\n\nNo outside libraries are allowed.\nBuiltins are allowed.\n"
    },
    {
        "role": "assistant",
        "content": "## Problem Restatement\n\nWe need to write a function that takes a list of integers and moves all the zeroes in the list to the end, while maintaining the order of the non-zero elements.\n\n## Conceptual Solution\n\n1. Initialize a new list to store the result.\n2. Iterate through the given list and append all non-zero elements to the new list.\n3. Count the number of zeroes in the original list.\n4. Append the counted number of zeroes to the end of the new list.\n5. Return the new list.\n\n## Pseudocode\n\n```\nfunction move_zero(lst):\n    result = []\n    zero_count = 0\n    \n    for each element in lst:\n        if element is not zero:\n            append element to result\n        else:\n            increment zero_count by 1\n    \n    for i from 0 to zero_count:\n        append 0 to result\n    \n    return result\n```\n\n## Final Python Solution\n\n```python\ndef move_zero(lst):\n    # Initialize an empty list to store non-zero elements\n    result = []\n    # Initialize a counter for zeroes\n    zero_count = 0\n    \n    # Iterate through each element in the input list\n    for element in lst:\n        # If the element is not zero, add it to the result list\n        if element != 0:\n            result.append(element)\n        else:\n            # If the element is zero, increment the zero counter\n            zero_count += 1\n    \n    # Append the counted number of zeroes to the end of the result list\n    result.extend([0] * zero_count)\n    \n    # Return the modified list with zeroes moved to the end\n    return result\n```"
    },
    {
        "role": "user",
        "content": "\n[Environment Feedback]:\n    Note: Tests are automatically generated and can be wrong.\n\n    Tests passed:\n    assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\n    Tests failed:\n    None\n[/Environment Feedback]\n"
    }
]