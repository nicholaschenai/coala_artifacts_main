{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n\nTests failed:\nNone",
    "code": "\ndef occurance_substring(main_string: str, substring: str):\n    # Find the starting index of the substring in the main string\n    start_index = main_string.find(substring)\n    \n    # If the substring is not found, return None\n    if start_index == -1:\n        return None\n    \n    # Calculate the ending index of the substring\n    end_index = start_index + len(substring)\n    \n    # Return the tuple with the substring and its indices\n    return (substring, start_index, end_index)\n",
    "full_code": "\ndef occurance_substring(main_string: str, substring: str):\n    # Find the starting index of the substring in the main string\n    start_index = main_string.find(substring)\n    \n    # If the substring is not found, return None\n    if start_index == -1:\n        return None\n    \n    # Calculate the ending index of the substring\n    end_index = start_index + len(substring)\n    \n    # Return the tuple with the substring and its indices\n    return (substring, start_index, end_index)\n",
    "reward": true,
    "program_code": "\ndef occurance_substring(main_string: str, substring: str):\n    # Find the starting index of the substring in the main string\n    start_index = main_string.find(substring)\n    \n    # If the substring is not found, return None\n    if start_index == -1:\n        return None\n    \n    # Calculate the ending index of the substring\n    end_index = start_index + len(substring)\n    \n    # Return the tuple with the substring and its indices\n    return (substring, start_index, end_index)\n",
    "program_name": "occurance_substring",
    "dependencies": [],
    "raw_msg": "### Problem Restatement\n\nWe need to write a function that finds the first occurrence of a given substring within a larger string. The function should return a tuple containing the substring, the starting index of the substring, and the ending index of the substring. If the substring is not found, the function should return `None`.\n\n### Conceptual Solution\n\n1. **Identify the Substring**: Use Python's string method to find the first occurrence of the substring within the main string.\n2. **Determine Indices**: If the substring is found, calculate the starting and ending indices of the substring.\n3. **Return Result**: Return a tuple with the substring and its indices. If the substring is not found, return `None`.\n\n### Pseudocode\n\n1. Define a function `occurance_substring` that takes two parameters: `main_string` and `substring`.\n2. Use the `find` method of the string to get the starting index of the `substring` in `main_string`.\n3. If the starting index is `-1`, return `None` (indicating the substring is not found).\n4. Otherwise, calculate the ending index as the starting index plus the length of the substring.\n5. Return a tuple containing the substring, the starting index, and the ending index.\n\n### Final Python Solution\n\n```python\ndef occurance_substring(main_string: str, substring: str):\n    # Find the starting index of the substring in the main string\n    start_index = main_string.find(substring)\n    \n    # If the substring is not found, return None\n    if start_index == -1:\n        return None\n    \n    # Calculate the ending index of the substring\n    end_index = start_index + len(substring)\n    \n    # Return the tuple with the substring and its indices\n    return (substring, start_index, end_index)\n```\n\nThis solution uses the `find` method to locate the first occurrence of the substring. If the substring is found, it calculates the ending index by adding the length of the substring to the starting index. The function then returns the required tuple. If the substring is not found, it returns `None`.",
    "no_parent": true,
    "dependency_used": false
}