{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert check_expression(\"{()}[{}]\") == True\n\nTests failed:\nNone",
    "code": "\ndef check_expression(expression: str) -> bool:\n    # Stack to keep track of opening brackets\n    stack = []\n    \n    # Dictionary to map closing brackets to their corresponding opening brackets\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    \n    # Iterate over each character in the expression\n    for char in expression:\n        # If the character is an opening bracket, push it onto the stack\n        if char in bracket_map.values():\n            stack.append(char)\n        # If the character is a closing bracket\n        elif char in bracket_map:\n            # If the stack is empty, it means there's no matching opening bracket\n            if not stack:\n                return False\n            # Pop the top element from the stack\n            top_element = stack.pop()\n            # Check if the popped element matches the corresponding opening bracket\n            if bracket_map[char] != top_element:\n                return False\n    \n    # If the stack is empty, all opening brackets have been matched\n    return not stack\n",
    "full_code": "\ndef check_expression(expression: str) -> bool:\n    # Stack to keep track of opening brackets\n    stack = []\n    \n    # Dictionary to map closing brackets to their corresponding opening brackets\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    \n    # Iterate over each character in the expression\n    for char in expression:\n        # If the character is an opening bracket, push it onto the stack\n        if char in bracket_map.values():\n            stack.append(char)\n        # If the character is a closing bracket\n        elif char in bracket_map:\n            # If the stack is empty, it means there's no matching opening bracket\n            if not stack:\n                return False\n            # Pop the top element from the stack\n            top_element = stack.pop()\n            # Check if the popped element matches the corresponding opening bracket\n            if bracket_map[char] != top_element:\n                return False\n    \n    # If the stack is empty, all opening brackets have been matched\n    return not stack\n",
    "reward": true,
    "program_code": "\ndef check_expression(expression: str) -> bool:\n    # Stack to keep track of opening brackets\n    stack = []\n    \n    # Dictionary to map closing brackets to their corresponding opening brackets\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    \n    # Iterate over each character in the expression\n    for char in expression:\n        # If the character is an opening bracket, push it onto the stack\n        if char in bracket_map.values():\n            stack.append(char)\n        # If the character is a closing bracket\n        elif char in bracket_map:\n            # If the stack is empty, it means there's no matching opening bracket\n            if not stack:\n                return False\n            # Pop the top element from the stack\n            top_element = stack.pop()\n            # Check if the popped element matches the corresponding opening bracket\n            if bracket_map[char] != top_element:\n                return False\n    \n    # If the stack is empty, all opening brackets have been matched\n    return not stack\n",
    "program_name": "check_expression",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nWe need to determine if a given string expression containing brackets is balanced. An expression is considered balanced if every opening bracket has a corresponding and correctly ordered closing bracket. The types of brackets to consider are parentheses `()`, curly braces `{}`, and square brackets `[]`.\n\n## Conceptual Solution\n\nTo solve this problem, we can use a stack data structure. The stack will help us keep track of the opening brackets as we encounter them. When we encounter a closing bracket, we will check if it matches the most recent opening bracket stored in the stack. If it matches, we pop the opening bracket from the stack. If it doesn't match or if the stack is empty when we encounter a closing bracket, the expression is not balanced. At the end of the iteration, if the stack is empty, the expression is balanced; otherwise, it is not.\n\n## Pseudocode\n\n1. Initialize an empty stack.\n2. Create a dictionary to map each closing bracket to its corresponding opening bracket.\n3. Iterate over each character in the expression:\n   - If the character is an opening bracket, push it onto the stack.\n   - If the character is a closing bracket:\n     - Check if the stack is empty. If it is, return False (unbalanced).\n     - Pop the top element from the stack and check if it matches the corresponding opening bracket for the current closing bracket. If it doesn't match, return False.\n4. After iterating through the expression, check if the stack is empty. If it is, return True (balanced); otherwise, return False.\n\n## Final Python Solution\n\n```python\ndef check_expression(expression: str) -> bool:\n    # Stack to keep track of opening brackets\n    stack = []\n    \n    # Dictionary to map closing brackets to their corresponding opening brackets\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    \n    # Iterate over each character in the expression\n    for char in expression:\n        # If the character is an opening bracket, push it onto the stack\n        if char in bracket_map.values():\n            stack.append(char)\n        # If the character is a closing bracket\n        elif char in bracket_map:\n            # If the stack is empty, it means there's no matching opening bracket\n            if not stack:\n                return False\n            # Pop the top element from the stack\n            top_element = stack.pop()\n            # Check if the popped element matches the corresponding opening bracket\n            if bracket_map[char] != top_element:\n                return False\n    \n    # If the stack is empty, all opening brackets have been matched\n    return not stack\n```\n\nThis solution uses a stack to ensure that each opening bracket has a corresponding and correctly ordered closing bracket, thus determining if the expression is balanced.",
    "no_parent": true,
    "dependency_used": false
}