{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\nTests failed:\nNone",
    "code": "\ndef two_unique_nums(nums):\n    # Step 1: Count occurrences of each number\n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Step 2: Filter numbers that appear exactly once\n    unique_nums = []\n    for num, count in count_dict.items():\n        if count == 1:\n            unique_nums.append(num)\n    \n    # Step 3: Return the list of unique numbers\n    return unique_nums\n",
    "full_code": "\ndef two_unique_nums(nums):\n    # Step 1: Count occurrences of each number\n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Step 2: Filter numbers that appear exactly once\n    unique_nums = []\n    for num, count in count_dict.items():\n        if count == 1:\n            unique_nums.append(num)\n    \n    # Step 3: Return the list of unique numbers\n    return unique_nums\n",
    "reward": true,
    "program_code": "\ndef two_unique_nums(nums):\n    # Step 1: Count occurrences of each number\n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Step 2: Filter numbers that appear exactly once\n    unique_nums = []\n    for num, count in count_dict.items():\n        if count == 1:\n            unique_nums.append(num)\n    \n    # Step 3: Return the list of unique numbers\n    return unique_nums\n",
    "program_name": "two_unique_nums",
    "dependencies": [],
    "raw_msg": "### Problem Restatement\n\nWe need to write a function that takes a list of numbers and returns a new list containing only the numbers that appear exactly once in the original list. In other words, we need to remove all numbers that have duplicates in the list.\n\n### Conceptual Solution\n\n1. **Count Occurrences**: First, we need to determine how many times each number appears in the list.\n2. **Filter Unique Numbers**: Once we have the counts, we can create a new list that includes only the numbers that appear exactly once.\n3. **Return the Result**: Finally, return the list of unique numbers.\n\n### Pseudocode\n\n1. Initialize an empty dictionary to store the count of each number.\n2. Iterate over each number in the input list:\n   - If the number is already in the dictionary, increment its count.\n   - If the number is not in the dictionary, add it with a count of 1.\n3. Initialize an empty list to store the unique numbers.\n4. Iterate over the dictionary:\n   - For each number with a count of 1, add it to the list of unique numbers.\n5. Return the list of unique numbers.\n\n### Final Python Solution\n\n```python\ndef two_unique_nums(nums):\n    # Step 1: Count occurrences of each number\n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Step 2: Filter numbers that appear exactly once\n    unique_nums = []\n    for num, count in count_dict.items():\n        if count == 1:\n            unique_nums.append(num)\n    \n    # Step 3: Return the list of unique numbers\n    return unique_nums\n```\n\nThis solution efficiently counts the occurrences of each number using a dictionary and then filters out the numbers that appear more than once. The final list contains only those numbers that are unique in the input list.",
    "no_parent": true,
    "dependency_used": false
}