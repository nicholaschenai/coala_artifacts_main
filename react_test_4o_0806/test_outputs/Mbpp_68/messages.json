[
    {
        "role": "system",
        "content": "\nYou are an expert programmer tasked with solving the problem below.\n\nFollow the user's instructions to solve the problem.\nThe user can ask for analysis, code, or both.\n\n## Instructions\nWhen asked to output code,\n- Make sure to wrap your code in '```python' and '```' Markdown delimiters, \n- include exactly one block of code with the entire solution\n- No outside libraries are allowed. \n- Builtins are allowed.\n- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).\n- DO NOT write any assert statements / tests.\n\n## Problem\n[BEGIN PROBLEM]\nWrite a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.\n\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\n[END PROBLEM]\n"
    },
    {
        "role": "user",
        "content": "\n## Instructions\n\nReason through the problem and:\n1. Restate the problem in plain English\n2. Conceptualize a solution first in plain English\n3. Write a pseudocode solution\n4. Output the final Python 3 solution with your solution steps in comments.\n\nMake sure to wrap your code in '```python' and '```' Markdown delimiters, \nand include exactly one block of code with the entire solution.\n\nNo outside libraries are allowed.\nBuiltins are allowed.\n"
    },
    {
        "role": "assistant",
        "content": "### Problem Restatement\n\nWe need to determine if a given list of numbers is monotonic. A list is considered monotonic if it is either entirely non-increasing or non-decreasing. In other words, the list should either be sorted in ascending order or descending order, or remain constant.\n\n### Conceptual Solution\n\n1. **Identify Monotonicity**: \n   - A list is non-decreasing if each element is less than or equal to the next element.\n   - A list is non-increasing if each element is greater than or equal to the next element.\n   \n2. **Check Both Conditions**:\n   - We will check if the list is non-decreasing.\n   - We will also check if the list is non-increasing.\n   - If either condition is true, the list is monotonic.\n\n3. **Return Result**:\n   - If the list satisfies either the non-decreasing or non-increasing condition, return `True`.\n   - Otherwise, return `False`.\n\n### Pseudocode\n\n```\nfunction is_Monotonic(array):\n    if array is empty or has one element:\n        return True\n    \n    initialize two flags: is_non_decreasing and is_non_increasing to True\n    \n    for each index i from 0 to length of array - 2:\n        if array[i] > array[i + 1]:\n            set is_non_decreasing to False\n        if array[i] < array[i + 1]:\n            set is_non_increasing to False\n    \n    return is_non_decreasing or is_non_increasing\n```\n\n### Final Python Solution\n\n```python\ndef is_Monotonic(array):\n    # An empty array or a single-element array is trivially monotonic\n    if len(array) <= 1:\n        return True\n    \n    # Initialize flags for non-decreasing and non-increasing\n    is_non_decreasing = True\n    is_non_increasing = True\n    \n    # Iterate through the array to check monotonicity\n    for i in range(len(array) - 1):\n        if array[i] > array[i + 1]:\n            is_non_decreasing = False\n        if array[i] < array[i + 1]:\n            is_non_increasing = False\n    \n    # The array is monotonic if it is either non-decreasing or non-increasing\n    return is_non_decreasing or is_non_increasing\n```\n\nThis solution efficiently checks the monotonicity of the array by iterating through it once, making it O(n) in time complexity, where n is the number of elements in the array."
    },
    {
        "role": "user",
        "content": "\n[Environment Feedback]:\n    Note: Tests are automatically generated and can be wrong.\n\n    Tests passed:\n    assert is_Monotonic([6, 5, 4, 4]) == True\n\n    Tests failed:\n    None\n[/Environment Feedback]\n"
    }
]