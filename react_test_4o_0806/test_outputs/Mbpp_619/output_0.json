{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\nTests failed:\nNone",
    "code": "\ndef move_num(s: str) -> str:\n    # Initialize empty strings for non-numeric and numeric characters\n    non_numeric = ''\n    numeric = ''\n    \n    # Iterate over each character in the input string\n    for char in s:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Append to numeric string if it is a digit\n            numeric += char\n        else:\n            # Append to non-numeric string if it is not a digit\n            non_numeric += char\n    \n    # Concatenate non-numeric and numeric strings\n    result = non_numeric + numeric\n    \n    # Return the final result\n    return result\n",
    "full_code": "\ndef move_num(s: str) -> str:\n    # Initialize empty strings for non-numeric and numeric characters\n    non_numeric = ''\n    numeric = ''\n    \n    # Iterate over each character in the input string\n    for char in s:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Append to numeric string if it is a digit\n            numeric += char\n        else:\n            # Append to non-numeric string if it is not a digit\n            non_numeric += char\n    \n    # Concatenate non-numeric and numeric strings\n    result = non_numeric + numeric\n    \n    # Return the final result\n    return result\n",
    "reward": true,
    "program_code": "\ndef move_num(s: str) -> str:\n    # Initialize empty strings for non-numeric and numeric characters\n    non_numeric = ''\n    numeric = ''\n    \n    # Iterate over each character in the input string\n    for char in s:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Append to numeric string if it is a digit\n            numeric += char\n        else:\n            # Append to non-numeric string if it is not a digit\n            non_numeric += char\n    \n    # Concatenate non-numeric and numeric strings\n    result = non_numeric + numeric\n    \n    # Return the final result\n    return result\n",
    "program_name": "move_num",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nWe need to create a function that takes a string as input and moves all the numeric characters to the end of the string, while maintaining the order of both the non-numeric and numeric characters.\n\n## Conceptual Solution\n\n1. Traverse the input string character by character.\n2. Separate the characters into two groups: \n   - Non-numeric characters\n   - Numeric characters\n3. Concatenate the non-numeric characters first, followed by the numeric characters.\n4. Return the resulting string.\n\n## Pseudocode\n\n1. Initialize two empty strings: `non_numeric` and `numeric`.\n2. For each character `char` in the input string:\n   - If `char` is a digit, append it to the `numeric` string.\n   - Otherwise, append it to the `non_numeric` string.\n3. Concatenate `non_numeric` and `numeric` strings.\n4. Return the concatenated string.\n\n## Final Python Solution\n\n```python\ndef move_num(s: str) -> str:\n    # Initialize empty strings for non-numeric and numeric characters\n    non_numeric = ''\n    numeric = ''\n    \n    # Iterate over each character in the input string\n    for char in s:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Append to numeric string if it is a digit\n            numeric += char\n        else:\n            # Append to non-numeric string if it is not a digit\n            non_numeric += char\n    \n    # Concatenate non-numeric and numeric strings\n    result = non_numeric + numeric\n    \n    # Return the final result\n    return result\n```\n\nThis solution iterates over the input string once, separating characters into non-numeric and numeric categories, and then concatenates them in the required order.",
    "no_parent": true,
    "dependency_used": false
}