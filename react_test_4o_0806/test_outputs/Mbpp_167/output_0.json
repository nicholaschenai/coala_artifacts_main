{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert next_power_of_2(0) == 1\n\nTests failed:\nNone",
    "code": "\ndef next_power_of_2(n: int) -> int:\n    # If n is less than or equal to 0, the smallest power of 2 is 1\n    if n <= 0:\n        return 1\n    \n    # Start with the smallest power of 2, which is 1 (2^0)\n    power = 1\n    \n    # Keep multiplying by 2 until power is greater than or equal to n\n    while power < n:\n        power *= 2\n    \n    # Return the smallest power of 2 that is greater than or equal to n\n    return power\n",
    "full_code": "\ndef next_power_of_2(n: int) -> int:\n    # If n is less than or equal to 0, the smallest power of 2 is 1\n    if n <= 0:\n        return 1\n    \n    # Start with the smallest power of 2, which is 1 (2^0)\n    power = 1\n    \n    # Keep multiplying by 2 until power is greater than or equal to n\n    while power < n:\n        power *= 2\n    \n    # Return the smallest power of 2 that is greater than or equal to n\n    return power\n",
    "reward": true,
    "program_code": "\ndef next_power_of_2(n: int) -> int:\n    # If n is less than or equal to 0, the smallest power of 2 is 1\n    if n <= 0:\n        return 1\n    \n    # Start with the smallest power of 2, which is 1 (2^0)\n    power = 1\n    \n    # Keep multiplying by 2 until power is greater than or equal to n\n    while power < n:\n        power *= 2\n    \n    # Return the smallest power of 2 that is greater than or equal to n\n    return power\n",
    "program_name": "next_power_of_2",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nWe need to write a function that finds the smallest power of 2 that is greater than or equal to a given integer `n`. For example, if `n` is 0, the smallest power of 2 that is greater than or equal to 0 is 1 (since 2^0 = 1).\n\n## Conceptual Solution\n\n1. If `n` is less than or equal to 0, the smallest power of 2 that is greater than or equal to `n` is 1.\n2. If `n` is greater than 0, we need to find the smallest power of 2 that is greater than or equal to `n`. We can do this by starting with 1 (which is 2^0) and keep multiplying by 2 until the result is greater than or equal to `n`.\n\n## Pseudocode\n\n```\nfunction next_power_of_2(n):\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power = power * 2\n    return power\n```\n\n## Final Python Solution\n\n```python\ndef next_power_of_2(n: int) -> int:\n    # If n is less than or equal to 0, the smallest power of 2 is 1\n    if n <= 0:\n        return 1\n    \n    # Start with the smallest power of 2, which is 1 (2^0)\n    power = 1\n    \n    # Keep multiplying by 2 until power is greater than or equal to n\n    while power < n:\n        power *= 2\n    \n    # Return the smallest power of 2 that is greater than or equal to n\n    return power\n```",
    "no_parent": true,
    "dependency_used": false
}