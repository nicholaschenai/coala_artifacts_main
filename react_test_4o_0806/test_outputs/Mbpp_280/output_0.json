{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\nTests failed:\nNone",
    "code": "\ndef sequential_search(array, element):\n    # Iterate over the array with index\n    for index in range(len(array)):\n        # Check if the current element matches the target element\n        if array[index] == element:\n            # If found, return True and the index\n            return (True, index)\n    # If not found, return False and -1\n    return (False, -1)\n",
    "full_code": "\ndef sequential_search(array, element):\n    # Iterate over the array with index\n    for index in range(len(array)):\n        # Check if the current element matches the target element\n        if array[index] == element:\n            # If found, return True and the index\n            return (True, index)\n    # If not found, return False and -1\n    return (False, -1)\n",
    "reward": true,
    "program_code": "\ndef sequential_search(array, element):\n    # Iterate over the array with index\n    for index in range(len(array)):\n        # Check if the current element matches the target element\n        if array[index] == element:\n            # If found, return True and the index\n            return (True, index)\n    # If not found, return False and -1\n    return (False, -1)\n",
    "program_name": "sequential_search",
    "dependencies": [],
    "raw_msg": "### Problem Restatement\n\n1. **Restate the problem in plain English:**\n   We need to create a function that checks if a given element is present in a list. If the element is found, the function should return a tuple with `True` and the index of the element. If the element is not found, it should return a tuple with `False` and `-1`.\n\n### Conceptualize a Solution\n\n2. **Conceptualize a solution in plain English:**\n   - Iterate through the list using a loop.\n   - For each element in the list, check if it matches the target element.\n   - If a match is found, return `True` and the current index.\n   - If the loop completes without finding the element, return `False` and `-1`.\n\n### Pseudocode\n\n3. **Write a pseudocode solution:**\n   ```\n   function sequential_search(array, element):\n       for index from 0 to length of array - 1:\n           if array[index] is equal to element:\n               return (True, index)\n       return (False, -1)\n   ```\n\n### Final Python Solution\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef sequential_search(array, element):\n    # Iterate over the array with index\n    for index in range(len(array)):\n        # Check if the current element matches the target element\n        if array[index] == element:\n            # If found, return True and the index\n            return (True, index)\n    # If not found, return False and -1\n    return (False, -1)\n```\n\nThis solution iterates through the list, checking each element against the target. If it finds the target, it returns `True` and the index. If it doesn't find the target, it returns `False` and `-1`.",
    "no_parent": true,
    "dependency_used": false
}