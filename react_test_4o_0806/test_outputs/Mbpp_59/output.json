{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert is_octagonal(5) == 65\n\nTests failed:\nNone",
    "code": "\ndef is_octagonal(n: int) -> int:\n    # Calculate the nth octagonal number using the formula\n    # O_n = n * (3n - 2)\n    return n * (3 * n - 2)\n",
    "full_code": "\ndef is_octagonal(n: int) -> int:\n    # Calculate the nth octagonal number using the formula\n    # O_n = n * (3n - 2)\n    return n * (3 * n - 2)\n",
    "reward": true,
    "program_code": "\ndef is_octagonal(n: int) -> int:\n    # Calculate the nth octagonal number using the formula\n    # O_n = n * (3n - 2)\n    return n * (3 * n - 2)\n",
    "program_name": "is_octagonal",
    "dependencies": [],
    "raw_msg": "\n### Problem Restatement\n\nWe need to write a function that calculates the nth octagonal number. An octagonal number is a figurate number that represents an octagon. The formula to find the nth octagonal number is given by:\n\n\\[ O_n = n \\times (3n - 2) \\]\n\nwhere \\( n \\) is the position in the sequence of octagonal numbers.\n\n### Conceptual Solution\n\n1. **Understand the Formula**: The nth octagonal number can be calculated using the formula \\( O_n = n \\times (3n - 2) \\).\n2. **Implement the Formula**: Use the formula directly in the function to compute the nth octagonal number.\n3. **Return the Result**: Return the computed octagonal number.\n\n### Pseudocode\n\n```\nfunction is_octagonal(n):\n    return n * (3 * n - 2)\n```\n\n### Final Python Solution\n\n```python\ndef is_octagonal(n: int) -> int:\n    # Calculate the nth octagonal number using the formula\n    # O_n = n * (3n - 2)\n    return n * (3 * n - 2)\n```",
    "no_parent": true,
    "dependency_used": false
}