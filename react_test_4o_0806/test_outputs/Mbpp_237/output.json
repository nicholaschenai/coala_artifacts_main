{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\nTests failed:\nNone",
    "code": "\ndef check_occurences(tuples_list):\n    # Initialize an empty dictionary to store the counts of each tuple\n    tuple_count = {}\n    \n    # Iterate over each tuple in the list\n    for tup in tuples_list:\n        # Sort the tuple to handle both the tuple and its reverse as the same key\n        sorted_tup = tuple(sorted(tup))\n        \n        # If the sorted tuple is already in the dictionary, increment its count\n        if sorted_tup in tuple_count:\n            tuple_count[sorted_tup] += 1\n        else:\n            # If the sorted tuple is not in the dictionary, add it with a count of 1\n            tuple_count[sorted_tup] = 1\n    \n    # Return the dictionary containing the counts of each tuple\n    return tuple_count\n",
    "full_code": "\ndef check_occurences(tuples_list):\n    # Initialize an empty dictionary to store the counts of each tuple\n    tuple_count = {}\n    \n    # Iterate over each tuple in the list\n    for tup in tuples_list:\n        # Sort the tuple to handle both the tuple and its reverse as the same key\n        sorted_tup = tuple(sorted(tup))\n        \n        # If the sorted tuple is already in the dictionary, increment its count\n        if sorted_tup in tuple_count:\n            tuple_count[sorted_tup] += 1\n        else:\n            # If the sorted tuple is not in the dictionary, add it with a count of 1\n            tuple_count[sorted_tup] = 1\n    \n    # Return the dictionary containing the counts of each tuple\n    return tuple_count\n",
    "reward": true,
    "program_code": "\ndef check_occurences(tuples_list):\n    # Initialize an empty dictionary to store the counts of each tuple\n    tuple_count = {}\n    \n    # Iterate over each tuple in the list\n    for tup in tuples_list:\n        # Sort the tuple to handle both the tuple and its reverse as the same key\n        sorted_tup = tuple(sorted(tup))\n        \n        # If the sorted tuple is already in the dictionary, increment its count\n        if sorted_tup in tuple_count:\n            tuple_count[sorted_tup] += 1\n        else:\n            # If the sorted tuple is not in the dictionary, add it with a count of 1\n            tuple_count[sorted_tup] = 1\n    \n    # Return the dictionary containing the counts of each tuple\n    return tuple_count\n",
    "program_name": "check_occurences",
    "dependencies": [],
    "raw_msg": "### Problem Restatement\n\n1. **Restate the problem in plain English:**\n\n   We need to create a function that takes a list of tuples as input. Each tuple contains two integers. The function should return a dictionary where each unique tuple (or its reverse) is a key, and the value is the number of times that tuple or its reverse appears in the list.\n\n### Conceptualize a Solution\n\n2. **Conceptualize a solution in plain English:**\n\n   - Initialize an empty dictionary to store the counts of each tuple.\n   - Iterate over each tuple in the list.\n   - For each tuple, create a sorted version of the tuple to handle both the tuple and its reverse as the same key.\n   - If the sorted tuple is already in the dictionary, increment its count.\n   - If the sorted tuple is not in the dictionary, add it with a count of 1.\n   - After processing all tuples, return the dictionary.\n\n### Pseudocode\n\n3. **Write a pseudocode solution:**\n\n   ```\n   function check_occurences(tuples_list):\n       initialize an empty dictionary called tuple_count\n       for each tuple in tuples_list:\n           sort the tuple to handle both tuple and its reverse\n           if sorted tuple is in tuple_count:\n               increment the count of the sorted tuple\n           else:\n               add the sorted tuple to tuple_count with a count of 1\n       return tuple_count\n   ```\n\n### Final Python Solution\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef check_occurences(tuples_list):\n    # Initialize an empty dictionary to store the counts of each tuple\n    tuple_count = {}\n    \n    # Iterate over each tuple in the list\n    for tup in tuples_list:\n        # Sort the tuple to handle both the tuple and its reverse as the same key\n        sorted_tup = tuple(sorted(tup))\n        \n        # If the sorted tuple is already in the dictionary, increment its count\n        if sorted_tup in tuple_count:\n            tuple_count[sorted_tup] += 1\n        else:\n            # If the sorted tuple is not in the dictionary, add it with a count of 1\n            tuple_count[sorted_tup] = 1\n    \n    # Return the dictionary containing the counts of each tuple\n    return tuple_count\n```\n\nThis solution iterates through the list of tuples, normalizes each tuple by sorting it, and then counts the occurrences of each normalized tuple in a dictionary. The final dictionary is returned, which maps each unique tuple (or its reverse) to its count.",
    "no_parent": true,
    "dependency_used": false
}