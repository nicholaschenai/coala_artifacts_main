{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\nTests failed:\nNone",
    "code": "\ndef magic_square_test(matrix):\n    # Check if the matrix is empty or not square\n    if not matrix or len(matrix) != len(matrix[0]):\n        return False\n    \n    n = len(matrix)\n    # Calculate the magic sum using the first row\n    magic_sum = sum(matrix[0])\n    \n    # Check each row sum\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check each column sum\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check the main diagonal sum\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check the secondary diagonal sum\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    # If all checks pass, it is a magic square\n    return True\n",
    "full_code": "\ndef magic_square_test(matrix):\n    # Check if the matrix is empty or not square\n    if not matrix or len(matrix) != len(matrix[0]):\n        return False\n    \n    n = len(matrix)\n    # Calculate the magic sum using the first row\n    magic_sum = sum(matrix[0])\n    \n    # Check each row sum\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check each column sum\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check the main diagonal sum\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check the secondary diagonal sum\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    # If all checks pass, it is a magic square\n    return True\n",
    "reward": true,
    "program_code": "\ndef magic_square_test(matrix):\n    # Check if the matrix is empty or not square\n    if not matrix or len(matrix) != len(matrix[0]):\n        return False\n    \n    n = len(matrix)\n    # Calculate the magic sum using the first row\n    magic_sum = sum(matrix[0])\n    \n    # Check each row sum\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check each column sum\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check the main diagonal sum\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check the secondary diagonal sum\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    # If all checks pass, it is a magic square\n    return True\n",
    "program_name": "magic_square_test",
    "dependencies": [],
    "raw_msg": "### Problem Restatement\n\nWe need to determine if a given square matrix is a magic square. A magic square is a grid of numbers where the sums of numbers in each row, each column, and both main diagonals are the same.\n\n### Conceptual Solution\n\n1. **Check Dimensions**: First, ensure the matrix is square (i.e., the number of rows equals the number of columns).\n2. **Calculate the Magic Sum**: Compute the sum of the first row. This will be the target sum that all other rows, columns, and diagonals should match.\n3. **Check Rows**: Verify that the sum of each row equals the magic sum.\n4. **Check Columns**: Verify that the sum of each column equals the magic sum.\n5. **Check Diagonals**: Verify that the sum of both the main diagonal (top-left to bottom-right) and the secondary diagonal (top-right to bottom-left) equals the magic sum.\n6. **Return Result**: If all checks pass, the matrix is a magic square; otherwise, it is not.\n\n### Pseudocode\n\n```\nfunction magic_square_test(matrix):\n    if not matrix or len(matrix) != len(matrix[0]):\n        return False\n    \n    n = len(matrix)\n    magic_sum = sum(matrix[0])\n    \n    for each row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    return True\n```\n\n### Final Python Solution\n\n```python\ndef magic_square_test(matrix):\n    # Check if the matrix is empty or not square\n    if not matrix or len(matrix) != len(matrix[0]):\n        return False\n    \n    n = len(matrix)\n    # Calculate the magic sum using the first row\n    magic_sum = sum(matrix[0])\n    \n    # Check each row sum\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check each column sum\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check the main diagonal sum\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check the secondary diagonal sum\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    # If all checks pass, it is a magic square\n    return True\n```\n\nThis solution checks all necessary conditions for a matrix to be a magic square and returns `True` if it is, otherwise `False`.",
    "no_parent": true,
    "dependency_used": false
}