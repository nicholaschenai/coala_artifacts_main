{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert not text_match_three(\"ac\")\n\nTests failed:\nNone",
    "code": "\ndef text_match_three(text: str) -> bool:\n    # Loop through each character in the string up to the length minus 3\n    for i in range(len(text) - 3):\n        # Check if the current character is 'a' and the next three are 'b'\n        if text[i] == 'a' and text[i+1] == 'b' and text[i+2] == 'b' and text[i+3] == 'b':\n            return True\n    # If no such pattern is found, return False\n    return False\n",
    "full_code": "\ndef text_match_three(text: str) -> bool:\n    # Loop through each character in the string up to the length minus 3\n    for i in range(len(text) - 3):\n        # Check if the current character is 'a' and the next three are 'b'\n        if text[i] == 'a' and text[i+1] == 'b' and text[i+2] == 'b' and text[i+3] == 'b':\n            return True\n    # If no such pattern is found, return False\n    return False\n",
    "reward": true,
    "program_code": "\ndef text_match_three(text: str) -> bool:\n    # Loop through each character in the string up to the length minus 3\n    for i in range(len(text) - 3):\n        # Check if the current character is 'a' and the next three are 'b'\n        if text[i] == 'a' and text[i+1] == 'b' and text[i+2] == 'b' and text[i+3] == 'b':\n            return True\n    # If no such pattern is found, return False\n    return False\n",
    "program_name": "text_match_three",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\n1. **Restate the problem in plain English:**\n\n   We need to write a function that checks if a given string contains the letter 'a' followed immediately by exactly three 'b's. If the string contains this pattern, the function should return `True`; otherwise, it should return `False`.\n\n2. **Conceptualize a solution in plain English:**\n\n   To solve this problem, we can iterate through the string and look for the pattern 'abbb'. We will check each character in the string to see if it is 'a', and if it is, we will check the next three characters to see if they are all 'b'. If we find such a pattern, we return `True`. If we reach the end of the string without finding the pattern, we return `False`.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   Define function text_match_three with parameter text\n       Loop through each character in text up to the length of text minus 3\n           If the current character is 'a' and the next three characters are 'b'\n               Return True\n       Return False\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef text_match_three(text: str) -> bool:\n    # Loop through each character in the string up to the length minus 3\n    for i in range(len(text) - 3):\n        # Check if the current character is 'a' and the next three are 'b'\n        if text[i] == 'a' and text[i+1] == 'b' and text[i+2] == 'b' and text[i+3] == 'b':\n            return True\n    # If no such pattern is found, return False\n    return False\n```",
    "no_parent": true,
    "dependency_used": false
}