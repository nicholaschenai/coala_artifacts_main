[
    {
        "role": "system",
        "content": "\nYou are an expert programmer tasked with solving the problem below.\n\nFollow the user's instructions to solve the problem.\nThe user can ask for analysis, code, or both.\n\n## Instructions\nWhen asked to output code,\n- Make sure to wrap your code in '```python' and '```' Markdown delimiters, \n- include exactly one block of code with the entire solution\n- No outside libraries are allowed. \n- Builtins are allowed.\n- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).\n- DO NOT write any assert statements / tests.\n\n## Problem\n[BEGIN PROBLEM]\nWrite a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.\n\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\n[END PROBLEM]\n"
    },
    {
        "role": "user",
        "content": "\n## Instructions\n\nReason through the problem and:\n1. Restate the problem in plain English\n2. Conceptualize a solution first in plain English\n3. Write a pseudocode solution\n4. Output the final Python 3 solution with your solution steps in comments.\n\nMake sure to wrap your code in '```python' and '```' Markdown delimiters, \nand include exactly one block of code with the entire solution.\n\nNo outside libraries are allowed.\nBuiltins are allowed.\n"
    },
    {
        "role": "assistant",
        "content": "## Problem Restatement\n\n1. **Restate the problem in plain English:**\n   We need to create a function that takes a list which may contain nested lists and returns a single flattened list with all the elements in a single level.\n\n2. **Conceptualize a solution first in plain English:**\n   To solve this problem, we can use a recursive approach. We will iterate through each element in the list. If an element is a list itself, we will recursively flatten it and add its elements to the result. If an element is not a list, we will directly add it to the result. This way, we can handle any level of nesting.\n\n3. **Write a pseudocode solution:**\n   ```\n   Define a function flatten_list that takes a list as input.\n   Initialize an empty list called flat_list to store the result.\n   For each element in the input list:\n       If the element is a list:\n           Recursively call flatten_list on this element and extend flat_list with the result.\n       Else:\n           Append the element to flat_list.\n   Return flat_list.\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef flatten_list(nested_list):\n    # Initialize an empty list to store the flattened elements\n    flat_list = []\n    \n    # Iterate over each element in the input list\n    for element in nested_list:\n        # If the element is a list, recursively flatten it\n        if isinstance(element, list):\n            # Extend the flat_list with the flattened result of the element\n            flat_list.extend(flatten_list(element))\n        else:\n            # If the element is not a list, append it directly to flat_list\n            flat_list.append(element)\n    \n    # Return the fully flattened list\n    return flat_list\n```\n\nThis solution uses recursion to handle any level of nested lists, ensuring that all elements are added to a single flat list."
    },
    {
        "role": "user",
        "content": "\n[Environment Feedback]:\n    Note: Tests are automatically generated and can be wrong.\n\n    Tests passed:\n    assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\n    Tests failed:\n    None\n[/Environment Feedback]\n"
    }
]