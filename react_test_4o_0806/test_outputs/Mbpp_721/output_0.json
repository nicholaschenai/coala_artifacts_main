{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\nTests failed:\nNone",
    "code": "\ndef maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    \n    # Initialize the starting point\n    dp[0][0] = cost[0][0]\n    \n    # Fill the first row and first column\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    \n    # Fill the rest of the dp table\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    \n    # Calculate the maximum average\n    max_total_cost = dp[N-1][N-1]\n    max_average = max_total_cost / (2 * N - 1)\n    \n    return max_average\n",
    "full_code": "\ndef maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    \n    # Initialize the starting point\n    dp[0][0] = cost[0][0]\n    \n    # Fill the first row and first column\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    \n    # Fill the rest of the dp table\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    \n    # Calculate the maximum average\n    max_total_cost = dp[N-1][N-1]\n    max_average = max_total_cost / (2 * N - 1)\n    \n    return max_average\n",
    "reward": true,
    "program_code": "\ndef maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    \n    # Initialize the starting point\n    dp[0][0] = cost[0][0]\n    \n    # Fill the first row and first column\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    \n    # Fill the rest of the dp table\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    \n    # Calculate the maximum average\n    max_total_cost = dp[N-1][N-1]\n    max_average = max_total_cost / (2 * N - 1)\n    \n    return max_average\n",
    "program_name": "maxAverageOfPath",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nWe are given a square matrix where each cell has a specific cost. We need to find a path from the top-left corner to the bottom-right corner of the matrix. The path can only move right or down. Our goal is to find the path that has the maximum average cost, where the average is calculated as the total cost of the path divided by the number of cells in the path.\n\n## Conceptual Solution\n\n1. **Dynamic Programming Approach**: We can use dynamic programming to solve this problem efficiently. We'll maintain a 2D list `dp` where `dp[i][j]` will store the maximum total cost of reaching cell `(i, j)` from the top-left corner `(0, 0)`.\n\n2. **Initialization**: \n   - Start by initializing `dp[0][0]` with the cost of the top-left cell, as this is the starting point.\n\n3. **Filling the DP Table**:\n   - For each cell `(i, j)`, calculate the maximum cost to reach that cell by considering the maximum cost of reaching the cell from the top `(i-1, j)` or from the left `(i, j-1)`.\n   - The formula will be: `dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])`.\n\n4. **Calculate the Average**:\n   - The number of cells in any path from `(0, 0)` to `(N-1, N-1)` is `2N - 1`.\n   - The maximum average cost will be `dp[N-1][N-1] / (2N - 1)`.\n\n5. **Return the Result**: Return the calculated maximum average.\n\n## Pseudocode\n\n```\nfunction maxAverageOfPath(cost):\n    N = length of cost\n    create a 2D list dp of size N x N\n    dp[0][0] = cost[0][0]\n    \n    for i from 1 to N-1:\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    \n    for i from 1 to N-1:\n        for j from 1 to N-1:\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    \n    max_total_cost = dp[N-1][N-1]\n    max_average = max_total_cost / (2 * N - 1)\n    \n    return max_average\n```\n\n## Final Python Solution\n\n```python\ndef maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    \n    # Initialize the starting point\n    dp[0][0] = cost[0][0]\n    \n    # Fill the first row and first column\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    \n    # Fill the rest of the dp table\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    \n    # Calculate the maximum average\n    max_total_cost = dp[N-1][N-1]\n    max_average = max_total_cost / (2 * N - 1)\n    \n    return max_average\n```",
    "no_parent": true,
    "dependency_used": false
}