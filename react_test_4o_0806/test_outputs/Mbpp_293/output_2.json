{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert otherside_rightangle(7,8)==10.63014581273465\n\nTests failed:\nNone",
    "code": "\ndef otherside_rightangle(a: float, b: float) -> float:\n    # Calculate the hypotenuse if both sides are legs\n    if a**2 + b**2 > max(a, b)**2:\n        return (a**2 + b**2) ** 0.5\n    else:\n        # Calculate the missing leg if one side is the hypotenuse\n        return abs(a**2 - b**2) ** 0.5\n",
    "full_code": "\ndef otherside_rightangle(a: float, b: float) -> float:\n    # Calculate the hypotenuse if both sides are legs\n    if a**2 + b**2 > max(a, b)**2:\n        return (a**2 + b**2) ** 0.5\n    else:\n        # Calculate the missing leg if one side is the hypotenuse\n        return abs(a**2 - b**2) ** 0.5\n",
    "reward": true,
    "program_code": "\ndef otherside_rightangle(a: float, b: float) -> float:\n    # Calculate the hypotenuse if both sides are legs\n    if a**2 + b**2 > max(a, b)**2:\n        return (a**2 + b**2) ** 0.5\n    else:\n        # Calculate the missing leg if one side is the hypotenuse\n        return abs(a**2 - b**2) ** 0.5\n",
    "program_name": "otherside_rightangle",
    "dependencies": [],
    "raw_msg": "```python\ndef otherside_rightangle(a: float, b: float) -> float:\n    # Calculate the hypotenuse if both sides are legs\n    if a**2 + b**2 > max(a, b)**2:\n        return (a**2 + b**2) ** 0.5\n    else:\n        # Calculate the missing leg if one side is the hypotenuse\n        return abs(a**2 - b**2) ** 0.5\n```\n\nThis code correctly calculates the third side of a right-angled triangle by determining whether the given sides are both legs or if one is the hypotenuse, and then applying the appropriate formula.",
    "no_parent": true,
    "dependency_used": false
}