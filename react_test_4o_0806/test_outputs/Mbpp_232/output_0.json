{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\nTests failed:\nNone",
    "code": "\ndef larg_nnum(lst, n):\n    # Step 1: Sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n    \n    # Step 2: Take the first n elements from the sorted list\n    largest_n = sorted_lst[:n]\n    \n    # Step 3: Return the list of n largest elements\n    return largest_n\n",
    "full_code": "\ndef larg_nnum(lst, n):\n    # Step 1: Sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n    \n    # Step 2: Take the first n elements from the sorted list\n    largest_n = sorted_lst[:n]\n    \n    # Step 3: Return the list of n largest elements\n    return largest_n\n",
    "reward": true,
    "program_code": "\ndef larg_nnum(lst, n):\n    # Step 1: Sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n    \n    # Step 2: Take the first n elements from the sorted list\n    largest_n = sorted_lst[:n]\n    \n    # Step 3: Return the list of n largest elements\n    return largest_n\n",
    "program_name": "larg_nnum",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nWe need to write a function that takes a list of numbers and an integer `n`, and returns a new list containing the `n` largest numbers from the original list.\n\n## Conceptual Solution\n\n1. **Sort the List**: First, we will sort the list in descending order so that the largest numbers come first.\n2. **Select the Top `n` Elements**: After sorting, we can simply take the first `n` elements from this sorted list, as they will be the largest.\n3. **Return the Result**: Return the list of these `n` largest numbers.\n\n## Pseudocode\n\n1. Define a function `larg_nnum` that takes a list `lst` and an integer `n`.\n2. Sort `lst` in descending order.\n3. Slice the first `n` elements from the sorted list.\n4. Return the sliced list.\n\n## Final Python Solution\n\n```python\ndef larg_nnum(lst, n):\n    # Step 1: Sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n    \n    # Step 2: Take the first n elements from the sorted list\n    largest_n = sorted_lst[:n]\n    \n    # Step 3: Return the list of n largest elements\n    return largest_n\n```",
    "no_parent": true,
    "dependency_used": false
}