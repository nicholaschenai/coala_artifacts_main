[
    {
        "role": "system",
        "content": "\nYou are an expert programmer tasked with solving the problem below.\n\nFollow the user's instructions to solve the problem.\nThe user can ask for analysis, code, or both.\n\n## Instructions\nWhen asked to output code,\n- Make sure to wrap your code in '```python' and '```' Markdown delimiters, \n- include exactly one block of code with the entire solution\n- No outside libraries are allowed. \n- Builtins are allowed.\n- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).\n- DO NOT write any assert statements / tests.\n\n## Problem\n[BEGIN PROBLEM]\nWrite a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.\n\"\"\"\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\n[END PROBLEM]\n"
    },
    {
        "role": "user",
        "content": "\n## Instructions\n\nReason through the problem and:\n1. Restate the problem in plain English\n2. Conceptualize a solution first in plain English\n3. Write a pseudocode solution\n4. Output the final Python 3 solution with your solution steps in comments.\n\nMake sure to wrap your code in '```python' and '```' Markdown delimiters, \nand include exactly one block of code with the entire solution.\n\nNo outside libraries are allowed.\nBuiltins are allowed.\n"
    },
    {
        "role": "assistant",
        "content": "\n## Problem Restatement\n\nWe need to determine if a given element is the majority element in a sorted array. The majority element is defined as an element that appears more than half the time in the array. The function should return `True` if the element is the majority element, and `False` otherwise.\n\n## Conceptual Solution\n\n1. **Identify the Majority Element Condition**: For an element to be the majority, it must appear more than `n/2` times in the array, where `n` is the length of the array.\n\n2. **Utilize the Sorted Property**: Since the array is sorted, if an element is the majority, it will appear consecutively in the array. This allows us to efficiently check for the majority element.\n\n3. **Binary Search for First Occurrence**: Use binary search to find the first occurrence of the element in the array.\n\n4. **Check the Count**: Once the first occurrence is found, check if the element appears more than `n/2` times by comparing the index of the first occurrence and the index `first_occurrence + n/2`.\n\n## Pseudocode\n\n1. Define a helper function `binary_search_first_occurrence` to find the first occurrence of the element using binary search.\n2. In the main function `is_majority`, use the helper function to find the first occurrence of the element.\n3. If the element is not found, return `False`.\n4. Check if the element at the index `first_occurrence + n/2` is the same as the element.\n5. Return `True` if it is the same, otherwise return `False`.\n\n## Final Python Solution\n\n```python\ndef binary_search_first_occurrence(arr, n, element):\n    left, right = 0, n - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == element:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < element:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n\ndef is_majority(arr, n, element):\n    # Find the first occurrence of the element\n    first_occurrence = binary_search_first_occurrence(arr, n, element)\n    \n    # If the element is not found, it cannot be the majority\n    if first_occurrence == -1:\n        return False\n    \n    # Check if the element appears more than n/2 times\n    if first_occurrence + n // 2 < n and arr[first_occurrence + n // 2] == element:\n        return True\n    else:\n        return False\n```\n\nThis solution efficiently checks if the given element is the majority element by leveraging the sorted property of the array and using binary search to find the first occurrence of the element."
    },
    {
        "role": "user",
        "content": "\n[Environment Feedback]:\n    Note: Tests are automatically generated and can be wrong.\n\n    Tests passed:\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\n    Tests failed:\n    None\n[/Environment Feedback]\n"
    }
]