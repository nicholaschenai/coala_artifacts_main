[
    {
        "role": "system",
        "content": "\nYou are an expert programmer tasked with solving the problem below.\n\nFollow the user's instructions to solve the problem.\nThe user can ask for analysis, code, or both.\n\n## Instructions\nWhen asked to output code,\n- Make sure to wrap your code in '```python' and '```' Markdown delimiters, \n- include exactly one block of code with the entire solution\n- No outside libraries are allowed. \n- Builtins are allowed.\n- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).\n- DO NOT write any assert statements / tests.\n\n## Problem\n[BEGIN PROBLEM]\nWrite a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.\n\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\n[END PROBLEM]\n"
    },
    {
        "role": "user",
        "content": "\n## Instructions\n\nReason through the problem and:\n1. Restate the problem in plain English\n2. Conceptualize a solution first in plain English\n3. Write a pseudocode solution\n4. Output the final Python 3 solution with your solution steps in comments.\n\nMake sure to wrap your code in '```python' and '```' Markdown delimiters, \nand include exactly one block of code with the entire solution.\n\nNo outside libraries are allowed.\nBuiltins are allowed.\n"
    },
    {
        "role": "assistant",
        "content": "### Problem Restatement\n\n1. **Restate the problem in plain English:**\n   - We need to find the largest products that can be formed by multiplying one number from each of two given lists. The function should return a specified number of these largest products in descending order.\n\n### Conceptual Solution\n\n2. **Conceptualize a solution in plain English:**\n   - First, we need to generate all possible products by multiplying each element from the first list with each element from the second list.\n   - Then, we sort these products in descending order.\n   - Finally, we select the top 'n' products from this sorted list, where 'n' is the specified number of largest products we need to return.\n\n### Pseudocode\n\n3. **Write a pseudocode solution:**\n   - Initialize an empty list to store the products.\n   - For each element in the first list:\n     - For each element in the second list:\n       - Calculate the product of the two elements.\n       - Append the product to the list of products.\n   - Sort the list of products in descending order.\n   - Return the first 'n' elements from the sorted list.\n\n### Final Python Solution\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef large_product(list1, list2, n):\n    # Initialize an empty list to store the products\n    products = []\n    \n    # Generate all possible products\n    for num1 in list1:\n        for num2 in list2:\n            # Calculate the product and append to the list\n            products.append(num1 * num2)\n    \n    # Sort the products in descending order\n    products.sort(reverse=True)\n    \n    # Return the first 'n' elements from the sorted list\n    return products[:n]\n```\n\nThis solution efficiently calculates all possible products, sorts them, and retrieves the largest 'n' products as required."
    },
    {
        "role": "user",
        "content": "\n[Environment Feedback]:\n    Note: Tests are automatically generated and can be wrong.\n\n    Tests passed:\n    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\n    Tests failed:\n    None\n[/Environment Feedback]\n"
    }
]