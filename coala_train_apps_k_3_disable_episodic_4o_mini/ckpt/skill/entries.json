{
    "count_col_triang": {
        "code": "\ndef count_col_triang(points):\n    from collections import defaultdict\n    from itertools import combinations\n\n    # Step 1: Organize points by color\n    color_points = defaultdict(list)\n    for point in points:\n        color_points[point[1]].append(point[0])\n\n    # Step 2: Initialize variables for results\n    total_points = len(points)\n    unique_colors = len(color_points)\n    total_triangles = 0\n    triangle_counts = {}\n\n    # Step 3: Calculate triangles for each color\n    for color, pts in color_points.items():\n        num_points = len(pts)\n        if num_points >= 3:\n            # Calculate the number of combinations of 3 points\n            triangles = 0\n            for comb in combinations(pts, 3):\n                # Check for collinearity using the determinant method\n                x1, y1 = comb[0]\n                x2, y2 = comb[1]\n                x3, y3 = comb[2]\n                if (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) != 0:\n                    triangles += 1\n            triangle_counts[color] = triangles\n            total_triangles += triangles\n\n    # Step 4: Determine the maximum triangle count and colors\n    max_triangles = 0\n    max_colors = []\n    for color, count in triangle_counts.items():\n        if count > max_triangles:\n            max_triangles = count\n            max_colors = [color]\n        elif count == max_triangles:\n            max_colors.append(color)\n\n    # Step 5: Prepare the final output\n    if total_triangles == 0:\n        return [total_points, unique_colors, total_triangles, []]\n    \n    max_color_count = triangle_counts[max_colors[0]] if max_colors else 0\n    return [total_points, unique_colors, total_triangles, [*sorted(max_colors), max_color_count]]\n\n",
        "dependencies": [],
        "task": "```if:java\n___Note for Java users:___ Due to type checking in Java, inputs and outputs are formated quite differently in this language. See the footnotes of the description.\n\n\n```\n\nYou have the following lattice points with their corresponding coordinates and each one with an specific colour.\n\n ```\nPoint   [x ,  y]     Colour\n----------------------------\n  A     [ 3,  4]     Blue\n  B     [-7, -1]     Red\n  C     [ 7, -6]     Yellow\n  D     [ 2,  5]     Yellow\n  E     [ 1, -5]     Red\n  F     [-1,  4]     Red\n  G     [ 1,  7]     Red\n  H     [-3,  5]     Red\n  I     [-3, -5]     Blue\n  J     [ 4,  1]     Blue\n```\nWe want to count the triangles that have the three vertices with the same colour. The following picture shows the distribution of the points in the plane with the required triangles.\n\n![source: imgur.com](http://i.imgur.com/sP0l1i1.png)\n\nThe input that we will have for the field of lattice points described above is:\n\n```\n[[[3, -4], \"blue\"],  [[-7, -1], \"red\"], [[7, -6], \"yellow\"], [[2, 5], \"yellow\"],\n [[1, -5], \"red\"],   [[-1, 4], \"red\"],  [[1, 7], \"red\"],     [[-3, 5], \"red\"], \n [[-3, -5], \"blue\"], [[4, 1], \"blue\"] ]\n```\nWe see the following result from it:\n\n```\nColour   Amount of Triangles       Triangles\nYellow         0                    -------\nBlue           1                      AIJ\nRed            10                   BEF,BEG,BEH,BFG,BFH,BGH,EFG,EFH,EHG,FGH\n```\nAs we have 5 different points in red and each combination of 3 points that are not aligned.\n\nWe need a code that may give us the following information in order:\n\n```\n1) Total given points\n2) Total number of colours\n3) Total number of possible triangles\n4) and 5) The colour (or colours, sorted alphabetically) with the highest amount of triangles\n```\n\nIn Python our function will work like:\n\n```\n[10, 3, 11, [\"red\",10]]) == count_col_triang([[[3, -4], \"blue\"],  [[-7, -1], \"red\"], [[7, -6], \"yellow\"], [[2, 5], \"yellow\"], \n                                              [[1, -5], \"red\"],   [[-1, 4], \"red\"],  [[1, 7], \"red\"],     [[-3, 5], \"red\"],\n                                              [[-3, -5], \"blue\"], [[4, 1], \"blue\"] ])\n```\nIn the following case we have some points that are aligned and we have less triangles that can be formed:\n\n```\n[10, 3, 7, [\"red\", 6]] == count_col_triang([[[3, -4], \"blue\"],  [[-7, -1], \"red\"], [[7, -6], \"yellow\"], [[2, 5], \"yellow\"],\n                                            [[1, -5], \"red\"],   [[1, 1], \"red\"],   [[1, 7], \"red\"],     [[1, 4], \"red\"], \n                                            [[-3, -5], \"blue\"], [[4, 1], \"blue\"] ])\n```\nJust to see the change with the previous case we have this:\n\n![source: imgur.com](http://i.imgur.com/cCgO7ql.png)\n\nIn the special case that the list of points does not generate an even single triangle, the output will be like this case:\n\n```\n[9, 3, 0, []] == count_col_triang([[[1, -2], \"red\"], [[7, -6], \"yellow\"], [[2, 5], \"yellow\"], [[1, -5], \"red\"],\n                                  [[1, 1], \"red\"],   [[1, 7], \"red\"],     [[1, 4], \"red\"],    [[-3, -5], \"blue\"], \n                                  [[4, 1], \"blue\"] ])\n```\nIt will be this case:\n\n![source: imgur.com](http://i.imgur.com/VB7t7Ij.png)\n\nIf in the result we have two or more colours with the same maximum amount of triangles, the last list should be like (e.g)\n\n```\n[35, 6, 35, [\"blue\", \"red\", \"yellow\", 23]]     # having the names of the colours sorted alphabetically\n```\nFor the condition of three algined points A, B, C, you should know that the the following determinant should be 0.\n\n```\n | xA    yA    1|\n | xB    yB    1|    = 0\n | xC    yC    1|\n\n```\nAssumptions:\n\n- In the list you have unique points, so a point can have only one colour.\n\n- All the inputs are valid\n\nEnjoy it!\n\n````if:java\n---\n\n___For java users:___\n\nTwo immutable objects, `ColouredPoint` and `TriangleResult`, have been designed for you in the preloaded part. You will receive inputs as lists of ColouredPoint objects and will return a TriangleResult object. For the last one, you may note the organization of the arguments of the constructor which differs a bit from the description above.\n\nYou may find below the signatures of the available methods of these objects:\n\n````",
        "description": "\n[description for function: count_col_triang]\nThis function calculates the number of non-collinear triangles that can be formed from a set of points, categorized by their colors. It first organizes the points by color and then counts the triangles for each color by checking combinations of three points for collinearity. The function keeps track of the total number of triangles and identifies the color(s) with the maximum triangle count. Finally, it returns a summary that includes the total number of points, the number of unique colors, the total number of triangles, and a list of the color(s) with the maximum triangle count along with their respective counts. If no triangles can be formed, it returns a specific output indicating this. The function effectively combines geometric calculations with data organization to provide insights into the distribution of colored points.\n\n[end of description]\nThis knowledge is useful in scenarios where one needs to analyze geometric properties of points in a plane, particularly in computational geometry, game development, or graphics programming. It can help in determining the relationships between points based on their colors, which can be applied in clustering algorithms, visual data representation, or even in solving problems related to triangulation in various fields such as computer graphics, robotics, and geographic information systems (GIS). Understanding how to count and categorize triangles formed by points can also be beneficial in mathematical modeling and simulations."
    }
}