{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['5', '1 5 31', '4', '1 10 3', '23', '2 5 7', '20 36', '2 5 10', '19 2', '3 3 300', '1 1 1'] Output: 0\n2\n7\n4\n1\n\nTests failed:\nNone",
    "code": "\ndef max_contests(T, test_cases):\n    # Iterate through each test case\n    for case in test_cases:\n        # Read N (number of setters), K (problems needed for one contest), D (days available)\n        N, K, D = case[0], case[1], case[2]\n        # Read the list of problems created by each setter\n        A = case[3]\n        \n        # Calculate the total number of problems created\n        total_problems = sum(A)\n        \n        # Calculate how many contests can be formed\n        contests_possible = total_problems // K\n        \n        # The maximum contests Chef can host is the minimum of contests possible and days available\n        max_contests = min(contests_possible, D)\n        \n        # Print the result for the current test case\n        print(max_contests)\n\n# Read the number of test cases\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    # Read N, K, D\n    N, K, D = map(int, input().split())\n    # Read the list of problems created by each setter\n    A = list(map(int, input().split()))\n    # Append the test case to the list\n    test_cases.append((N, K, D, A))\n\n# Call the function to process the test cases\nmax_contests(T, test_cases)\n",
    "full_code": "\ndef max_contests(T, test_cases):\n    # Iterate through each test case\n    for case in test_cases:\n        # Read N (number of setters), K (problems needed for one contest), D (days available)\n        N, K, D = case[0], case[1], case[2]\n        # Read the list of problems created by each setter\n        A = case[3]\n        \n        # Calculate the total number of problems created\n        total_problems = sum(A)\n        \n        # Calculate how many contests can be formed\n        contests_possible = total_problems // K\n        \n        # The maximum contests Chef can host is the minimum of contests possible and days available\n        max_contests = min(contests_possible, D)\n        \n        # Print the result for the current test case\n        print(max_contests)\n\n# Read the number of test cases\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    # Read N, K, D\n    N, K, D = map(int, input().split())\n    # Read the list of problems created by each setter\n    A = list(map(int, input().split()))\n    # Append the test case to the list\n    test_cases.append((N, K, D, A))\n\n# Call the function to process the test cases\nmax_contests(T, test_cases)\n",
    "reward": true,
    "program_code": "\ndef max_contests(T, test_cases):\n    # Iterate through each test case\n    for case in test_cases:\n        # Read N (number of setters), K (problems needed for one contest), D (days available)\n        N, K, D = case[0], case[1], case[2]\n        # Read the list of problems created by each setter\n        A = case[3]\n        \n        # Calculate the total number of problems created\n        total_problems = sum(A)\n        \n        # Calculate how many contests can be formed\n        contests_possible = total_problems // K\n        \n        # The maximum contests Chef can host is the minimum of contests possible and days available\n        max_contests = min(contests_possible, D)\n        \n        # Print the result for the current test case\n        print(max_contests)\n\n# Read the number of test cases\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    # Read N, K, D\n    N, K, D = map(int, input().split())\n    # Read the list of problems created by each setter\n    A = list(map(int, input().split()))\n    # Append the test case to the list\n    test_cases.append((N, K, D, A))\n\n# Call the function to process the test cases\nmax_contests(T, test_cases)\n",
    "program_name": "max_contests",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**:\n   Chef wants to organize Division-3 contests using problems created by several setters. Each setter has created a certain number of problems, and Chef needs a specific number of problems to host a contest. He wants to know how many contests he can host over a given number of days, considering he can only host one contest per day.\n\n2. **Conceptualize a solution first in plain English**:\n   To determine the maximum number of contests Chef can host:\n   - First, calculate the total number of problems created by all setters.\n   - Then, find out how many complete contests can be formed from these problems by dividing the total number of problems by the number of problems required for one contest.\n   - Finally, the maximum number of contests Chef can host is the minimum of the number of contests that can be formed and the number of days available.\n\n3. **Write a pseudocode solution**:\n   ```\n   function max_contests(T, test_cases):\n       for each test_case in test_cases:\n           read N, K, D\n           read A (list of problems created by each setter)\n           total_problems = sum(A)\n           contests_possible = total_problems // K\n           max_contests = min(contests_possible, D)\n           print(max_contests\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef max_contests(T, test_cases):\n    # Iterate through each test case\n    for case in test_cases:\n        # Read N (number of setters), K (problems needed for one contest), D (days available)\n        N, K, D = case[0], case[1], case[2]\n        # Read the list of problems created by each setter\n        A = case[3]\n        \n        # Calculate the total number of problems created\n        total_problems = sum(A)\n        \n        # Calculate how many contests can be formed\n        contests_possible = total_problems // K\n        \n        # The maximum contests Chef can host is the minimum of contests possible and days available\n        max_contests = min(contests_possible, D)\n        \n        # Print the result for the current test case\n        print(max_contests)\n\n# Read the number of test cases\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    # Read N, K, D\n    N, K, D = map(int, input().split())\n    # Read the list of problems created by each setter\n    A = list(map(int, input().split()))\n    # Append the test case to the list\n    test_cases.append((N, K, D, A))\n\n# Call the function to process the test cases\nmax_contests(T, test_cases)\n```",
    "no_parent": false,
    "dependency_used": false
}