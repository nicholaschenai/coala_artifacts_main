{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n\nTests failed:\nNone",
    "code": "\ndef max_of_nth(matrix, n):\n    # Check if the matrix is empty or if n is not a valid column index\n    if not matrix or n < 0 or n >= len(matrix[0]):\n        return None\n    \n    # Initialize max_value to a very small number\n    max_value = float('-inf')\n    \n    # Iterate over each row in the matrix\n    for row in matrix:\n        # Check if n is a valid index in the current row\n        if n < len(row):\n            # Get the value at the n-th column\n            value = row[n]\n            # Update max_value if the current value is greater\n            if value > max_value:\n                max_value = value\n    \n    # Return the maximum value found in the n-th column\n    return max_value\n",
    "full_code": "\ndef max_of_nth(matrix, n):\n    # Check if the matrix is empty or if n is not a valid column index\n    if not matrix or n < 0 or n >= len(matrix[0]):\n        return None\n    \n    # Initialize max_value to a very small number\n    max_value = float('-inf')\n    \n    # Iterate over each row in the matrix\n    for row in matrix:\n        # Check if n is a valid index in the current row\n        if n < len(row):\n            # Get the value at the n-th column\n            value = row[n]\n            # Update max_value if the current value is greater\n            if value > max_value:\n                max_value = value\n    \n    # Return the maximum value found in the n-th column\n    return max_value\n",
    "reward": true,
    "program_code": "\ndef max_of_nth(matrix, n):\n    # Check if the matrix is empty or if n is not a valid column index\n    if not matrix or n < 0 or n >= len(matrix[0]):\n        return None\n    \n    # Initialize max_value to a very small number\n    max_value = float('-inf')\n    \n    # Iterate over each row in the matrix\n    for row in matrix:\n        # Check if n is a valid index in the current row\n        if n < len(row):\n            # Get the value at the n-th column\n            value = row[n]\n            # Update max_value if the current value is greater\n            if value > max_value:\n                max_value = value\n    \n    # Return the maximum value found in the n-th column\n    return max_value\n",
    "program_name": "max_of_nth",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to write a function that takes a matrix (a list of lists) and an integer `n`, and returns the maximum value found in the `n`-th column of the matrix.\n\n2. **Conceptualize a solution in plain English:**\n\n   - First, we need to ensure that the `n`-th column exists in the matrix. This means checking that `n` is a valid index for the columns.\n   - Then, we will iterate over each row of the matrix and extract the element at the `n`-th column.\n   - We will keep track of the maximum value found in this column as we iterate through the rows.\n   - Finally, we will return the maximum value found.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   function max_of_nth(matrix, n):\n       if matrix is empty or n is not a valid column index:\n           return None\n       \n       max_value = negative infinity\n       \n       for each row in matrix:\n           if n is a valid index in row:\n               value = row[n]\n               if value > max_value:\n                   max_value = value\n       \n       return max_value\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef max_of_nth(matrix, n):\n    # Check if the matrix is empty or if n is not a valid column index\n    if not matrix or n < 0 or n >= len(matrix[0]):\n        return None\n    \n    # Initialize max_value to a very small number\n    max_value = float('-inf')\n    \n    # Iterate over each row in the matrix\n    for row in matrix:\n        # Check if n is a valid index in the current row\n        if n < len(row):\n            # Get the value at the n-th column\n            value = row[n]\n            # Update max_value if the current value is greater\n            if value > max_value:\n                max_value = value\n    \n    # Return the maximum value found in the n-th column\n    return max_value\n```\n\nThis solution iterates over each row of the matrix, checks if the `n`-th column exists, and updates the maximum value found in that column. It handles edge cases such as an empty matrix or an invalid column index.",
    "no_parent": true,
    "dependency_used": false
}