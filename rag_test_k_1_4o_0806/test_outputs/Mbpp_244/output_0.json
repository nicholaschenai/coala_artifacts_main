{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert next_Perfect_Square(35) == 36\n\nTests failed:\nNone",
    "code": "\ndef next_Perfect_Square(n: int) -> int:\n    # Calculate the integer square root of n\n    root = int(n**0.5)\n    # Increment the root to get the next integer\n    next_root = root + 1\n    # Return the square of the next integer\n    return next_root * next_root\n",
    "full_code": "\ndef next_Perfect_Square(n: int) -> int:\n    # Calculate the integer square root of n\n    root = int(n**0.5)\n    # Increment the root to get the next integer\n    next_root = root + 1\n    # Return the square of the next integer\n    return next_root * next_root\n",
    "reward": true,
    "program_code": "\ndef next_Perfect_Square(n: int) -> int:\n    # Calculate the integer square root of n\n    root = int(n**0.5)\n    # Increment the root to get the next integer\n    next_root = root + 1\n    # Return the square of the next integer\n    return next_root * next_root\n",
    "program_name": "next_Perfect_Square",
    "dependencies": [],
    "raw_msg": "### 1. Restate the problem in plain English\n\nWe need to find the smallest perfect square that is greater than a given integer. A perfect square is a number that can be expressed as the square of an integer.\n\n### 2. Conceptualize a solution in plain English\n\n1. Calculate the integer square root of the given number. This will give us the largest integer whose square is less than or equal to the given number.\n2. Increment this integer by 1 to find the next integer.\n3. Square this incremented integer to get the next perfect square that is greater than the given number.\n\n### 3. Write a pseudocode solution\n\n```\nfunction next_Perfect_Square(n):\n    calculate the integer square root of n and store it in variable root\n    increment root by 1\n    return the square of the incremented root\n```\n\n### 4. Output the final Python 3 solution with your solution steps in comments\n\n```python\ndef next_Perfect_Square(n: int) -> int:\n    # Calculate the integer square root of n\n    root = int(n**0.5)\n    # Increment the root to get the next integer\n    next_root = root + 1\n    # Return the square of the next integer\n    return next_root * next_root\n```",
    "no_parent": true,
    "dependency_used": false
}