{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert armstrong_number(153)==True\n\nTests failed:\nNone",
    "code": "\ndef armstrong_number(n: int) -> bool:\n    # Convert the number to a string to iterate over each digit\n    str_n = str(n)\n    # Determine the number of digits\n    num_digits = len(str_n)\n    # Initialize the sum of digits raised to the power of num_digits\n    armstrong_sum = 0\n    \n    # Calculate the sum of each digit raised to the power of num_digits\n    for digit in str_n:\n        armstrong_sum += int(digit) ** num_digits\n    \n    # Compare the calculated sum to the original number\n    return armstrong_sum == n\n",
    "full_code": "\ndef armstrong_number(n: int) -> bool:\n    # Convert the number to a string to iterate over each digit\n    str_n = str(n)\n    # Determine the number of digits\n    num_digits = len(str_n)\n    # Initialize the sum of digits raised to the power of num_digits\n    armstrong_sum = 0\n    \n    # Calculate the sum of each digit raised to the power of num_digits\n    for digit in str_n:\n        armstrong_sum += int(digit) ** num_digits\n    \n    # Compare the calculated sum to the original number\n    return armstrong_sum == n\n",
    "reward": true,
    "program_code": "\ndef armstrong_number(n: int) -> bool:\n    # Convert the number to a string to iterate over each digit\n    str_n = str(n)\n    # Determine the number of digits\n    num_digits = len(str_n)\n    # Initialize the sum of digits raised to the power of num_digits\n    armstrong_sum = 0\n    \n    # Calculate the sum of each digit raised to the power of num_digits\n    for digit in str_n:\n        armstrong_sum += int(digit) ** num_digits\n    \n    # Compare the calculated sum to the original number\n    return armstrong_sum == n\n",
    "program_name": "armstrong_number",
    "dependencies": [],
    "raw_msg": "### Problem Restatement\n\nWe need to determine if a given number is an Armstrong number. An Armstrong number (also known as a narcissistic number) is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n\n### Conceptual Solution\n\n1. **Identify the Number of Digits**: First, determine how many digits are in the number. This can be done by converting the number to a string and finding its length.\n2. **Calculate the Armstrong Sum**: For each digit in the number, raise it to the power of the total number of digits and sum these values.\n3. **Comparison**: Compare the calculated sum to the original number. If they are equal, the number is an Armstrong number.\n\n### Pseudocode\n\n1. Convert the number to a string to easily iterate over each digit.\n2. Determine the number of digits by finding the length of the string.\n3. Initialize a variable to store the sum of the digits raised to the power of the number of digits.\n4. For each digit in the string:\n   - Convert the digit back to an integer.\n   - Raise it to the power of the number of digits.\n   - Add the result to the sum.\n5. Compare the sum to the original number.\n6. Return `True` if they are equal, otherwise return `False`.\n\n### Final Python Solution\n\n```python\ndef armstrong_number(n: int) -> bool:\n    # Convert the number to a string to iterate over each digit\n    str_n = str(n)\n    # Determine the number of digits\n    num_digits = len(str_n)\n    # Initialize the sum of digits raised to the power of num_digits\n    armstrong_sum = 0\n    \n    # Calculate the sum of each digit raised to the power of num_digits\n    for digit in str_n:\n        armstrong_sum += int(digit) ** num_digits\n    \n    # Compare the calculated sum to the original number\n    return armstrong_sum == n\n```\n\nThis function will correctly determine if a given number is an Armstrong number by following the steps outlined above.",
    "no_parent": true,
    "dependency_used": false
}