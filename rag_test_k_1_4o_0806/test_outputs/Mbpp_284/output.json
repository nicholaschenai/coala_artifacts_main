{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\nTests failed:\nNone",
    "code": "\ndef check_element(lst, element):\n    # Iterate through each item in the list\n    for item in lst:\n        # If any item is not equal to the given element, return False\n        if item != element:\n            return False\n    # If all items are equal to the element, return True\n    return True\n",
    "full_code": "\ndef check_element(lst, element):\n    # Iterate through each item in the list\n    for item in lst:\n        # If any item is not equal to the given element, return False\n        if item != element:\n            return False\n    # If all items are equal to the element, return True\n    return True\n",
    "reward": true,
    "program_code": "\ndef check_element(lst, element):\n    # Iterate through each item in the list\n    for item in lst:\n        # If any item is not equal to the given element, return False\n        if item != element:\n            return False\n    # If all items are equal to the element, return True\n    return True\n",
    "program_name": "check_element",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to create a function that checks if every item in a given list is equal to a specified element. If all items in the list are equal to the element, the function should return `True`; otherwise, it should return `False`.\n\n2. **Conceptualize a solution in plain English:**\n\n   To solve this problem, we can iterate through each item in the list and compare it to the given element. If we find any item that is not equal to the element, we can immediately return `False`. If we finish checking all items and they are all equal to the element, we return `True`.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   function check_element(lst, element):\n       for each item in lst:\n           if item is not equal to element:\n               return False\n       return True\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef check_element(lst, element):\n    # Iterate through each item in the list\n    for item in lst:\n        # If any item is not equal to the given element, return False\n        if item != element:\n            return False\n    # If all items are equal to the element, return True\n    return True\n```",
    "no_parent": true,
    "dependency_used": false
}