{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert get_pairs_count([1,1,1,1],2) == 6\n\nTests failed:\nNone",
    "code": "\ndef get_pairs_count(numbers, target_sum):\n    # Dictionary to store the count of each number\n    num_count = {}\n    # Variable to store the number of pairs\n    pair_count = 0\n\n    # Iterate over each number in the list\n    for number in numbers:\n        # Calculate the complement that would sum with the current number to reach the target sum\n        complement = target_sum - number\n        \n        # If the complement is already in the dictionary, it means we can form pairs\n        if complement in num_count:\n            # Add the count of the complement to the pair count\n            pair_count += num_count[complement]\n        \n        # Update the dictionary with the current number\n        if number in num_count:\n            num_count[number] += 1\n        else:\n            num_count[number] = 1\n\n    # Return the total number of pairs\n    return pair_count\n",
    "full_code": "\ndef get_pairs_count(numbers, target_sum):\n    # Dictionary to store the count of each number\n    num_count = {}\n    # Variable to store the number of pairs\n    pair_count = 0\n\n    # Iterate over each number in the list\n    for number in numbers:\n        # Calculate the complement that would sum with the current number to reach the target sum\n        complement = target_sum - number\n        \n        # If the complement is already in the dictionary, it means we can form pairs\n        if complement in num_count:\n            # Add the count of the complement to the pair count\n            pair_count += num_count[complement]\n        \n        # Update the dictionary with the current number\n        if number in num_count:\n            num_count[number] += 1\n        else:\n            num_count[number] = 1\n\n    # Return the total number of pairs\n    return pair_count\n",
    "reward": true,
    "program_code": "\ndef get_pairs_count(numbers, target_sum):\n    # Dictionary to store the count of each number\n    num_count = {}\n    # Variable to store the number of pairs\n    pair_count = 0\n\n    # Iterate over each number in the list\n    for number in numbers:\n        # Calculate the complement that would sum with the current number to reach the target sum\n        complement = target_sum - number\n        \n        # If the complement is already in the dictionary, it means we can form pairs\n        if complement in num_count:\n            # Add the count of the complement to the pair count\n            pair_count += num_count[complement]\n        \n        # Update the dictionary with the current number\n        if number in num_count:\n            num_count[number] += 1\n        else:\n            num_count[number] = 1\n\n    # Return the total number of pairs\n    return pair_count\n",
    "program_name": "get_pairs_count",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to write a function that takes a list of numbers and a target sum as input. The function should return the number of pairs of numbers in the list that add up to the target sum. Each pair should be counted only once, and the order of numbers in the pair does not matter.\n\n2. **Conceptualize a solution in plain English:**\n\n   To solve this problem, we can use a dictionary to keep track of the numbers we have seen so far and how many times each number has appeared. As we iterate through the list, for each number, we calculate the complement that would sum with the current number to reach the target sum. We then check if this complement has been seen before. If it has, we add the count of the complement to our total pair count. After checking, we update the dictionary with the current number.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   Initialize a dictionary to keep track of numbers and their counts\n   Initialize a variable to count the number of pairs\n\n   For each number in the list:\n       Calculate the complement needed to reach the target sum\n       If the complement is in the dictionary:\n           Add the count of the complement to the pair count\n       Update the dictionary with the current number\n\n   Return the total pair count\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef get_pairs_count(numbers, target_sum):\n    # Dictionary to store the count of each number\n    num_count = {}\n    # Variable to store the number of pairs\n    pair_count = 0\n\n    # Iterate over each number in the list\n    for number in numbers:\n        # Calculate the complement that would sum with the current number to reach the target sum\n        complement = target_sum - number\n        \n        # If the complement is already in the dictionary, it means we can form pairs\n        if complement in num_count:\n            # Add the count of the complement to the pair count\n            pair_count += num_count[complement]\n        \n        # Update the dictionary with the current number\n        if number in num_count:\n            num_count[number] += 1\n        else:\n            num_count[number] = 1\n\n    # Return the total number of pairs\n    return pair_count\n```\n\nThis solution efficiently counts the number of pairs by using a dictionary to track the occurrences of each number, allowing us to find complements in constant time.",
    "no_parent": true,
    "dependency_used": false
}