{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\nTests failed:\nNone",
    "code": "\ndef heap_queue_largest(numbers, n):\n    # Sort the list of numbers in descending order\n    sorted_numbers = sorted(numbers, reverse=True)\n    # Select the first 'n' elements from the sorted list\n    largest_numbers = sorted_numbers[:n]\n    # Return the selected elements\n    return largest_numbers\n",
    "full_code": "\ndef heap_queue_largest(numbers, n):\n    # Sort the list of numbers in descending order\n    sorted_numbers = sorted(numbers, reverse=True)\n    # Select the first 'n' elements from the sorted list\n    largest_numbers = sorted_numbers[:n]\n    # Return the selected elements\n    return largest_numbers\n",
    "reward": true,
    "program_code": "\ndef heap_queue_largest(numbers, n):\n    # Sort the list of numbers in descending order\n    sorted_numbers = sorted(numbers, reverse=True)\n    # Select the first 'n' elements from the sorted list\n    largest_numbers = sorted_numbers[:n]\n    # Return the selected elements\n    return largest_numbers\n",
    "program_name": "heap_queue_largest",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to write a function that takes a list of numbers and an integer `n`, and returns the `n` largest numbers from the list in descending order.\n\n2. **Conceptualize a solution in plain English:**\n\n   To solve this problem, we can follow these steps:\n   - First, sort the list of numbers in descending order.\n   - Then, select the first `n` numbers from this sorted list, as they will be the largest.\n   - Return these `n` numbers as the result.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   function heap_queue_largest(numbers, n):\n       sort the list 'numbers' in descending order\n       select the first 'n' elements from the sorted list\n       return the selected elements\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef heap_queue_largest(numbers, n):\n    # Sort the list of numbers in descending order\n    sorted_numbers = sorted(numbers, reverse=True)\n    # Select the first 'n' elements from the sorted list\n    largest_numbers = sorted_numbers[:n]\n    # Return the selected elements\n    return largest_numbers\n```",
    "no_parent": true,
    "dependency_used": false
}