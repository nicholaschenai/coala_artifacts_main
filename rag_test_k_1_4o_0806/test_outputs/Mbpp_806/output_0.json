{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\nTests failed:\nNone",
    "code": "\ndef max_run_uppercase(s: str) -> int:\n    # Initialize the maximum run and current run counters\n    max_run = 0\n    current_run = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Increment the current run counter\n            current_run += 1\n        else:\n            # Update the maximum run if the current run is greater\n            if current_run > max_run:\n                max_run = current_run\n            # Reset the current run counter\n            current_run = 0\n    \n    # Final check in case the string ends with an uppercase sequence\n    if current_run > max_run:\n        max_run = current_run\n    \n    # Return the maximum run of uppercase letters\n    return max_run\n",
    "full_code": "\ndef max_run_uppercase(s: str) -> int:\n    # Initialize the maximum run and current run counters\n    max_run = 0\n    current_run = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Increment the current run counter\n            current_run += 1\n        else:\n            # Update the maximum run if the current run is greater\n            if current_run > max_run:\n                max_run = current_run\n            # Reset the current run counter\n            current_run = 0\n    \n    # Final check in case the string ends with an uppercase sequence\n    if current_run > max_run:\n        max_run = current_run\n    \n    # Return the maximum run of uppercase letters\n    return max_run\n",
    "reward": true,
    "program_code": "\ndef max_run_uppercase(s: str) -> int:\n    # Initialize the maximum run and current run counters\n    max_run = 0\n    current_run = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Increment the current run counter\n            current_run += 1\n        else:\n            # Update the maximum run if the current run is greater\n            if current_run > max_run:\n                max_run = current_run\n            # Reset the current run counter\n            current_run = 0\n    \n    # Final check in case the string ends with an uppercase sequence\n    if current_run > max_run:\n        max_run = current_run\n    \n    # Return the maximum run of uppercase letters\n    return max_run\n",
    "program_name": "max_run_uppercase",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to write a function that takes a string as input and returns the length of the longest consecutive sequence of uppercase letters in that string.\n\n2. **Conceptualize a solution in plain English:**\n\n   - Initialize a counter to keep track of the current run of uppercase letters and another to store the maximum run found.\n   - Iterate through each character in the string.\n   - If the character is uppercase, increment the current run counter.\n   - If the character is not uppercase, compare the current run counter with the maximum run counter and update the maximum if necessary, then reset the current run counter.\n   - After the loop, perform a final check to update the maximum run counter in case the string ends with an uppercase sequence.\n   - Return the maximum run counter.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   function max_run_uppercase(s):\n       max_run = 0\n       current_run = 0\n       \n       for each character in s:\n           if character is uppercase:\n               increment current_run\n           else:\n               if current_run > max_run:\n                   max_run = current_run\n               reset current_run to 0\n       \n       if current_run > max_run:\n           max_run = current_run\n       \n       return max_run\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef max_run_uppercase(s: str) -> int:\n    # Initialize the maximum run and current run counters\n    max_run = 0\n    current_run = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Increment the current run counter\n            current_run += 1\n        else:\n            # Update the maximum run if the current run is greater\n            if current_run > max_run:\n                max_run = current_run\n            # Reset the current run counter\n            current_run = 0\n    \n    # Final check in case the string ends with an uppercase sequence\n    if current_run > max_run:\n        max_run = current_run\n    \n    # Return the maximum run of uppercase letters\n    return max_run\n```",
    "no_parent": true,
    "dependency_used": false
}