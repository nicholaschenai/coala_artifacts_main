{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert sum_series(6) == 12\n\nTests failed:\nNone",
    "code": "\ndef sum_series(n: int) -> int:\n    # Initialize the total sum to 0\n    total_sum = 0\n    # Initialize the index i to 0\n    i = 0\n    # Loop until the term (n - 2*i) is greater than 0\n    while (n - 2 * i) > 0:\n        # Add the current term to the total sum\n        total_sum += (n - 2 * i)\n        # Increment the index i\n        i += 1\n    # Return the calculated total sum\n    return total_sum\n",
    "full_code": "\ndef sum_series(n: int) -> int:\n    # Initialize the total sum to 0\n    total_sum = 0\n    # Initialize the index i to 0\n    i = 0\n    # Loop until the term (n - 2*i) is greater than 0\n    while (n - 2 * i) > 0:\n        # Add the current term to the total sum\n        total_sum += (n - 2 * i)\n        # Increment the index i\n        i += 1\n    # Return the calculated total sum\n    return total_sum\n",
    "reward": true,
    "program_code": "\ndef sum_series(n: int) -> int:\n    # Initialize the total sum to 0\n    total_sum = 0\n    # Initialize the index i to 0\n    i = 0\n    # Loop until the term (n - 2*i) is greater than 0\n    while (n - 2 * i) > 0:\n        # Add the current term to the total sum\n        total_sum += (n - 2 * i)\n        # Increment the index i\n        i += 1\n    # Return the calculated total sum\n    return total_sum\n",
    "program_name": "sum_series",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to write a function that calculates the sum of a series starting from a given integer `n` and decreasing by 2 each time, until the result is less than or equal to zero. The series is: `n + (n-2) + (n-4) + ...` until the term is non-positive.\n\n2. **Conceptualize a solution in plain English:**\n\n   To solve this problem, we can iterate over the series starting from `n` and decrementing by 2 each time. We will continue this process until the current term is less than or equal to zero. During each iteration, we will add the current term to a running total. Finally, we will return the total sum.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   Initialize total_sum to 0\n   Initialize i to 0\n   While (n - 2*i) > 0:\n       Add (n - 2*i) to total_sum\n       Increment i by 1\n   Return total_sum\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef sum_series(n: int) -> int:\n    # Initialize the total sum to 0\n    total_sum = 0\n    # Initialize the index i to 0\n    i = 0\n    # Loop until the term (n - 2*i) is greater than 0\n    while (n - 2 * i) > 0:\n        # Add the current term to the total sum\n        total_sum += (n - 2 * i)\n        # Increment the index i\n        i += 1\n    # Return the calculated total sum\n    return total_sum\n```\n\nThis function will correctly compute the sum of the series as described in the problem statement.",
    "no_parent": true,
    "dependency_used": false
}