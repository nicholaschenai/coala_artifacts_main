{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\nTests failed:\nNone",
    "code": "\ndef extract_string(string_list, size):\n    # Initialize an empty list to store strings of the specified size\n    result = []\n    # Iterate over each string in the input list\n    for string in string_list:\n        # Check if the length of the current string matches the specified size\n        if len(string) == size:\n            # If it matches, add the string to the result list\n            result.append(string)\n    # Return the list of strings that have the specified length\n    return result\n",
    "full_code": "\ndef extract_string(string_list, size):\n    # Initialize an empty list to store strings of the specified size\n    result = []\n    # Iterate over each string in the input list\n    for string in string_list:\n        # Check if the length of the current string matches the specified size\n        if len(string) == size:\n            # If it matches, add the string to the result list\n            result.append(string)\n    # Return the list of strings that have the specified length\n    return result\n",
    "reward": true,
    "program_code": "\ndef extract_string(string_list, size):\n    # Initialize an empty list to store strings of the specified size\n    result = []\n    # Iterate over each string in the input list\n    for string in string_list:\n        # Check if the length of the current string matches the specified size\n        if len(string) == size:\n            # If it matches, add the string to the result list\n            result.append(string)\n    # Return the list of strings that have the specified length\n    return result\n",
    "program_name": "extract_string",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to create a function that takes a list of strings and an integer as input. The function should return a new list containing only the strings from the original list that have a length equal to the given integer.\n\n2. **Conceptualize a solution in plain English:**\n\n   - We will iterate over each string in the input list.\n   - For each string, we will check if its length matches the specified integer.\n   - If the length matches, we will add the string to a new list.\n   - Finally, we will return this new list containing all the strings of the specified length.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   Define function extract_string with parameters (string_list, size)\n       Initialize an empty list called result\n       For each string in string_list\n           If the length of the string is equal to size\n               Append the string to result\n       Return result\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef extract_string(string_list, size):\n    # Initialize an empty list to store strings of the specified size\n    result = []\n    # Iterate over each string in the input list\n    for string in string_list:\n        # Check if the length of the current string matches the specified size\n        if len(string) == size:\n            # If it matches, add the string to the result list\n            result.append(string)\n    # Return the list of strings that have the specified length\n    return result\n```",
    "no_parent": true,
    "dependency_used": false
}