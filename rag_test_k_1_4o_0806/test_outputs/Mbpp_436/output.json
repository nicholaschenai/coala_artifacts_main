{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\nTests failed:\nNone",
    "code": "\ndef neg_nos(numbers):\n    # Initialize an empty list to store negative numbers\n    negative_numbers = []\n    \n    # Iterate over each number in the input list\n    for number in numbers:\n        # Check if the number is negative\n        if number < 0:\n            # If it is negative, append it to the negative_numbers list\n            negative_numbers.append(number)\n    \n    # Return the list of negative numbers\n    return negative_numbers\n",
    "full_code": "\ndef neg_nos(numbers):\n    # Initialize an empty list to store negative numbers\n    negative_numbers = []\n    \n    # Iterate over each number in the input list\n    for number in numbers:\n        # Check if the number is negative\n        if number < 0:\n            # If it is negative, append it to the negative_numbers list\n            negative_numbers.append(number)\n    \n    # Return the list of negative numbers\n    return negative_numbers\n",
    "reward": true,
    "program_code": "\ndef neg_nos(numbers):\n    # Initialize an empty list to store negative numbers\n    negative_numbers = []\n    \n    # Iterate over each number in the input list\n    for number in numbers:\n        # Check if the number is negative\n        if number < 0:\n            # If it is negative, append it to the negative_numbers list\n            negative_numbers.append(number)\n    \n    # Return the list of negative numbers\n    return negative_numbers\n",
    "program_name": "neg_nos",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to create a function that takes a list of numbers and returns a new list containing only the negative numbers from the original list.\n\n2. **Conceptualize a solution in plain English:**\n\n   To solve this problem, we will iterate through each number in the input list. For each number, we will check if it is negative. If it is, we will add it to a new list. Once we have checked all the numbers, we will return the new list containing only the negative numbers.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   Define a function named neg_nos that takes a list of integers as input.\n   Initialize an empty list called negative_numbers.\n   For each number in the input list:\n       If the number is less than zero:\n           Append the number to the negative_numbers list.\n   Return the negative_numbers list.\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef neg_nos(numbers):\n    # Initialize an empty list to store negative numbers\n    negative_numbers = []\n    \n    # Iterate over each number in the input list\n    for number in numbers:\n        # Check if the number is negative\n        if number < 0:\n            # If it is negative, append it to the negative_numbers list\n            negative_numbers.append(number)\n    \n    # Return the list of negative numbers\n    return negative_numbers\n```",
    "no_parent": true,
    "dependency_used": false
}