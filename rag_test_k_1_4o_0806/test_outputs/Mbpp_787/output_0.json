{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert not text_match_three(\"ac\")\n\nTests failed:\nNone",
    "code": "\ndef text_match_three(text: str) -> bool:\n    # Iterate through the string, stopping 4 characters before the end\n    for i in range(len(text) - 3):\n        # Check if the current character is 'a'\n        if text[i] == 'a':\n            # Check if the next three characters are 'b'\n            if text[i+1:i+4] == 'bbb':\n                return True\n    # If no match is found, return False\n    return False\n",
    "full_code": "\ndef text_match_three(text: str) -> bool:\n    # Iterate through the string, stopping 4 characters before the end\n    for i in range(len(text) - 3):\n        # Check if the current character is 'a'\n        if text[i] == 'a':\n            # Check if the next three characters are 'b'\n            if text[i+1:i+4] == 'bbb':\n                return True\n    # If no match is found, return False\n    return False\n",
    "reward": true,
    "program_code": "\ndef text_match_three(text: str) -> bool:\n    # Iterate through the string, stopping 4 characters before the end\n    for i in range(len(text) - 3):\n        # Check if the current character is 'a'\n        if text[i] == 'a':\n            # Check if the next three characters are 'b'\n            if text[i+1:i+4] == 'bbb':\n                return True\n    # If no match is found, return False\n    return False\n",
    "program_name": "text_match_three",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n   We need to create a function that checks if a given string contains the letter 'a' followed immediately by exactly three 'b's. If the string contains this pattern, the function should return `True`; otherwise, it should return `False`.\n\n2. **Conceptualize a solution in plain English:**\n   To solve this problem, we can iterate through the string and check each character. If we find an 'a', we then check the next three characters to see if they are all 'b'. If they are, we return `True`. If we reach the end of the string without finding this pattern, we return `False`.\n\n3. **Write a pseudocode solution:**\n   ```\n   Define function text_match_three with parameter text\n       For each index i from 0 to length of text - 4\n           If the character at index i is 'a'\n               If the next three characters are 'b'\n                   Return True\n       Return False\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef text_match_three(text: str) -> bool:\n    # Iterate through the string, stopping 4 characters before the end\n    for i in range(len(text) - 3):\n        # Check if the current character is 'a'\n        if text[i] == 'a':\n            # Check if the next three characters are 'b'\n            if text[i+1:i+4] == 'bbb':\n                return True\n    # If no match is found, return False\n    return False\n```",
    "no_parent": true,
    "dependency_used": false
}