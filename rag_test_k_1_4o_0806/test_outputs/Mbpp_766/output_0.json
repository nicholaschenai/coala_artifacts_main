{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\nTests failed:\nNone",
    "code": "\ndef pair_wise(lst):\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through the list from the first element to the second-to-last element\n    for i in range(len(lst) - 1):\n        # Create a tuple with the current element and the next element\n        pair = (lst[i], lst[i + 1])\n        # Append the tuple to the result list\n        result.append(pair)\n    # Return the result list\n    return result\n",
    "full_code": "\ndef pair_wise(lst):\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through the list from the first element to the second-to-last element\n    for i in range(len(lst) - 1):\n        # Create a tuple with the current element and the next element\n        pair = (lst[i], lst[i + 1])\n        # Append the tuple to the result list\n        result.append(pair)\n    # Return the result list\n    return result\n",
    "reward": true,
    "program_code": "\ndef pair_wise(lst):\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through the list from the first element to the second-to-last element\n    for i in range(len(lst) - 1):\n        # Create a tuple with the current element and the next element\n        pair = (lst[i], lst[i + 1])\n        # Append the tuple to the result list\n        result.append(pair)\n    # Return the result list\n    return result\n",
    "program_name": "pair_wise",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to create a function that takes a list of items and returns a list of tuples. Each tuple should contain a pair of consecutive items from the input list.\n\n2. **Conceptualize a solution in plain English:**\n\n   To solve this problem, we can iterate through the input list and for each item (except the last one), create a tuple with the current item and the next item. We will collect all these tuples in a new list and return it.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   Define a function named pair_wise that takes a list as input.\n   Initialize an empty list called result.\n   Loop through the list from the first element to the second-to-last element:\n       Create a tuple with the current element and the next element.\n       Append this tuple to the result list.\n   Return the result list.\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef pair_wise(lst):\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through the list from the first element to the second-to-last element\n    for i in range(len(lst) - 1):\n        # Create a tuple with the current element and the next element\n        pair = (lst[i], lst[i + 1])\n        # Append the tuple to the result list\n        result.append(pair)\n    # Return the result list\n    return result\n```",
    "no_parent": true,
    "dependency_used": false
}