{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\nTests failed:\nNone",
    "code": "\ndef move_zero(lst):\n    # Create an empty list to store non-zero elements\n    result = []\n    # Initialize a counter for zeroes\n    zero_count = 0\n    \n    # Iterate through each element in the input list\n    for element in lst:\n        # If the element is not zero, add it to the result list\n        if element != 0:\n            result.append(element)\n        else:\n            # If the element is zero, increment the zero counter\n            zero_count += 1\n    \n    # Add the counted number of zeroes to the end of the result list\n    result.extend([0] * zero_count)\n    \n    # Return the modified list with zeroes moved to the end\n    return result\n",
    "full_code": "\ndef move_zero(lst):\n    # Create an empty list to store non-zero elements\n    result = []\n    # Initialize a counter for zeroes\n    zero_count = 0\n    \n    # Iterate through each element in the input list\n    for element in lst:\n        # If the element is not zero, add it to the result list\n        if element != 0:\n            result.append(element)\n        else:\n            # If the element is zero, increment the zero counter\n            zero_count += 1\n    \n    # Add the counted number of zeroes to the end of the result list\n    result.extend([0] * zero_count)\n    \n    # Return the modified list with zeroes moved to the end\n    return result\n",
    "reward": true,
    "program_code": "\ndef move_zero(lst):\n    # Create an empty list to store non-zero elements\n    result = []\n    # Initialize a counter for zeroes\n    zero_count = 0\n    \n    # Iterate through each element in the input list\n    for element in lst:\n        # If the element is not zero, add it to the result list\n        if element != 0:\n            result.append(element)\n        else:\n            # If the element is zero, increment the zero counter\n            zero_count += 1\n    \n    # Add the counted number of zeroes to the end of the result list\n    result.extend([0] * zero_count)\n    \n    # Return the modified list with zeroes moved to the end\n    return result\n",
    "program_name": "move_zero",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to write a function that takes a list of integers and moves all the zeroes in the list to the end, while maintaining the order of the non-zero elements.\n\n2. **Conceptualize a solution in plain English:**\n\n   To solve this problem, we can iterate through the list and separate the non-zero elements from the zero elements. We can create a new list that first contains all the non-zero elements in their original order, followed by all the zero elements. This way, we effectively move all the zeroes to the end of the list.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   function move_zero(lst):\n       create an empty list called result\n       create a variable zero_count and set it to 0\n       \n       for each element in lst:\n           if the element is not zero:\n               append the element to result\n           else:\n               increment zero_count by 1\n       \n       append zero_count number of zeroes to result\n       \n       return result\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef move_zero(lst):\n    # Create an empty list to store non-zero elements\n    result = []\n    # Initialize a counter for zeroes\n    zero_count = 0\n    \n    # Iterate through each element in the input list\n    for element in lst:\n        # If the element is not zero, add it to the result list\n        if element != 0:\n            result.append(element)\n        else:\n            # If the element is zero, increment the zero counter\n            zero_count += 1\n    \n    # Add the counted number of zeroes to the end of the result list\n    result.extend([0] * zero_count)\n    \n    # Return the modified list with zeroes moved to the end\n    return result\n```\n\nThis solution iterates through the list once, making it efficient with a time complexity of O(n), where n is the number of elements in the list. The space complexity is also O(n) due to the creation of a new list to store the result.",
    "no_parent": true,
    "dependency_used": false
}