[
    {
        "role": "system",
        "content": "\nYou are an expert programmer tasked with solving the problem below.\n\nFollow the user's instructions to solve the problem.\nThe user can ask for analysis, code, or both.\n\n## Instructions\nWhen asked to output code,\n- Make sure to wrap your code in '```python' and '```' Markdown delimiters, \n- include exactly one block of code with the entire solution\n- No outside libraries are allowed. \n- Builtins are allowed.\n- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).\n- DO NOT write any assert statements / tests.\n\n## Problem\n[BEGIN PROBLEM]\nWrite a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.\n\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"\n\n[END PROBLEM]\n"
    },
    {
        "role": "user",
        "content": "\n## Instructions\n\nReason through the problem and:\n1. Restate the problem in plain English\n2. Conceptualize a solution first in plain English\n3. Write a pseudocode solution\n4. Output the final Python 3 solution with your solution steps in comments.\n\nMake sure to wrap your code in '```python' and '```' Markdown delimiters, \nand include exactly one block of code with the entire solution.\n\nNo outside libraries are allowed.\nBuiltins are allowed.\n"
    },
    {
        "role": "assistant",
        "content": "## Problem Restatement\n\nWe are given a square matrix where each cell has a specific cost. We need to find a path from the top-left corner to the bottom-right corner of the matrix. The path can only move right or down. Our goal is to find the path that has the maximum average cost, where the average is calculated as the total cost of the path divided by the number of cells in the path.\n\n## Conceptual Solution\n\n1. **Dynamic Programming Approach**: We can use dynamic programming to solve this problem efficiently. We'll maintain a 2D list `dp` where `dp[i][j]` will store the maximum total cost of reaching cell `(i, j)` from the top-left corner `(0, 0)`.\n\n2. **Initialization**: \n   - Start by initializing `dp[0][0]` with the cost of the top-left cell, as this is the starting point.\n\n3. **Filling the DP Table**:\n   - For each cell `(i, j)`, calculate the maximum cost to reach that cell by considering the maximum cost of reaching the cell from the top `(i-1, j)` or from the left `(i, j-1)`.\n   - The formula will be: `dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])`.\n\n4. **Calculate the Average**:\n   - The number of cells in any path from `(0, 0)` to `(N-1, N-1)` is `2N - 1`.\n   - The maximum average cost will be `dp[N-1][N-1] / (2N - 1)`.\n\n5. **Return the Result**: Return the calculated maximum average.\n\n## Pseudocode\n\n```\nfunction maxAverageOfPath(cost):\n    N = length of cost\n    create a 2D list dp of size N x N\n    dp[0][0] = cost[0][0]\n    \n    for i from 1 to N-1:\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    \n    for i from 1 to N-1:\n        for j from 1 to N-1:\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    \n    max_total_cost = dp[N-1][N-1]\n    max_average = max_total_cost / (2 * N - 1)\n    \n    return max_average\n```\n\n## Final Python Solution\n\n```python\ndef maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    \n    # Initialize the starting point\n    dp[0][0] = cost[0][0]\n    \n    # Fill the first row and first column\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    \n    # Fill the rest of the dp table\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    \n    # Calculate the maximum average\n    max_total_cost = dp[N-1][N-1]\n    max_average = max_total_cost / (2 * N - 1)\n    \n    return max_average\n```"
    },
    {
        "role": "user",
        "content": "\nAlso, here are some of your memories.\nFeel free to use the given information to aid your problem solving process if necessary.\nDo not confuse the memories with the problem statement.\n\n## Memories\n\n[Textbook Reference Material]:\n    Title: Divide and Conquer DP\n    Part: 1/1\n    # Divide and Conquer DP\n\n    Divide and Conquer is a dynamic programming optimization.\n\n    ### Preconditions\n    Some dynamic programming problems have a recurrence of this form: \n\n    $$\n    dp(i, j) = \\min_{0 \\leq k \\leq j} \\\\{ dp(i - 1, k - 1) + C(k, j) \\\\}\n    $$\n\n    where $C(k, j)$ is a cost function and $dp(i, j) = 0$ when $j \\lt 0$. \n\n    Say $0 \\leq i \\lt m$ and $0 \\leq j \\lt n$, and evaluating $C$ takes $O(1)$\n    time. Then the straightforward evaluation of the above recurrence is $O(m n^2)$. There\n    are $m \\times n$ states, and $n$ transitions for each state.\n\n    Let $opt(i, j)$ be the value of $k$ that minimizes the above expression. Assuming that the \n    cost function satisfies the quadrangle inequality, we can show that \n    $opt(i, j) \\leq opt(i, j + 1)$ for all $i, j$. This is known as the _monotonicity condition_. \n    Then, we can apply divide and conquer DP. The optimal\n    \"splitting point\" for a fixed $i$ increases as $j$ increases.\n\n    This lets us solve for all states more efficiently. Say we compute $opt(i, j)$\n    for some fixed $i$ and $j$. Then for any $j' < j$ we know that $opt(i, j') \\leq opt(i, j)$.\n    This means when computing $opt(i, j')$, we don't have to consider as many\n    splitting points!\n\n    To minimize the runtime, we apply the idea behind divide and conquer. First,\n    compute $opt(i, n / 2)$. Then, compute $opt(i, n / 4)$, knowing that it is less\n    than or equal to $opt(i, n / 2)$ and $opt(i, 3 n / 4)$ knowing that it is\n    greater than or equal to $opt(i, n / 2)$. By recursively keeping track of the\n    lower and upper bounds on $opt$, we reach a $O(m n \\log n)$ runtime. Each\n    possible value of $opt(i, j)$ only appears in $\\log n$ different nodes.\n\n    Note that it doesn't matter how \"balanced\" $opt(i, j)$ is. Across a fixed\n    level, each value of $k$ is used at most twice, and there are at most $\\log n$\n    levels.\n\n    ## Generic implementation\n\n    Even though implementation varies based on problem, here's a fairly generic\n    template.\n    The function `compute` computes one row $i$ of states `dp_cur`, given the previous row $i-1$ of states `dp_before`.\n    It has to be called with `compute(0, n-1, 0, n-1)`. The function `solve` computes `m` rows and returns the result.\n\n    ```{.cpp file=divide_and_conquer_dp}\n    int m, n;\n    vector<long long> dp_before(n), dp_cur(n);\n\n    long long C(int i, int j);\n\n    // compute dp_cur[l], ... dp_cur[r] (inclusive)\n    void compute(int l, int r, int optl, int optr) {\n        if (l > r)\n            return;\n\n        int mid = (l + r) >> 1;\n        pair<long long, int> best = {LLONG_MAX, -1};\n\n        for (int k = optl; k <= min(mid, optr); k++) {\n            best = min(best, {(k ? dp_before[k - 1] : 0) + C(k, mid), k});\n        }\n\n        dp_cur[mid] = best.first;\n        int opt = best.second;\n\n        compute(l, mid - 1, optl, opt);\n        compute(mid + 1, r, opt, optr);\n    }\n\n    int solve() {\n        for (int i = 0; i < n; i++)\n            dp_before[i] = C(0, i);\n\n        for (int i = 1; i < m; i++) {\n            compute(0, n - 1, 0, n - 1);\n            dp_before = dp_cur;\n        }\n\n        return dp_before[n - 1];\n    }\n    ```\n\n    ### Things to look out for\n\n    The greatest difficulty with Divide and Conquer DP problems is proving the\n    monotonicity of $opt$. One special case where this is true is when the cost function satisfies the quadrangle inequality, i.e., $C(a, c) + C(b, d) \\leq C(a, d) + C(b, c)$ for all $a \\leq b \\leq c \\leq d$. \n    Many Divide and Conquer DP problems can also be solved with the Convex Hull trick or vice-versa. It is useful to know and understand\n    both!\n[/Textbook Reference Material]\n\n"
    },
    {
        "role": "assistant",
        "content": "1. **Restate the problem in plain English:**\n\n   We are given a square matrix where each cell has a specific cost. We need to find a path from the top-left corner to the bottom-right corner of the matrix. The path can only move right or down. Our goal is to find the path that has the maximum average cost, where the average is calculated as the total cost of the path divided by the number of cells in the path.\n\n2. **Conceptualize a solution in plain English:**\n\n   To solve this problem, we can use dynamic programming. We'll create a 2D list `dp` where `dp[i][j]` will store the maximum total cost of reaching cell `(i, j)` from the top-left corner. We will initialize `dp[0][0]` with the cost of the top-left cell. For each cell `(i, j)`, we can only come from the left `(i, j-1)` or from above `(i-1, j)`. Therefore, the value of `dp[i][j]` will be the cost of the current cell plus the maximum of the values from the left or above. Once we fill the `dp` table, the maximum average path cost will be the value at `dp[N-1][N-1]` divided by the number of cells in the path, which is `2N-1` for an `N*N` matrix.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   function maxAverageOfPath(matrix):\n       N = length of matrix\n       create a 2D list dp of size N*N initialized to 0\n       dp[0][0] = matrix[0][0]\n       \n       for i from 0 to N-1:\n           for j from 0 to N-1:\n               if i > 0:\n                   dp[i][j] = max(dp[i][j], dp[i-1][j] + matrix[i][j])\n               if j > 0:\n                   dp[i][j] = max(dp[i][j], dp[i][j-1] + matrix[i][j])\n       \n       total_cost = dp[N-1][N-1]\n       number_of_cells = 2 * N - 1\n       return total_cost / number_of_cells\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef maxAverageOfPath(matrix):\n    N = len(matrix)\n    # Create a 2D list dp to store the maximum total cost to reach each cell\n    dp = [[0] * N for _ in range(N)]\n    \n    # Initialize the starting point\n    dp[0][0] = matrix[0][0]\n    \n    # Fill the dp table\n    for i in range(N):\n        for j in range(N):\n            if i > 0:\n                # Update dp[i][j] considering the path from above\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + matrix[i][j])\n            if j > 0:\n                # Update dp[i][j] considering the path from the left\n                dp[i][j] = max(dp[i][j], dp[i][j-1] + matrix[i][j])\n    \n    # Calculate the total cost of the maximum path\n    total_cost = dp[N-1][N-1]\n    # Calculate the number of cells in the path\n    number_of_cells = 2 * N - 1\n    # Return the maximum average cost\n    return total_cost / number_of_cells\n```"
    },
    {
        "role": "user",
        "content": "\n[Environment Feedback]:\n    Note: Tests are automatically generated and can be wrong.\n\n    Tests passed:\n    assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\n    Tests failed:\n    None\n[/Environment Feedback]\n"
    }
]