{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\nTests failed:\nNone",
    "code": "\ndef list_split(input_list, n):\n    # Initialize the result list to hold the sublists\n    result = []\n    \n    # Loop over each index from 0 to n-1\n    for i in range(n):\n        # Initialize a sublist for the current index\n        sublist = []\n        \n        # Loop over the input list starting from the current index, stepping by n\n        for j in range(i, len(input_list), n):\n            # Append the current element to the sublist\n            sublist.append(input_list[j])\n        \n        # Append the sublist to the result list\n        result.append(sublist)\n    \n    # Return the list of sublists\n    return result\n",
    "full_code": "\ndef list_split(input_list, n):\n    # Initialize the result list to hold the sublists\n    result = []\n    \n    # Loop over each index from 0 to n-1\n    for i in range(n):\n        # Initialize a sublist for the current index\n        sublist = []\n        \n        # Loop over the input list starting from the current index, stepping by n\n        for j in range(i, len(input_list), n):\n            # Append the current element to the sublist\n            sublist.append(input_list[j])\n        \n        # Append the sublist to the result list\n        result.append(sublist)\n    \n    # Return the list of sublists\n    return result\n",
    "reward": true,
    "program_code": "\ndef list_split(input_list, n):\n    # Initialize the result list to hold the sublists\n    result = []\n    \n    # Loop over each index from 0 to n-1\n    for i in range(n):\n        # Initialize a sublist for the current index\n        sublist = []\n        \n        # Loop over the input list starting from the current index, stepping by n\n        for j in range(i, len(input_list), n):\n            # Append the current element to the sublist\n            sublist.append(input_list[j])\n        \n        # Append the sublist to the result list\n        result.append(sublist)\n    \n    # Return the list of sublists\n    return result\n",
    "program_name": "list_split",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to create a function that takes a list and an integer `n` as inputs. The function should split the list into `n` separate lists, where each list contains every `n`-th element from the original list. The function should return a list of these `n` lists.\n\n2. **Conceptualize a solution in plain English:**\n\n   - Initialize an empty list to hold the resulting lists.\n   - For each index from 0 to `n-1`, create a new list.\n   - For each element in the original list, if its index modulo `n` equals the current index, add it to the current list.\n   - Append each of these lists to the result list.\n   - Return the result list.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   function list_split(input_list, n):\n       initialize result as an empty list\n       for i from 0 to n-1:\n           initialize sublist as an empty list\n           for j from i to length of input_list, step by n:\n               append input_list[j] to sublist\n           append sublist to result\n       return result\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef list_split(input_list, n):\n    # Initialize the result list to hold the sublists\n    result = []\n    \n    # Loop over each index from 0 to n-1\n    for i in range(n):\n        # Initialize a sublist for the current index\n        sublist = []\n        \n        # Loop over the input list starting from the current index, stepping by n\n        for j in range(i, len(input_list), n):\n            # Append the current element to the sublist\n            sublist.append(input_list[j])\n        \n        # Append the sublist to the result list\n        result.append(sublist)\n    \n    # Return the list of sublists\n    return result\n```",
    "no_parent": true,
    "dependency_used": false
}