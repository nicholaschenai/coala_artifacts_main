{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert Split([1,2,3,4,5]) == [2,4]\n\nTests failed:\nNone",
    "code": "\ndef Split(numbers):\n    # Initialize an empty list to store even numbers\n    even_numbers = []\n    \n    # Iterate over each number in the input list\n    for number in numbers:\n        # Check if the number is even\n        if number % 2 == 0:\n            # If it is even, append it to the even_numbers list\n            even_numbers.append(number)\n    \n    # Return the list of even numbers\n    return even_numbers\n",
    "full_code": "\ndef Split(numbers):\n    # Initialize an empty list to store even numbers\n    even_numbers = []\n    \n    # Iterate over each number in the input list\n    for number in numbers:\n        # Check if the number is even\n        if number % 2 == 0:\n            # If it is even, append it to the even_numbers list\n            even_numbers.append(number)\n    \n    # Return the list of even numbers\n    return even_numbers\n",
    "reward": true,
    "program_code": "\ndef Split(numbers):\n    # Initialize an empty list to store even numbers\n    even_numbers = []\n    \n    # Iterate over each number in the input list\n    for number in numbers:\n        # Check if the number is even\n        if number % 2 == 0:\n            # If it is even, append it to the even_numbers list\n            even_numbers.append(number)\n    \n    # Return the list of even numbers\n    return even_numbers\n",
    "program_name": "Split",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to create a function that takes a list of numbers and returns a new list containing only the even numbers from the original list.\n\n2. **Conceptualize a solution in plain English:**\n\n   To solve this problem, we will iterate through each number in the given list. For each number, we will check if it is even by using the modulus operator (`%`). If a number is even, it will be added to a new list. Finally, we will return this new list of even numbers.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   Define a function named Split that takes a list of numbers as input.\n   Initialize an empty list called even_numbers.\n   For each number in the input list:\n       If the number is even (i.e., number % 2 == 0):\n           Append the number to the even_numbers list.\n   Return the even_numbers list.\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef Split(numbers):\n    # Initialize an empty list to store even numbers\n    even_numbers = []\n    \n    # Iterate over each number in the input list\n    for number in numbers:\n        # Check if the number is even\n        if number % 2 == 0:\n            # If it is even, append it to the even_numbers list\n            even_numbers.append(number)\n    \n    # Return the list of even numbers\n    return even_numbers\n```",
    "no_parent": true,
    "dependency_used": false
}