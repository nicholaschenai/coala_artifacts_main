{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\nTests failed:\nNone",
    "code": "\ndef subject_marks(marks_list):\n    # Use the sorted function to sort the list of tuples\n    # The key for sorting is the second element of each tuple (index 1)\n    sorted_list = sorted(marks_list, key=lambda x: x[1])\n    # Return the sorted list\n    return sorted_list\n",
    "full_code": "\ndef subject_marks(marks_list):\n    # Use the sorted function to sort the list of tuples\n    # The key for sorting is the second element of each tuple (index 1)\n    sorted_list = sorted(marks_list, key=lambda x: x[1])\n    # Return the sorted list\n    return sorted_list\n",
    "reward": true,
    "program_code": "\ndef subject_marks(marks_list):\n    # Use the sorted function to sort the list of tuples\n    # The key for sorting is the second element of each tuple (index 1)\n    sorted_list = sorted(marks_list, key=lambda x: x[1])\n    # Return the sorted list\n    return sorted_list\n",
    "program_name": "subject_marks",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to write a function that takes a list of tuples as input. Each tuple contains a subject name and a corresponding mark. The function should return a new list of tuples sorted by the marks in ascending order.\n\n2. **Conceptualize a solution in plain English:**\n\n   To solve this problem, we can use Python's built-in sorting capabilities. Specifically, we can use the `sorted()` function, which allows us to sort a list based on a specified key. In this case, the key will be the second element of each tuple (the mark). The `sorted()` function will return a new list that is sorted according to the specified key.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   Define a function named subject_marks that takes a list of tuples as input.\n   Use the sorted() function to sort the list.\n   Specify the key for sorting as the second element of each tuple.\n   Return the sorted list.\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef subject_marks(marks_list):\n    # Use the sorted function to sort the list of tuples\n    # The key for sorting is the second element of each tuple (index 1)\n    sorted_list = sorted(marks_list, key=lambda x: x[1])\n    # Return the sorted list\n    return sorted_list\n```\n\nThis function will take a list of tuples, sort them by the second element of each tuple, and return the sorted list.",
    "no_parent": true,
    "dependency_used": false
}