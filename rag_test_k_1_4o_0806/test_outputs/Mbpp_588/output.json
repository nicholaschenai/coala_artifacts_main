{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert big_diff([1,2,3,4]) == 3\n\nTests failed:\nNone",
    "code": "\ndef big_diff(numbers):\n    # If the list is empty, return 0 (or handle as needed)\n    if not numbers:\n        return 0\n    \n    # Initialize max_value and min_value with the first element of the list\n    max_value = numbers[0]\n    min_value = numbers[0]\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # Update max_value if the current number is greater\n        if number > max_value:\n            max_value = number\n        # Update min_value if the current number is smaller\n        if number < min_value:\n            min_value = number\n    \n    # Return the difference between the largest and smallest values\n    return max_value - min_value\n",
    "full_code": "\ndef big_diff(numbers):\n    # If the list is empty, return 0 (or handle as needed)\n    if not numbers:\n        return 0\n    \n    # Initialize max_value and min_value with the first element of the list\n    max_value = numbers[0]\n    min_value = numbers[0]\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # Update max_value if the current number is greater\n        if number > max_value:\n            max_value = number\n        # Update min_value if the current number is smaller\n        if number < min_value:\n            min_value = number\n    \n    # Return the difference between the largest and smallest values\n    return max_value - min_value\n",
    "reward": true,
    "program_code": "\ndef big_diff(numbers):\n    # If the list is empty, return 0 (or handle as needed)\n    if not numbers:\n        return 0\n    \n    # Initialize max_value and min_value with the first element of the list\n    max_value = numbers[0]\n    min_value = numbers[0]\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # Update max_value if the current number is greater\n        if number > max_value:\n            max_value = number\n        # Update min_value if the current number is smaller\n        if number < min_value:\n            min_value = number\n    \n    # Return the difference between the largest and smallest values\n    return max_value - min_value\n",
    "program_name": "big_diff",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to write a function that takes a list of numbers and returns the difference between the largest and smallest numbers in that list.\n\n2. **Conceptualize a solution in plain English:**\n\n   To solve this problem, we need to:\n   - Identify the largest number in the list.\n   - Identify the smallest number in the list.\n   - Calculate the difference between these two numbers.\n   - Return this difference as the result.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   function big_diff(numbers):\n       if the list is empty:\n           return 0 (or handle as needed)\n       set max_value to the first element of the list\n       set min_value to the first element of the list\n       for each number in the list:\n           if number is greater than max_value:\n               update max_value to number\n           if number is less than min_value:\n               update min_value to number\n       return the difference between max_value and min_value\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef big_diff(numbers):\n    # If the list is empty, return 0 (or handle as needed)\n    if not numbers:\n        return 0\n    \n    # Initialize max_value and min_value with the first element of the list\n    max_value = numbers[0]\n    min_value = numbers[0]\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # Update max_value if the current number is greater\n        if number > max_value:\n            max_value = number\n        # Update min_value if the current number is smaller\n        if number < min_value:\n            min_value = number\n    \n    # Return the difference between the largest and smallest values\n    return max_value - min_value\n```",
    "no_parent": true,
    "dependency_used": false
}