{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\nTests failed:\nNone",
    "code": "\ndef find_first_occurrence(arr, target):\n    # Initialize the left and right pointers for binary search\n    left, right = 0, len(arr) - 1\n    # Initialize result to -1, which will store the index of the first occurrence\n    result = -1\n\n    # Perform binary search\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n\n        # If the target is found at mid, update result and search in the left half\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n\n        # If the target is greater than the mid element, search in the right half\n        elif arr[mid] < target:\n            left = mid + 1\n\n        # If the target is less than the mid element, search in the left half\n        else:\n            right = mid - 1\n\n    # Return the index of the first occurrence or -1 if not found\n    return result\n",
    "full_code": "\ndef find_first_occurrence(arr, target):\n    # Initialize the left and right pointers for binary search\n    left, right = 0, len(arr) - 1\n    # Initialize result to -1, which will store the index of the first occurrence\n    result = -1\n\n    # Perform binary search\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n\n        # If the target is found at mid, update result and search in the left half\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n\n        # If the target is greater than the mid element, search in the right half\n        elif arr[mid] < target:\n            left = mid + 1\n\n        # If the target is less than the mid element, search in the left half\n        else:\n            right = mid - 1\n\n    # Return the index of the first occurrence or -1 if not found\n    return result\n",
    "reward": true,
    "program_code": "\ndef find_first_occurrence(arr, target):\n    # Initialize the left and right pointers for binary search\n    left, right = 0, len(arr) - 1\n    # Initialize result to -1, which will store the index of the first occurrence\n    result = -1\n\n    # Perform binary search\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n\n        # If the target is found at mid, update result and search in the left half\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n\n        # If the target is greater than the mid element, search in the right half\n        elif arr[mid] < target:\n            left = mid + 1\n\n        # If the target is less than the mid element, search in the left half\n        else:\n            right = mid - 1\n\n    # Return the index of the first occurrence or -1 if not found\n    return result\n",
    "program_name": "find_first_occurrence",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to write a function that takes a sorted list of numbers and a target number as inputs. The function should return the index of the first occurrence of the target number in the list. If the target number is not present in the list, the function should return -1.\n\n2. **Conceptualize a solution in plain English:**\n\n   Since the list is sorted, we can use a binary search approach to efficiently find the first occurrence of the target number. The binary search will help us quickly narrow down the possible positions of the target number. Once we find the target number, we will continue to check the left side of the current position to ensure it's the first occurrence.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   Define function find_first_occurrence(arr, target):\n       Initialize left to 0\n       Initialize right to length of arr - 1\n       Initialize result to -1 (to store the index of the first occurrence)\n\n       While left is less than or equal to right:\n           Calculate mid as the average of left and right\n           If arr[mid] is equal to target:\n               Set result to mid\n               Move right to mid - 1 (to check for earlier occurrences)\n           Else if arr[mid] is less than target:\n               Move left to mid + 1\n           Else:\n               Move right to mid - 1\n\n       Return result\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef find_first_occurrence(arr, target):\n    # Initialize the left and right pointers for binary search\n    left, right = 0, len(arr) - 1\n    # Initialize result to -1, which will store the index of the first occurrence\n    result = -1\n\n    # Perform binary search\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n\n        # If the target is found at mid, update result and search in the left half\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n\n        # If the target is greater than the mid element, search in the right half\n        elif arr[mid] < target:\n            left = mid + 1\n\n        # If the target is less than the mid element, search in the left half\n        else:\n            right = mid - 1\n\n    # Return the index of the first occurrence or -1 if not found\n    return result\n```",
    "no_parent": true,
    "dependency_used": false
}