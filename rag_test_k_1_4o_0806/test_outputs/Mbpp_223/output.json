{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\nTests failed:\nNone",
    "code": "\ndef is_majority(arr, n, x):\n    # If the array is empty, x cannot be a majority element\n    if n == 0:\n        return False\n    \n    # Binary search to find the first occurrence of x\n    left = 0\n    right = n - 1\n    first_occurrence = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            first_occurrence = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # If x is not found in the array, it cannot be a majority element\n    if first_occurrence == -1:\n        return False\n    \n    # Count occurrences of x starting from first_occurrence\n    count = 0\n    for i in range(first_occurrence, n):\n        if arr[i] == x:\n            count += 1\n        else:\n            break\n    \n    # Check if count is greater than n/2\n    return count > n // 2\n",
    "full_code": "\ndef is_majority(arr, n, x):\n    # If the array is empty, x cannot be a majority element\n    if n == 0:\n        return False\n    \n    # Binary search to find the first occurrence of x\n    left = 0\n    right = n - 1\n    first_occurrence = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            first_occurrence = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # If x is not found in the array, it cannot be a majority element\n    if first_occurrence == -1:\n        return False\n    \n    # Count occurrences of x starting from first_occurrence\n    count = 0\n    for i in range(first_occurrence, n):\n        if arr[i] == x:\n            count += 1\n        else:\n            break\n    \n    # Check if count is greater than n/2\n    return count > n // 2\n",
    "reward": true,
    "program_code": "\ndef is_majority(arr, n, x):\n    # If the array is empty, x cannot be a majority element\n    if n == 0:\n        return False\n    \n    # Binary search to find the first occurrence of x\n    left = 0\n    right = n - 1\n    first_occurrence = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            first_occurrence = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # If x is not found in the array, it cannot be a majority element\n    if first_occurrence == -1:\n        return False\n    \n    # Count occurrences of x starting from first_occurrence\n    count = 0\n    for i in range(first_occurrence, n):\n        if arr[i] == x:\n            count += 1\n        else:\n            break\n    \n    # Check if count is greater than n/2\n    return count > n // 2\n",
    "program_name": "is_majority",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to determine if a given element is the majority element in a sorted array. A majority element is defined as an element that appears more than half the time in the array. The function should take a sorted array, its length, and the element in question, and return `True` if the element is the majority element, otherwise `False`.\n\n2. **Conceptualize a solution in plain English:**\n\n   Since the array is sorted, if an element is the majority element, it will appear consecutively in the array. We can use binary search to efficiently find the first occurrence of the element and then count how many times it appears consecutively. If the count is greater than half the length of the array, then it is the majority element.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   function is_majority(arr, n, x):\n       if n == 0:\n           return False\n       \n       # Find the first occurrence of x using binary search\n       left = 0\n       right = n - 1\n       first_occurrence = -1\n       \n       while left <= right:\n           mid = (left + right) // 2\n           if arr[mid] == x:\n               first_occurrence = mid\n               right = mid - 1  # Continue searching in the left half\n           elif arr[mid] < x:\n               left = mid + 1\n           else:\n               right = mid - 1\n       \n       if first_occurrence == -1:\n           return False  # x is not in the array\n       \n       # Count occurrences of x starting from first_occurrence\n       count = 0\n       for i from first_occurrence to n-1:\n           if arr[i] == x:\n               count += 1\n           else:\n               break\n       \n       # Check if count is greater than n/2\n       return count > n // 2\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef is_majority(arr, n, x):\n    # If the array is empty, x cannot be a majority element\n    if n == 0:\n        return False\n    \n    # Binary search to find the first occurrence of x\n    left = 0\n    right = n - 1\n    first_occurrence = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            first_occurrence = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # If x is not found in the array, it cannot be a majority element\n    if first_occurrence == -1:\n        return False\n    \n    # Count occurrences of x starting from first_occurrence\n    count = 0\n    for i in range(first_occurrence, n):\n        if arr[i] == x:\n            count += 1\n        else:\n            break\n    \n    # Check if count is greater than n/2\n    return count > n // 2\n```",
    "no_parent": true,
    "dependency_used": false
}