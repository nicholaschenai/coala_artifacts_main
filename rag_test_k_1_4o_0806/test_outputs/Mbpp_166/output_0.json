{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n\nTests failed:\nNone",
    "code": "\ndef find_even_pair(numbers):\n    # Initialize counters for even and odd numbers\n    even_count = 0\n    odd_count = 0\n    \n    # Count the number of even and odd numbers in the list\n    for number in numbers:\n        if number % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Calculate the number of pairs of even numbers\n    even_pairs = (even_count * (even_count - 1)) // 2\n    # Calculate the number of pairs of odd numbers\n    odd_pairs = (odd_count * (odd_count - 1)) // 2\n    \n    # The total number of pairs that XOR to an even number\n    return even_pairs + odd_pairs\n",
    "full_code": "\ndef find_even_pair(numbers):\n    # Initialize counters for even and odd numbers\n    even_count = 0\n    odd_count = 0\n    \n    # Count the number of even and odd numbers in the list\n    for number in numbers:\n        if number % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Calculate the number of pairs of even numbers\n    even_pairs = (even_count * (even_count - 1)) // 2\n    # Calculate the number of pairs of odd numbers\n    odd_pairs = (odd_count * (odd_count - 1)) // 2\n    \n    # The total number of pairs that XOR to an even number\n    return even_pairs + odd_pairs\n",
    "reward": true,
    "program_code": "\ndef find_even_pair(numbers):\n    # Initialize counters for even and odd numbers\n    even_count = 0\n    odd_count = 0\n    \n    # Count the number of even and odd numbers in the list\n    for number in numbers:\n        if number % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Calculate the number of pairs of even numbers\n    even_pairs = (even_count * (even_count - 1)) // 2\n    # Calculate the number of pairs of odd numbers\n    odd_pairs = (odd_count * (odd_count - 1)) // 2\n    \n    # The total number of pairs that XOR to an even number\n    return even_pairs + odd_pairs\n",
    "program_name": "find_even_pair",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to find the number of pairs of integers in a given list such that the XOR of each pair results in an even number.\n\n2. **Conceptualize a solution in plain English:**\n\n   - XOR of two numbers is even if both numbers are either even or both are odd.\n   - First, count the number of even numbers and the number of odd numbers in the list.\n   - Calculate the number of pairs of even numbers and the number of pairs of odd numbers.\n   - The total number of pairs that XOR to an even number is the sum of these two counts.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   Initialize even_count and odd_count to 0\n   For each number in the list:\n       If the number is even, increment even_count\n       Else, increment odd_count\n   Calculate even_pairs as (even_count * (even_count - 1)) // 2\n   Calculate odd_pairs as (odd_count * (odd_count - 1)) // 2\n   Return the sum of even_pairs and odd_pairs\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef find_even_pair(numbers):\n    # Initialize counters for even and odd numbers\n    even_count = 0\n    odd_count = 0\n    \n    # Count the number of even and odd numbers in the list\n    for number in numbers:\n        if number % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Calculate the number of pairs of even numbers\n    even_pairs = (even_count * (even_count - 1)) // 2\n    # Calculate the number of pairs of odd numbers\n    odd_pairs = (odd_count * (odd_count - 1)) // 2\n    \n    # The total number of pairs that XOR to an even number\n    return even_pairs + odd_pairs\n```\n\nThis solution efficiently counts the number of pairs that XOR to an even number by leveraging the properties of even and odd numbers.",
    "no_parent": true,
    "dependency_used": false
}