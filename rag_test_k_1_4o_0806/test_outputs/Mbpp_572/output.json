{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\nTests failed:\nNone",
    "code": "\ndef two_unique_nums(numbers):\n    # Create a dictionary to count occurrences of each number\n    count_dict = {}\n    \n    # Count each number's occurrences\n    for number in numbers:\n        if number in count_dict:\n            count_dict[number] += 1\n        else:\n            count_dict[number] = 1\n    \n    # Create a list to store numbers that appear exactly once\n    unique_numbers = []\n    \n    # Collect numbers that have a count of 1\n    for number in numbers:\n        if count_dict[number] == 1:\n            unique_numbers.append(number)\n    \n    # Return the list of unique numbers\n    return unique_numbers\n",
    "full_code": "\ndef two_unique_nums(numbers):\n    # Create a dictionary to count occurrences of each number\n    count_dict = {}\n    \n    # Count each number's occurrences\n    for number in numbers:\n        if number in count_dict:\n            count_dict[number] += 1\n        else:\n            count_dict[number] = 1\n    \n    # Create a list to store numbers that appear exactly once\n    unique_numbers = []\n    \n    # Collect numbers that have a count of 1\n    for number in numbers:\n        if count_dict[number] == 1:\n            unique_numbers.append(number)\n    \n    # Return the list of unique numbers\n    return unique_numbers\n",
    "reward": true,
    "program_code": "\ndef two_unique_nums(numbers):\n    # Create a dictionary to count occurrences of each number\n    count_dict = {}\n    \n    # Count each number's occurrences\n    for number in numbers:\n        if number in count_dict:\n            count_dict[number] += 1\n        else:\n            count_dict[number] = 1\n    \n    # Create a list to store numbers that appear exactly once\n    unique_numbers = []\n    \n    # Collect numbers that have a count of 1\n    for number in numbers:\n        if count_dict[number] == 1:\n            unique_numbers.append(number)\n    \n    # Return the list of unique numbers\n    return unique_numbers\n",
    "program_name": "two_unique_nums",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to create a function that takes a list of numbers and returns a new list containing only the numbers that appear exactly once in the original list. In other words, we need to remove all duplicate numbers from the list and keep only the unique ones.\n\n2. **Conceptualize a solution in plain English:**\n\n   - First, we will create a dictionary to count the occurrences of each number in the list.\n   - We will iterate through the list and update the dictionary with the count of each number.\n   - After counting, we will create a new list that includes only the numbers that have a count of 1 in the dictionary.\n   - Finally, we will return this new list of unique numbers.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   function two_unique_nums(numbers):\n       create an empty dictionary called count_dict\n       for each number in numbers:\n           if number is in count_dict:\n               increment the count of number in count_dict\n           else:\n               set the count of number to 1 in count_dict\n       \n       create an empty list called unique_numbers\n       for each number in numbers:\n           if count of number in count_dict is 1:\n               append number to unique_numbers\n       \n       return unique_numbers\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef two_unique_nums(numbers):\n    # Create a dictionary to count occurrences of each number\n    count_dict = {}\n    \n    # Count each number's occurrences\n    for number in numbers:\n        if number in count_dict:\n            count_dict[number] += 1\n        else:\n            count_dict[number] = 1\n    \n    # Create a list to store numbers that appear exactly once\n    unique_numbers = []\n    \n    # Collect numbers that have a count of 1\n    for number in numbers:\n        if count_dict[number] == 1:\n            unique_numbers.append(number)\n    \n    # Return the list of unique numbers\n    return unique_numbers\n```\n\nThis code will correctly identify and return the numbers that appear only once in the input list, effectively removing duplicates.",
    "no_parent": true,
    "dependency_used": false
}