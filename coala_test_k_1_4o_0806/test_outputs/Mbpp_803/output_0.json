{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert not is_perfect_square(10)\n\nTests failed:\nNone",
    "code": "\ndef is_perfect_square(n: int) -> bool:\n    # If the number is negative, it cannot be a perfect square\n    if n < 0:\n        return False\n    \n    # Calculate the integer square root of n\n    root = int(n**0.5)\n    \n    # Check if the square of the root is equal to n\n    return root * root == n\n",
    "full_code": "\ndef is_perfect_square(n: int) -> bool:\n    # If the number is negative, it cannot be a perfect square\n    if n < 0:\n        return False\n    \n    # Calculate the integer square root of n\n    root = int(n**0.5)\n    \n    # Check if the square of the root is equal to n\n    return root * root == n\n",
    "reward": true,
    "program_code": "\ndef is_perfect_square(n: int) -> bool:\n    # If the number is negative, it cannot be a perfect square\n    if n < 0:\n        return False\n    \n    # Calculate the integer square root of n\n    root = int(n**0.5)\n    \n    # Check if the square of the root is equal to n\n    return root * root == n\n",
    "program_name": "is_perfect_square",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to determine if a given integer is a perfect square. A perfect square is an integer that is the square of another integer. For example, 9 is a perfect square because it is 3 squared (3 * 3).\n\n2. **Conceptualize a solution in plain English:**\n\n   To check if a number is a perfect square, we can take the square root of the number and check if the result is an integer. If the square root is an integer, then the number is a perfect square. Otherwise, it is not. We can achieve this by calculating the integer square root and then squaring it to see if we get back the original number.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   Function is_perfect_square(n):\n       If n is less than 0:\n           Return False\n       Calculate the integer square root of n and store it in variable 'root'\n       If 'root' squared is equal to n:\n           Return True\n       Else:\n           Return False\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef is_perfect_square(n: int) -> bool:\n    # If the number is negative, it cannot be a perfect square\n    if n < 0:\n        return False\n    \n    # Calculate the integer square root of n\n    root = int(n**0.5)\n    \n    # Check if the square of the root is equal to n\n    return root * root == n\n```\n\nThis function first checks if the number is negative, as negative numbers cannot be perfect squares. It then calculates the integer square root of the number and checks if squaring this root gives back the original number. If it does, the number is a perfect square; otherwise, it is not.",
    "no_parent": true,
    "dependency_used": false
}