{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert is_nonagonal(10) == 325\n\nTests failed:\nNone",
    "code": "\ndef is_nonagonal(n: int) -> int:\n    # Calculate the nth nonagonal number using the formula\n    # N(n) = n * (7n - 5) / 2\n    nonagonal_number = n * (7 * n - 5) // 2\n    return nonagonal_number\n",
    "full_code": "\ndef is_nonagonal(n: int) -> int:\n    # Calculate the nth nonagonal number using the formula\n    # N(n) = n * (7n - 5) / 2\n    nonagonal_number = n * (7 * n - 5) // 2\n    return nonagonal_number\n",
    "reward": true,
    "program_code": "\ndef is_nonagonal(n: int) -> int:\n    # Calculate the nth nonagonal number using the formula\n    # N(n) = n * (7n - 5) / 2\n    nonagonal_number = n * (7 * n - 5) // 2\n    return nonagonal_number\n",
    "program_name": "is_nonagonal",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to write a function that calculates the nth nonagonal number. A nonagonal number is a figurate number that extends the concept of triangular and square numbers to the nonagon (a nine-sided polygon). The task is to find the formula for the nth nonagonal number and implement it in a function.\n\n2. **Conceptualize a solution in plain English:**\n\n   Nonagonal numbers can be calculated using a specific formula. The nth nonagonal number can be determined using the formula: \n   \\[\n   N(n) = \\frac{n(7n - 5)}{2}\n   \\]\n   This formula directly gives us the nth nonagonal number. We will implement this formula in a function that takes an integer `n` as input and returns the nth nonagonal number.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   Define function is_nonagonal(n):\n       Calculate nonagonal number using formula: n * (7 * n - 5) / 2\n       Return the calculated nonagonal number\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef is_nonagonal(n: int) -> int:\n    # Calculate the nth nonagonal number using the formula\n    # N(n) = n * (7n - 5) / 2\n    nonagonal_number = n * (7 * n - 5) // 2\n    return nonagonal_number\n```\n\nThis function uses integer division to ensure the result is an integer, as nonagonal numbers are always whole numbers. The formula is applied directly to compute the nth nonagonal number efficiently.",
    "no_parent": true,
    "dependency_used": false
}