{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\nTests failed:\nNone",
    "code": "\ndef max_run_uppercase(s: str) -> int:\n    # Initialize variables to track the maximum run and the current run of uppercase letters\n    max_run = 0\n    current_run = 0\n    \n    # Iterate over each character in the string\n    for c in s:\n        # Check if the character is uppercase\n        if c.isupper():\n            # Increment the current run count\n            current_run += 1\n        else:\n            # Update the maximum run if the current run is greater\n            max_run = max(max_run, current_run)\n            # Reset the current run count\n            current_run = 0\n    \n    # Final check to update the maximum run in case the string ends with an uppercase sequence\n    max_run = max(max_run, current_run)\n    \n    # Return the maximum run of consecutive uppercase letters\n    return max_run\n",
    "full_code": "\ndef max_run_uppercase(s: str) -> int:\n    # Initialize variables to track the maximum run and the current run of uppercase letters\n    max_run = 0\n    current_run = 0\n    \n    # Iterate over each character in the string\n    for c in s:\n        # Check if the character is uppercase\n        if c.isupper():\n            # Increment the current run count\n            current_run += 1\n        else:\n            # Update the maximum run if the current run is greater\n            max_run = max(max_run, current_run)\n            # Reset the current run count\n            current_run = 0\n    \n    # Final check to update the maximum run in case the string ends with an uppercase sequence\n    max_run = max(max_run, current_run)\n    \n    # Return the maximum run of consecutive uppercase letters\n    return max_run\n",
    "reward": true,
    "program_code": "\ndef max_run_uppercase(s: str) -> int:\n    # Initialize variables to track the maximum run and the current run of uppercase letters\n    max_run = 0\n    current_run = 0\n    \n    # Iterate over each character in the string\n    for c in s:\n        # Check if the character is uppercase\n        if c.isupper():\n            # Increment the current run count\n            current_run += 1\n        else:\n            # Update the maximum run if the current run is greater\n            max_run = max(max_run, current_run)\n            # Reset the current run count\n            current_run = 0\n    \n    # Final check to update the maximum run in case the string ends with an uppercase sequence\n    max_run = max(max_run, current_run)\n    \n    # Return the maximum run of consecutive uppercase letters\n    return max_run\n",
    "program_name": "max_run_uppercase",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to find the longest sequence of consecutive uppercase letters in a given string. The function should return the length of this sequence.\n\n2. **Conceptualize a solution in plain English:**\n\n   We will iterate through each character in the string and keep track of the current run of consecutive uppercase letters. If we encounter an uppercase letter, we increase the current run count. If we encounter a non-uppercase letter, we compare the current run count with the maximum run count recorded so far and update the maximum if necessary. We then reset the current run count to zero. At the end of the iteration, we need to check once more to ensure the maximum run is updated in case the string ends with an uppercase sequence.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   function max_run_uppercase(s):\n       max_run = 0\n       current_run = 0\n       \n       for each character c in s:\n           if c is uppercase:\n               increment current_run\n           else:\n               max_run = max(max_run, current_run)\n               reset current_run to 0\n       \n       # Final check in case the string ends with an uppercase sequence\n       max_run = max(max_run, current_run)\n       \n       return max_run\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef max_run_uppercase(s: str) -> int:\n    # Initialize variables to track the maximum run and the current run of uppercase letters\n    max_run = 0\n    current_run = 0\n    \n    # Iterate over each character in the string\n    for c in s:\n        # Check if the character is uppercase\n        if c.isupper():\n            # Increment the current run count\n            current_run += 1\n        else:\n            # Update the maximum run if the current run is greater\n            max_run = max(max_run, current_run)\n            # Reset the current run count\n            current_run = 0\n    \n    # Final check to update the maximum run in case the string ends with an uppercase sequence\n    max_run = max(max_run, current_run)\n    \n    # Return the maximum run of consecutive uppercase letters\n    return max_run\n```",
    "no_parent": true,
    "dependency_used": false
}