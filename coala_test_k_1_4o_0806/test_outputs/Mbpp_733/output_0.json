{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\nTests failed:\nNone",
    "code": "\ndef find_first_occurrence(arr, target):\n    # Initialize the low and high pointers for binary search\n    low = 0\n    high = len(arr) - 1\n    # Initialize result to -1 to indicate target not found initially\n    result = -1\n\n    # Perform binary search\n    while low <= high:\n        # Calculate the middle index\n        mid = (low + high) // 2\n\n        # If the target is found at mid\n        if arr[mid] == target:\n            # Update result to the current mid index\n            result = mid\n            # Move high to mid - 1 to check for earlier occurrences\n            high = mid - 1\n        # If the target is greater than the mid element, search in the right half\n        elif arr[mid] < target:\n            low = mid + 1\n        # If the target is less than the mid element, search in the left half\n        else:\n            high = mid - 1\n\n    # Return the index of the first occurrence or -1 if not found\n    return result\n",
    "full_code": "\ndef find_first_occurrence(arr, target):\n    # Initialize the low and high pointers for binary search\n    low = 0\n    high = len(arr) - 1\n    # Initialize result to -1 to indicate target not found initially\n    result = -1\n\n    # Perform binary search\n    while low <= high:\n        # Calculate the middle index\n        mid = (low + high) // 2\n\n        # If the target is found at mid\n        if arr[mid] == target:\n            # Update result to the current mid index\n            result = mid\n            # Move high to mid - 1 to check for earlier occurrences\n            high = mid - 1\n        # If the target is greater than the mid element, search in the right half\n        elif arr[mid] < target:\n            low = mid + 1\n        # If the target is less than the mid element, search in the left half\n        else:\n            high = mid - 1\n\n    # Return the index of the first occurrence or -1 if not found\n    return result\n",
    "reward": true,
    "program_code": "\ndef find_first_occurrence(arr, target):\n    # Initialize the low and high pointers for binary search\n    low = 0\n    high = len(arr) - 1\n    # Initialize result to -1 to indicate target not found initially\n    result = -1\n\n    # Perform binary search\n    while low <= high:\n        # Calculate the middle index\n        mid = (low + high) // 2\n\n        # If the target is found at mid\n        if arr[mid] == target:\n            # Update result to the current mid index\n            result = mid\n            # Move high to mid - 1 to check for earlier occurrences\n            high = mid - 1\n        # If the target is greater than the mid element, search in the right half\n        elif arr[mid] < target:\n            low = mid + 1\n        # If the target is less than the mid element, search in the left half\n        else:\n            high = mid - 1\n\n    # Return the index of the first occurrence or -1 if not found\n    return result\n",
    "program_name": "find_first_occurrence",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to find the index of the first occurrence of a specified number in a sorted list of numbers. The list is sorted in non-decreasing order, and we need to return the index of the first time the number appears in the list.\n\n2. **Conceptualize a solution in plain English:**\n\n   Since the list is sorted, we can use a binary search approach to efficiently find the first occurrence of the number. The binary search will help us quickly narrow down the potential location of the number. Once we find the number, we will check if it is the first occurrence by ensuring that the number at the previous index (if it exists) is different. If it is the first occurrence, we return the index; otherwise, we continue searching in the left half of the list.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   Define function find_first_occurrence(arr, target):\n       Initialize low to 0\n       Initialize high to length of arr - 1\n       Initialize result to -1 (to store the index of the first occurrence)\n\n       While low is less than or equal to high:\n           Calculate mid as (low + high) // 2\n           If arr[mid] is equal to target:\n               Set result to mid\n               Move high to mid - 1 to search for earlier occurrences\n           Else if arr[mid] is less than target:\n               Move low to mid + 1\n           Else:\n               Move high to mid - 1\n\n       Return result\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef find_first_occurrence(arr, target):\n    # Initialize the low and high pointers for binary search\n    low = 0\n    high = len(arr) - 1\n    # Initialize result to -1 to indicate target not found initially\n    result = -1\n\n    # Perform binary search\n    while low <= high:\n        # Calculate the middle index\n        mid = (low + high) // 2\n\n        # If the target is found at mid\n        if arr[mid] == target:\n            # Update result to the current mid index\n            result = mid\n            # Move high to mid - 1 to check for earlier occurrences\n            high = mid - 1\n        # If the target is greater than the mid element, search in the right half\n        elif arr[mid] < target:\n            low = mid + 1\n        # If the target is less than the mid element, search in the left half\n        else:\n            high = mid - 1\n\n    # Return the index of the first occurrence or -1 if not found\n    return result\n```",
    "no_parent": true,
    "dependency_used": false
}