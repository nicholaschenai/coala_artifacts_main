{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\nTests failed:\nNone",
    "code": "\ndef sequential_search(array, element):\n    # Iterate over the array with both index and value\n    for index, value in enumerate(array):\n        # Check if the current value matches the element we are searching for\n        if value == element:\n            # If found, return True and the current index\n            return (True, index)\n    # If the loop completes without finding the element, return False and -1\n    return (False, -1)\n",
    "full_code": "\ndef sequential_search(array, element):\n    # Iterate over the array with both index and value\n    for index, value in enumerate(array):\n        # Check if the current value matches the element we are searching for\n        if value == element:\n            # If found, return True and the current index\n            return (True, index)\n    # If the loop completes without finding the element, return False and -1\n    return (False, -1)\n",
    "reward": true,
    "program_code": "\ndef sequential_search(array, element):\n    # Iterate over the array with both index and value\n    for index, value in enumerate(array):\n        # Check if the current value matches the element we are searching for\n        if value == element:\n            # If found, return True and the current index\n            return (True, index)\n    # If the loop completes without finding the element, return False and -1\n    return (False, -1)\n",
    "program_name": "sequential_search",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to create a function that checks if a given element is present in a list. If the element is found, the function should return a tuple with `True` and the index of the element. If the element is not found, it should return a tuple with `False` and `-1`.\n\n2. **Conceptualize a solution in plain English:**\n\n   To solve this problem, we will iterate through the list and check each element to see if it matches the target element. If we find a match, we will return `True` and the index of the element. If we finish checking all elements and do not find a match, we will return `False` and `-1`.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   function sequential_search(array, element):\n       for each index and value in array:\n           if value equals element:\n               return (True, index)\n       return (False, -1)\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef sequential_search(array, element):\n    # Iterate over the array with both index and value\n    for index, value in enumerate(array):\n        # Check if the current value matches the element we are searching for\n        if value == element:\n            # If found, return True and the current index\n            return (True, index)\n    # If the loop completes without finding the element, return False and -1\n    return (False, -1)\n```\n\nThis function will correctly identify whether the element is in the list and return the appropriate tuple based on the presence and position of the element.",
    "no_parent": true,
    "dependency_used": false
}