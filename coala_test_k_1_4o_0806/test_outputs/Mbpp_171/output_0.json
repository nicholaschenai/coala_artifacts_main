{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert perimeter_pentagon(5) == 25\n\nTests failed:\nNone",
    "code": "\ndef perimeter_pentagon(side_length: int) -> int:\n    # A regular pentagon has 5 equal sides.\n    # The perimeter is calculated by multiplying the length of one side by 5.\n    return side_length * 5\n",
    "full_code": "\ndef perimeter_pentagon(side_length: int) -> int:\n    # A regular pentagon has 5 equal sides.\n    # The perimeter is calculated by multiplying the length of one side by 5.\n    return side_length * 5\n",
    "reward": true,
    "program_code": "\ndef perimeter_pentagon(side_length: int) -> int:\n    # A regular pentagon has 5 equal sides.\n    # The perimeter is calculated by multiplying the length of one side by 5.\n    return side_length * 5\n",
    "program_name": "perimeter_pentagon",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to write a function that calculates the perimeter of a regular pentagon given the length of one of its sides.\n\n2. **Conceptualize a solution in plain English:**\n\n   A regular pentagon has five equal sides. To find the perimeter, we simply multiply the length of one side by five. This will give us the total length around the pentagon.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   function perimeter_pentagon(side_length):\n       return side_length * 5\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef perimeter_pentagon(side_length: int) -> int:\n    # A regular pentagon has 5 equal sides.\n    # The perimeter is calculated by multiplying the length of one side by 5.\n    return side_length * 5\n```\n\nThis function takes the length of one side of a regular pentagon as input and returns the perimeter by multiplying the side length by 5.",
    "no_parent": true,
    "dependency_used": false
}