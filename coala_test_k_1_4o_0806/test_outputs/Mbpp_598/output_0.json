{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert armstrong_number(153)==True\n\nTests failed:\nNone",
    "code": "\ndef armstrong_number(n: int) -> bool:\n    # Convert the number to a string to iterate over digits\n    digits = str(n)\n    # Calculate the number of digits\n    num_digits = len(digits)\n    # Initialize the sum of powered digits\n    sum_of_powers = 0\n    # Iterate over each digit\n    for digit in digits:\n        # Convert digit to integer and raise to the power of num_digits\n        sum_of_powers += int(digit) ** num_digits\n    # Check if the sum of powered digits equals the original number\n    return sum_of_powers == n\n",
    "full_code": "\ndef armstrong_number(n: int) -> bool:\n    # Convert the number to a string to iterate over digits\n    digits = str(n)\n    # Calculate the number of digits\n    num_digits = len(digits)\n    # Initialize the sum of powered digits\n    sum_of_powers = 0\n    # Iterate over each digit\n    for digit in digits:\n        # Convert digit to integer and raise to the power of num_digits\n        sum_of_powers += int(digit) ** num_digits\n    # Check if the sum of powered digits equals the original number\n    return sum_of_powers == n\n",
    "reward": true,
    "program_code": "\ndef armstrong_number(n: int) -> bool:\n    # Convert the number to a string to iterate over digits\n    digits = str(n)\n    # Calculate the number of digits\n    num_digits = len(digits)\n    # Initialize the sum of powered digits\n    sum_of_powers = 0\n    # Iterate over each digit\n    for digit in digits:\n        # Convert digit to integer and raise to the power of num_digits\n        sum_of_powers += int(digit) ** num_digits\n    # Check if the sum of powered digits equals the original number\n    return sum_of_powers == n\n",
    "program_name": "armstrong_number",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nWe need to determine if a given number is an Armstrong number. An Armstrong number (also known as a narcissistic number) is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n\n## Conceptual Solution\n\n1. **Understanding Armstrong Numbers**: For a number to be an Armstrong number, each digit of the number is raised to the power of the total number of digits, and the sum of these powered digits should equal the original number.\n\n2. **Steps to Determine if a Number is Armstrong**:\n   - Convert the number to a string to easily iterate over each digit.\n   - Count the number of digits in the number.\n   - For each digit, raise it to the power of the total number of digits.\n   - Sum all these powered digits.\n   - Compare the sum to the original number. If they are equal, the number is an Armstrong number.\n\n## Pseudocode\n\n1. Convert the number to a string to get the digits.\n2. Calculate the number of digits.\n3. Initialize a sum to zero.\n4. For each digit in the number:\n   - Convert the digit back to an integer.\n   - Raise it to the power of the number of digits.\n   - Add the result to the sum.\n5. Compare the sum to the original number.\n6. Return `True` if they are equal, otherwise return `False`.\n\n## Final Python Solution\n\n```python\ndef armstrong_number(n: int) -> bool:\n    # Convert the number to a string to iterate over digits\n    digits = str(n)\n    # Calculate the number of digits\n    num_digits = len(digits)\n    # Initialize the sum of powered digits\n    sum_of_powers = 0\n    # Iterate over each digit\n    for digit in digits:\n        # Convert digit to integer and raise to the power of num_digits\n        sum_of_powers += int(digit) ** num_digits\n    # Check if the sum of powered digits equals the original number\n    return sum_of_powers == n\n```\n\nThis solution checks if a given number is an Armstrong number by calculating the sum of its digits each raised to the power of the number of digits and comparing it to the original number.",
    "no_parent": true,
    "dependency_used": false
}