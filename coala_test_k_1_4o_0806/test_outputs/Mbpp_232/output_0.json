{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\nTests failed:\nNone",
    "code": "\ndef larg_nnum(lst, n):\n    # Sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n    # Return the first n elements from the sorted list\n    return sorted_lst[:n]\n",
    "full_code": "\ndef larg_nnum(lst, n):\n    # Sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n    # Return the first n elements from the sorted list\n    return sorted_lst[:n]\n",
    "reward": true,
    "program_code": "\ndef larg_nnum(lst, n):\n    # Sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n    # Return the first n elements from the sorted list\n    return sorted_lst[:n]\n",
    "program_name": "larg_nnum",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to create a function that takes a list of numbers and an integer `n`. The function should return a new list containing the `n` largest numbers from the original list.\n\n2. **Conceptualize a solution in plain English:**\n\n   To solve this problem, we can follow these steps:\n   - First, sort the list in descending order so that the largest numbers come first.\n   - Then, select the first `n` numbers from this sorted list, as these will be the largest numbers.\n   - Return this list of `n` largest numbers.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   function larg_nnum(lst, n):\n       sort lst in descending order\n       return the first n elements of lst\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef larg_nnum(lst, n):\n    # Sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n    # Return the first n elements from the sorted list\n    return sorted_lst[:n]\n```\n\nThis function sorts the input list in descending order and then slices the first `n` elements to get the `n` largest numbers. The use of Python's built-in `sorted` function with the `reverse=True` parameter allows us to efficiently sort the list in descending order.",
    "no_parent": true,
    "dependency_used": false
}