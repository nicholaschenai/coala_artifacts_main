{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nNone\n\nTests failed:\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25] # output: [10.5, 44.0, 58.0, 2.5]",
    "code": "\ndef average_tuple(tuples):\n    # Initialize an empty list to store the averages\n    averages = []\n    \n    # Iterate over each tuple in the input\n    for t in tuples:\n        # Calculate the sum of the elements in the tuple\n        total = sum(t)\n        # Calculate the average by dividing the sum by the number of elements\n        avg = total / len(t)\n        # Append the average to the list\n        averages.append(avg)\n    \n    # Return the list of averages\n    return averages\n",
    "full_code": "\ndef average_tuple(tuples):\n    # Initialize an empty list to store the averages\n    averages = []\n    \n    # Iterate over each tuple in the input\n    for t in tuples:\n        # Calculate the sum of the elements in the tuple\n        total = sum(t)\n        # Calculate the average by dividing the sum by the number of elements\n        avg = total / len(t)\n        # Append the average to the list\n        averages.append(avg)\n    \n    # Return the list of averages\n    return averages\n",
    "reward": false,
    "program_code": "\ndef average_tuple(tuples):\n    # Initialize an empty list to store the averages\n    averages = []\n    \n    # Iterate over each tuple in the input\n    for t in tuples:\n        # Calculate the sum of the elements in the tuple\n        total = sum(t)\n        # Calculate the average by dividing the sum by the number of elements\n        avg = total / len(t)\n        # Append the average to the list\n        averages.append(avg)\n    \n    # Return the list of averages\n    return averages\n",
    "program_name": "average_tuple",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nWe need to write a function that takes a tuple of tuples, where each inner tuple contains numerical values, and returns a list containing the average of each inner tuple.\n\n## Conceptual Solution\n\n1. **Initialize an Empty List**: Start with an empty list to store the averages.\n2. **Iterate Over Each Tuple**: For each tuple in the input tuple of tuples:\n   - Calculate the sum of the elements in the tuple.\n   - Divide the sum by the number of elements to get the average.\n   - Append the average to the list.\n3. **Return the List**: After processing all tuples, return the list of averages.\n\n## Pseudocode\n\n```\nfunction average_tuple(tuples):\n    initialize an empty list called averages\n    for each tuple in tuples:\n        calculate the sum of the tuple\n        calculate the average by dividing the sum by the length of the tuple\n        append the average to the averages list\n    return the averages list\n```\n\n## Final Python Solution\n\n```python\ndef average_tuple(tuples):\n    # Initialize an empty list to store the averages\n    averages = []\n    \n    # Iterate over each tuple in the input\n    for t in tuples:\n        # Calculate the sum of the elements in the tuple\n        total = sum(t)\n        # Calculate the average by dividing the sum by the number of elements\n        avg = total / len(t)\n        # Append the average to the list\n        averages.append(avg)\n    \n    # Return the list of averages\n    return averages\n```",
    "no_parent": true,
    "dependency_used": false
}