{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\nTests failed:\nNone",
    "code": "\ndef move_zero(lst):\n    # Step 1: Initialize an empty list for non-zero elements\n    non_zero_elements = []\n    \n    # Step 2: Initialize a counter for zeroes\n    zero_count = 0\n    \n    # Step 3: Iterate through the list\n    for num in lst:\n        if num != 0:\n            # Collect non-zero elements\n            non_zero_elements.append(num)\n        else:\n            # Count zeroes\n            zero_count += 1\n    \n    # Step 4: Concatenate non-zero elements with zeroes\n    result = non_zero_elements + [0] * zero_count\n    \n    # Step 5: Return the result\n    return result\n",
    "full_code": "\ndef move_zero(lst):\n    # Step 1: Initialize an empty list for non-zero elements\n    non_zero_elements = []\n    \n    # Step 2: Initialize a counter for zeroes\n    zero_count = 0\n    \n    # Step 3: Iterate through the list\n    for num in lst:\n        if num != 0:\n            # Collect non-zero elements\n            non_zero_elements.append(num)\n        else:\n            # Count zeroes\n            zero_count += 1\n    \n    # Step 4: Concatenate non-zero elements with zeroes\n    result = non_zero_elements + [0] * zero_count\n    \n    # Step 5: Return the result\n    return result\n",
    "reward": true,
    "program_code": "\ndef move_zero(lst):\n    # Step 1: Initialize an empty list for non-zero elements\n    non_zero_elements = []\n    \n    # Step 2: Initialize a counter for zeroes\n    zero_count = 0\n    \n    # Step 3: Iterate through the list\n    for num in lst:\n        if num != 0:\n            # Collect non-zero elements\n            non_zero_elements.append(num)\n        else:\n            # Count zeroes\n            zero_count += 1\n    \n    # Step 4: Concatenate non-zero elements with zeroes\n    result = non_zero_elements + [0] * zero_count\n    \n    # Step 5: Return the result\n    return result\n",
    "program_name": "move_zero",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nWe need to write a Python function that takes a list of integers as input and moves all the zeroes in the list to the end, while maintaining the order of the non-zero elements.\n\n## Conceptual Solution\n\n1. **Identify Non-Zero Elements**: Traverse the list and collect all non-zero elements in the order they appear.\n2. **Count Zeroes**: Count the number of zeroes in the list.\n3. **Reconstruct the List**: Create a new list by appending the non-zero elements first, followed by the counted number of zeroes.\n\n## Pseudocode\n\n1. Initialize an empty list `non_zero_elements` to store non-zero elements.\n2. Initialize a counter `zero_count` to zero.\n3. Iterate through each element in the input list:\n   - If the element is non-zero, append it to `non_zero_elements`.\n   - If the element is zero, increment `zero_count`.\n4. Create the result list by concatenating `non_zero_elements` with a list of zeroes of length `zero_count`.\n5. Return the result list.\n\n## Final Python Solution\n\n```python\ndef move_zero(lst):\n    # Step 1: Initialize an empty list for non-zero elements\n    non_zero_elements = []\n    \n    # Step 2: Initialize a counter for zeroes\n    zero_count = 0\n    \n    # Step 3: Iterate through the list\n    for num in lst:\n        if num != 0:\n            # Collect non-zero elements\n            non_zero_elements.append(num)\n        else:\n            # Count zeroes\n            zero_count += 1\n    \n    # Step 4: Concatenate non-zero elements with zeroes\n    result = non_zero_elements + [0] * zero_count\n    \n    # Step 5: Return the result\n    return result\n```\n\nThis solution efficiently separates non-zero elements from zeroes and reconstructs the list as required.",
    "no_parent": true,
    "dependency_used": false
}