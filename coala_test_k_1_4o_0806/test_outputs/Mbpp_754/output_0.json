{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\nTests failed:\nNone",
    "code": "\ndef extract_index_list(l1, l2, l3):\n    # Initialize an empty list to store common elements\n    common_elements = []\n    \n    # Determine the minimum length of the three lists\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    # Iterate over the indices up to the minimum length\n    for i in range(min_length):\n        # Check if the elements at the current index are the same in all three lists\n        if l1[i] == l2[i] == l3[i]:\n            # If they are the same, append the element to the common_elements list\n            common_elements.append(l1[i])\n    \n    # Return the list of common elements\n    return common_elements\n",
    "full_code": "\ndef extract_index_list(l1, l2, l3):\n    # Initialize an empty list to store common elements\n    common_elements = []\n    \n    # Determine the minimum length of the three lists\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    # Iterate over the indices up to the minimum length\n    for i in range(min_length):\n        # Check if the elements at the current index are the same in all three lists\n        if l1[i] == l2[i] == l3[i]:\n            # If they are the same, append the element to the common_elements list\n            common_elements.append(l1[i])\n    \n    # Return the list of common elements\n    return common_elements\n",
    "reward": true,
    "program_code": "\ndef extract_index_list(l1, l2, l3):\n    # Initialize an empty list to store common elements\n    common_elements = []\n    \n    # Determine the minimum length of the three lists\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    # Iterate over the indices up to the minimum length\n    for i in range(min_length):\n        # Check if the elements at the current index are the same in all three lists\n        if l1[i] == l2[i] == l3[i]:\n            # If they are the same, append the element to the common_elements list\n            common_elements.append(l1[i])\n    \n    # Return the list of common elements\n    return common_elements\n",
    "program_name": "extract_index_list",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to find elements that are common across three lists, but with a specific condition: the elements must appear at the same index in all three lists. The function should return a list of these common elements.\n\n2. **Conceptualize a solution in plain English:**\n\n   - We will iterate through the indices of the lists.\n   - For each index, we will check if the elements at that index in all three lists are the same.\n   - If they are the same, we will add that element to our result list.\n   - Finally, we will return the list of common elements.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   Initialize an empty list called common_elements\n   Determine the minimum length of the three lists to avoid index out of range errors\n   For each index from 0 to the minimum length - 1:\n       If the elements at the current index in all three lists are equal:\n           Append the element to common_elements\n   Return common_elements\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef extract_index_list(l1, l2, l3):\n    # Initialize an empty list to store common elements\n    common_elements = []\n    \n    # Determine the minimum length of the three lists\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    # Iterate over the indices up to the minimum length\n    for i in range(min_length):\n        # Check if the elements at the current index are the same in all three lists\n        if l1[i] == l2[i] == l3[i]:\n            # If they are the same, append the element to the common_elements list\n            common_elements.append(l1[i])\n    \n    # Return the list of common elements\n    return common_elements\n```",
    "no_parent": true,
    "dependency_used": false
}