{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n\nTests failed:\nNone",
    "code": "\ndef check_min_heap(arr):\n    n = len(arr)\n    # Iterate over each parent node\n    for i in range((n // 2)):\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n        \n        # Check if the left child exists and violates the min-heap property\n        if left_child_index < n and arr[i] > arr[left_child_index]:\n            return False\n        \n        # Check if the right child exists and violates the min-heap property\n        if right_child_index < n and arr[i] > arr[right_child_index]:\n            return False\n    \n    # If no violations are found, the array is a min-heap\n    return True\n",
    "full_code": "\ndef check_min_heap(arr):\n    n = len(arr)\n    # Iterate over each parent node\n    for i in range((n // 2)):\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n        \n        # Check if the left child exists and violates the min-heap property\n        if left_child_index < n and arr[i] > arr[left_child_index]:\n            return False\n        \n        # Check if the right child exists and violates the min-heap property\n        if right_child_index < n and arr[i] > arr[right_child_index]:\n            return False\n    \n    # If no violations are found, the array is a min-heap\n    return True\n",
    "reward": true,
    "program_code": "\ndef check_min_heap(arr):\n    n = len(arr)\n    # Iterate over each parent node\n    for i in range((n // 2)):\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n        \n        # Check if the left child exists and violates the min-heap property\n        if left_child_index < n and arr[i] > arr[left_child_index]:\n            return False\n        \n        # Check if the right child exists and violates the min-heap property\n        if right_child_index < n and arr[i] > arr[right_child_index]:\n            return False\n    \n    # If no violations are found, the array is a min-heap\n    return True\n",
    "program_name": "check_min_heap",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to determine if a given list of integers represents a min-heap. A min-heap is a binary tree where each parent node is less than or equal to its child nodes. In an array representation of a min-heap, for any element at index `i`, the element should be less than or equal to the elements at indices `2*i + 1` and `2*i + 2` (if they exist).\n\n2. **Conceptualize a solution in plain English:**\n\n   To check if an array represents a min-heap, we need to iterate through each element of the array and verify that it is less than or equal to its children. We only need to check up to the parent of the last element that could have children, which is at index `(n//2) - 1` where `n` is the length of the array. If all parent nodes satisfy the min-heap property, then the array is a min-heap.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   function check_min_heap(arr):\n       n = length of arr\n       for i from 0 to (n//2) - 1:\n           left_child_index = 2*i + 1\n           right_child_index = 2*i + 2\n           \n           if left_child_index < n and arr[i] > arr[left_child_index]:\n               return False\n           \n           if right_child_index < n and arr[i] > arr[right_child_index]:\n               return False\n       \n       return True\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef check_min_heap(arr):\n    n = len(arr)\n    # Iterate over each parent node\n    for i in range((n // 2)):\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n        \n        # Check if the left child exists and violates the min-heap property\n        if left_child_index < n and arr[i] > arr[left_child_index]:\n            return False\n        \n        # Check if the right child exists and violates the min-heap property\n        if right_child_index < n and arr[i] > arr[right_child_index]:\n            return False\n    \n    # If no violations are found, the array is a min-heap\n    return True\n```\n\nThis code checks each parent node in the array to ensure it is less than or equal to its children, confirming the min-heap property. If any parent node violates this property, the function returns `False`. If all nodes satisfy the property, it returns `True`.",
    "no_parent": true,
    "dependency_used": false
}