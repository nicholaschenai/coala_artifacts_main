{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert capital_words_spaces(\"Python\") == 'Python'\n\nTests failed:\nNone",
    "code": "\ndef capital_words_spaces(s: str) -> str:\n    # Initialize an empty result string\n    result = \"\"\n    \n    # Iterate over each character in the string with its index\n    for i, char in enumerate(s):\n        # If the character is uppercase and it's not the first character\n        if char.isupper() and i != 0:\n            # Add a space before the character\n            result += \" \"\n        # Add the current character to the result\n        result += char\n    \n    # Return the final result string\n    return result\n",
    "full_code": "\ndef capital_words_spaces(s: str) -> str:\n    # Initialize an empty result string\n    result = \"\"\n    \n    # Iterate over each character in the string with its index\n    for i, char in enumerate(s):\n        # If the character is uppercase and it's not the first character\n        if char.isupper() and i != 0:\n            # Add a space before the character\n            result += \" \"\n        # Add the current character to the result\n        result += char\n    \n    # Return the final result string\n    return result\n",
    "reward": true,
    "program_code": "\ndef capital_words_spaces(s: str) -> str:\n    # Initialize an empty result string\n    result = \"\"\n    \n    # Iterate over each character in the string with its index\n    for i, char in enumerate(s):\n        # If the character is uppercase and it's not the first character\n        if char.isupper() and i != 0:\n            # Add a space before the character\n            result += \" \"\n        # Add the current character to the result\n        result += char\n    \n    # Return the final result string\n    return result\n",
    "program_name": "capital_words_spaces",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to write a function that takes a string as input and inserts spaces before each word that starts with a capital letter. If the string is a single word with a capital letter, it should remain unchanged.\n\n2. **Conceptualize a solution in plain English:**\n\n   - Start with an empty result string.\n   - Iterate over each character in the input string.\n   - If a character is a capital letter and it is not the first character, add a space before it in the result string.\n   - Append the current character to the result string.\n   - Return the result string.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   function capital_words_spaces(s):\n       initialize result as an empty string\n       for each character in s with index i:\n           if character is uppercase and i is not 0:\n               append a space to result\n           append character to result\n       return result\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef capital_words_spaces(s: str) -> str:\n    # Initialize an empty result string\n    result = \"\"\n    \n    # Iterate over each character in the string with its index\n    for i, char in enumerate(s):\n        # If the character is uppercase and it's not the first character\n        if char.isupper() and i != 0:\n            # Add a space before the character\n            result += \" \"\n        # Add the current character to the result\n        result += char\n    \n    # Return the final result string\n    return result\n```",
    "no_parent": true,
    "dependency_used": false
}