{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\nTests failed:\nNone",
    "code": "\ndef sort_matrix(matrix):\n    # Create a list of tuples where each tuple is (sum of row, row)\n    row_sums = [(sum(row), row) for row in matrix]\n    \n    # Sort the list of tuples based on the sum of the row\n    row_sums.sort()\n    \n    # Extract the rows from the sorted list of tuples\n    sorted_matrix = [row for _, row in row_sums]\n    \n    # Return the sorted list of rows\n    return sorted_matrix\n",
    "full_code": "\ndef sort_matrix(matrix):\n    # Create a list of tuples where each tuple is (sum of row, row)\n    row_sums = [(sum(row), row) for row in matrix]\n    \n    # Sort the list of tuples based on the sum of the row\n    row_sums.sort()\n    \n    # Extract the rows from the sorted list of tuples\n    sorted_matrix = [row for _, row in row_sums]\n    \n    # Return the sorted list of rows\n    return sorted_matrix\n",
    "reward": true,
    "program_code": "\ndef sort_matrix(matrix):\n    # Create a list of tuples where each tuple is (sum of row, row)\n    row_sums = [(sum(row), row) for row in matrix]\n    \n    # Sort the list of tuples based on the sum of the row\n    row_sums.sort()\n    \n    # Extract the rows from the sorted list of tuples\n    sorted_matrix = [row for _, row in row_sums]\n    \n    # Return the sorted list of rows\n    return sorted_matrix\n",
    "program_name": "sort_matrix",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to write a function that takes a matrix (a list of lists) as input and sorts the rows of the matrix based on the sum of the elements in each row. The rows should be ordered in ascending order of their sums.\n\n2. **Conceptualize a solution in plain English:**\n\n   To solve this problem, we can follow these steps:\n   - Calculate the sum of each row in the matrix.\n   - Pair each row with its corresponding sum.\n   - Sort these pairs based on the sum.\n   - Extract the rows from the sorted pairs to form the sorted matrix.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   function sort_matrix(matrix):\n       create a list of tuples where each tuple contains (sum of row, row)\n       sort the list of tuples based on the sum of row\n       extract the rows from the sorted list of tuples\n       return the sorted list of rows\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef sort_matrix(matrix):\n    # Create a list of tuples where each tuple is (sum of row, row)\n    row_sums = [(sum(row), row) for row in matrix]\n    \n    # Sort the list of tuples based on the sum of the row\n    row_sums.sort()\n    \n    # Extract the rows from the sorted list of tuples\n    sorted_matrix = [row for _, row in row_sums]\n    \n    # Return the sorted list of rows\n    return sorted_matrix\n```",
    "no_parent": true,
    "dependency_used": false
}