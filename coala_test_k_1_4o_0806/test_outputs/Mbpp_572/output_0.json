{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\nTests failed:\nNone",
    "code": "\ndef two_unique_nums(nums):\n    # Create a dictionary to count occurrences of each number\n    count_dict = {}\n    \n    # Count each number in the list\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Create a list to store numbers that appear exactly once\n    unique_nums = []\n    \n    # Add numbers with a count of 1 to the unique_nums list\n    for num, count in count_dict.items():\n        if count == 1:\n            unique_nums.append(num)\n    \n    # Return the list of unique numbers\n    return unique_nums\n",
    "full_code": "\ndef two_unique_nums(nums):\n    # Create a dictionary to count occurrences of each number\n    count_dict = {}\n    \n    # Count each number in the list\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Create a list to store numbers that appear exactly once\n    unique_nums = []\n    \n    # Add numbers with a count of 1 to the unique_nums list\n    for num, count in count_dict.items():\n        if count == 1:\n            unique_nums.append(num)\n    \n    # Return the list of unique numbers\n    return unique_nums\n",
    "reward": true,
    "program_code": "\ndef two_unique_nums(nums):\n    # Create a dictionary to count occurrences of each number\n    count_dict = {}\n    \n    # Count each number in the list\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Create a list to store numbers that appear exactly once\n    unique_nums = []\n    \n    # Add numbers with a count of 1 to the unique_nums list\n    for num, count in count_dict.items():\n        if count == 1:\n            unique_nums.append(num)\n    \n    # Return the list of unique numbers\n    return unique_nums\n",
    "program_name": "two_unique_nums",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to create a function that takes a list of numbers and returns a new list containing only the numbers that appear exactly once in the original list. In other words, we need to remove all duplicate numbers from the list.\n\n2. **Conceptualize a solution in plain English:**\n\n   To solve this problem, we can use a dictionary to count the occurrences of each number in the list. We will iterate through the list and update the count for each number in the dictionary. After counting, we will create a new list that includes only the numbers that have a count of one in the dictionary. This new list will be our result.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   Define function two_unique_nums(nums):\n       Create an empty dictionary called count_dict\n       For each number in nums:\n           If the number is in count_dict:\n               Increment its count by 1\n           Else:\n               Add the number to count_dict with a count of 1\n       Create an empty list called unique_nums\n       For each number, count in count_dict:\n           If count is 1:\n               Append the number to unique_nums\n       Return unique_nums\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef two_unique_nums(nums):\n    # Create a dictionary to count occurrences of each number\n    count_dict = {}\n    \n    # Count each number in the list\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Create a list to store numbers that appear exactly once\n    unique_nums = []\n    \n    # Add numbers with a count of 1 to the unique_nums list\n    for num, count in count_dict.items():\n        if count == 1:\n            unique_nums.append(num)\n    \n    # Return the list of unique numbers\n    return unique_nums\n```",
    "no_parent": true,
    "dependency_used": false
}