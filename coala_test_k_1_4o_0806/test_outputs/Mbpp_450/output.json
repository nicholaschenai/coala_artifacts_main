{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\nTests failed:\nNone",
    "code": "\ndef extract_string(strings: list, size: int) -> list:\n    # Initialize an empty list to store strings of the specified length\n    result = []\n    \n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the length of the string matches the specified size\n        if len(string) == size:\n            # Add the string to the result list\n            result.append(string)\n    \n    # Return the list of strings that have the specified length\n    return result\n",
    "full_code": "\ndef extract_string(strings: list, size: int) -> list:\n    # Initialize an empty list to store strings of the specified length\n    result = []\n    \n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the length of the string matches the specified size\n        if len(string) == size:\n            # Add the string to the result list\n            result.append(string)\n    \n    # Return the list of strings that have the specified length\n    return result\n",
    "reward": true,
    "program_code": "\ndef extract_string(strings: list, size: int) -> list:\n    # Initialize an empty list to store strings of the specified length\n    result = []\n    \n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the length of the string matches the specified size\n        if len(string) == size:\n            # Add the string to the result list\n            result.append(string)\n    \n    # Return the list of strings that have the specified length\n    return result\n",
    "program_name": "extract_string",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to create a function that takes a list of strings and an integer as input. The function should return a new list containing only the strings from the input list that have a length equal to the given integer.\n\n2. **Conceptualize a solution in plain English:**\n\n   To solve this problem, we will iterate over each string in the input list. For each string, we will check its length. If the length of the string matches the specified integer, we will add it to a new list. Finally, we will return this new list containing all the strings that have the specified length.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   Define a function named extract_string that takes a list of strings and an integer as parameters.\n   Initialize an empty list to store strings of the specified length.\n   For each string in the input list:\n       If the length of the string is equal to the specified integer:\n           Add the string to the new list.\n   Return the new list.\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef extract_string(strings: list, size: int) -> list:\n    # Initialize an empty list to store strings of the specified length\n    result = []\n    \n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the length of the string matches the specified size\n        if len(string) == size:\n            # Add the string to the result list\n            result.append(string)\n    \n    # Return the list of strings that have the specified length\n    return result\n```",
    "no_parent": true,
    "dependency_used": false
}