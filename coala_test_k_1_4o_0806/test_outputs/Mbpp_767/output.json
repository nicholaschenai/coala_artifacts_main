{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert get_pairs_count([1,1,1,1],2) == 6\n\nTests failed:\nNone",
    "code": "\ndef get_pairs_count(numbers, target_sum):\n    # Dictionary to store the frequency of each number\n    frequency = {}\n    # Variable to count the number of pairs\n    pair_count = 0\n\n    # Iterate over each number in the list\n    for number in numbers:\n        # Calculate the complement that would sum with the current number to reach the target sum\n        complement = target_sum - number\n        \n        # If the complement is already in the frequency dictionary, it means we have found pairs\n        if complement in frequency:\n            # Add the frequency of the complement to the pair count\n            pair_count += frequency[complement]\n        \n        # Update the frequency dictionary with the current number\n        if number in frequency:\n            frequency[number] += 1\n        else:\n            frequency[number] = 1\n\n    # Return the total count of pairs\n    return pair_count\n",
    "full_code": "\ndef get_pairs_count(numbers, target_sum):\n    # Dictionary to store the frequency of each number\n    frequency = {}\n    # Variable to count the number of pairs\n    pair_count = 0\n\n    # Iterate over each number in the list\n    for number in numbers:\n        # Calculate the complement that would sum with the current number to reach the target sum\n        complement = target_sum - number\n        \n        # If the complement is already in the frequency dictionary, it means we have found pairs\n        if complement in frequency:\n            # Add the frequency of the complement to the pair count\n            pair_count += frequency[complement]\n        \n        # Update the frequency dictionary with the current number\n        if number in frequency:\n            frequency[number] += 1\n        else:\n            frequency[number] = 1\n\n    # Return the total count of pairs\n    return pair_count\n",
    "reward": true,
    "program_code": "\ndef get_pairs_count(numbers, target_sum):\n    # Dictionary to store the frequency of each number\n    frequency = {}\n    # Variable to count the number of pairs\n    pair_count = 0\n\n    # Iterate over each number in the list\n    for number in numbers:\n        # Calculate the complement that would sum with the current number to reach the target sum\n        complement = target_sum - number\n        \n        # If the complement is already in the frequency dictionary, it means we have found pairs\n        if complement in frequency:\n            # Add the frequency of the complement to the pair count\n            pair_count += frequency[complement]\n        \n        # Update the frequency dictionary with the current number\n        if number in frequency:\n            frequency[number] += 1\n        else:\n            frequency[number] = 1\n\n    # Return the total count of pairs\n    return pair_count\n",
    "program_name": "get_pairs_count",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to find the number of pairs in a list of numbers where the sum of each pair equals a given target sum. The function should return the count of such pairs.\n\n2. **Conceptualize a solution in plain English:**\n\n   To solve this problem, we can use a dictionary to keep track of the frequency of each number we encounter as we iterate through the list. For each number in the list, we calculate the complement that would sum with the current number to reach the target sum. If this complement has been seen before (i.e., it exists in our dictionary), then we have found a pair. We add the frequency of this complement to our count of pairs. After checking for pairs, we update the dictionary to include the current number.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   Initialize a dictionary to keep track of number frequencies\n   Initialize a variable to count pairs, set it to 0\n\n   For each number in the list:\n       Calculate the complement needed to reach the target sum\n       If the complement is in the dictionary:\n           Add the frequency of the complement to the pair count\n       Update the dictionary with the current number's frequency\n\n   Return the pair count\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef get_pairs_count(numbers, target_sum):\n    # Dictionary to store the frequency of each number\n    frequency = {}\n    # Variable to count the number of pairs\n    pair_count = 0\n\n    # Iterate over each number in the list\n    for number in numbers:\n        # Calculate the complement that would sum with the current number to reach the target sum\n        complement = target_sum - number\n        \n        # If the complement is already in the frequency dictionary, it means we have found pairs\n        if complement in frequency:\n            # Add the frequency of the complement to the pair count\n            pair_count += frequency[complement]\n        \n        # Update the frequency dictionary with the current number\n        if number in frequency:\n            frequency[number] += 1\n        else:\n            frequency[number] = 1\n\n    # Return the total count of pairs\n    return pair_count\n```\n\nThis solution efficiently counts the number of pairs with a sum equal to the target by using a dictionary to track the frequency of numbers encountered so far. This approach ensures that we only need to iterate through the list once, resulting in a time complexity of O(n).",
    "no_parent": true,
    "dependency_used": false
}