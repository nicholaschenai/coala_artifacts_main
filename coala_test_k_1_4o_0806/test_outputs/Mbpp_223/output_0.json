{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\nTests failed:\nNone",
    "code": "\ndef find_first_occurrence(arr, n, x):\n    low, high = 0, n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        # Check if mid is the first occurrence of x\n        if arr[mid] == x and (mid == 0 or arr[mid - 1] != x):\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\ndef is_majority(arr, n, x):\n    # Find the first occurrence of x\n    first_occurrence = find_first_occurrence(arr, n, x)\n    \n    # If x is not present, it cannot be the majority element\n    if first_occurrence == -1:\n        return False\n    \n    # Check if x is the majority element\n    if first_occurrence + n // 2 < n and arr[first_occurrence + n // 2] == x:\n        return True\n    else:\n        return False\n",
    "full_code": "\ndef find_first_occurrence(arr, n, x):\n    low, high = 0, n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        # Check if mid is the first occurrence of x\n        if arr[mid] == x and (mid == 0 or arr[mid - 1] != x):\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\ndef is_majority(arr, n, x):\n    # Find the first occurrence of x\n    first_occurrence = find_first_occurrence(arr, n, x)\n    \n    # If x is not present, it cannot be the majority element\n    if first_occurrence == -1:\n        return False\n    \n    # Check if x is the majority element\n    if first_occurrence + n // 2 < n and arr[first_occurrence + n // 2] == x:\n        return True\n    else:\n        return False\n",
    "reward": true,
    "program_code": "\ndef find_first_occurrence(arr, n, x):\n    low, high = 0, n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        # Check if mid is the first occurrence of x\n        if arr[mid] == x and (mid == 0 or arr[mid - 1] != x):\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\ndef is_majority(arr, n, x):\n    # Find the first occurrence of x\n    first_occurrence = find_first_occurrence(arr, n, x)\n    \n    # If x is not present, it cannot be the majority element\n    if first_occurrence == -1:\n        return False\n    \n    # Check if x is the majority element\n    if first_occurrence + n // 2 < n and arr[first_occurrence + n // 2] == x:\n        return True\n    else:\n        return False\n",
    "program_name": "is_majority",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to determine if a given element is the majority element in a sorted array. A majority element is defined as an element that appears more than half the time in the array. We are given a sorted array, its length, and the element to check.\n\n2. **Conceptualize a solution in plain English:**\n\n   Since the array is sorted, if an element is the majority element, it must appear consecutively in the array. We can use binary search to find the first occurrence of the element. Once we have the first occurrence, we can check if the element appears more than `n/2` times by checking the element at the index `first_occurrence + n//2`. If this element is the same as the given element, then it is the majority element.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   Define a function is_majority(arr, n, x):\n       Find the first occurrence of x using binary search:\n           Initialize low to 0 and high to n-1\n           While low is less than or equal to high:\n               Calculate mid as (low + high) // 2\n               If arr[mid] is equal to x and (mid is 0 or arr[mid-1] is not x):\n                   Return mid\n               Else if arr[mid] is less than x:\n                   Set low to mid + 1\n               Else:\n                   Set high to mid - 1\n           Return -1 (if x is not found)\n       \n       Get the first occurrence index of x\n       If first occurrence is -1, return False\n       If first occurrence + n//2 is less than n and arr[first occurrence + n//2] is x:\n           Return True\n       Else:\n           Return False\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef find_first_occurrence(arr, n, x):\n    low, high = 0, n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        # Check if mid is the first occurrence of x\n        if arr[mid] == x and (mid == 0 or arr[mid - 1] != x):\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\ndef is_majority(arr, n, x):\n    # Find the first occurrence of x\n    first_occurrence = find_first_occurrence(arr, n, x)\n    \n    # If x is not present, it cannot be the majority element\n    if first_occurrence == -1:\n        return False\n    \n    # Check if x is the majority element\n    if first_occurrence + n // 2 < n and arr[first_occurrence + n // 2] == x:\n        return True\n    else:\n        return False\n```\n\nThis solution efficiently checks if the given element is the majority element by leveraging the sorted nature of the array and using binary search to find the first occurrence of the element.",
    "no_parent": true,
    "dependency_used": false
}