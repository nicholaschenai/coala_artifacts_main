{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\nTests failed:\nNone",
    "code": "\ndef magic_square_test(matrix):\n    n = len(matrix)\n    if n == 0:\n        return False\n    \n    # Calculate the target sum using the first row\n    target_sum = sum(matrix[0])\n    \n    # Check each row sum\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check each column sum\n    for col in range(n):\n        column_sum = 0\n        for row in matrix:\n            column_sum += row[col]\n        if column_sum != target_sum:\n            return False\n    \n    # Check the sum of the first diagonal\n    diagonal1_sum = 0\n    for i in range(n):\n        diagonal1_sum += matrix[i][i]\n    if diagonal1_sum != target_sum:\n        return False\n    \n    # Check the sum of the second diagonal\n    diagonal2_sum = 0\n    for i in range(n):\n        diagonal2_sum += matrix[i][n - 1 - i]\n    if diagonal2_sum != target_sum:\n        return False\n    \n    # If all checks passed, it is a magic square\n    return True\n",
    "full_code": "\ndef magic_square_test(matrix):\n    n = len(matrix)\n    if n == 0:\n        return False\n    \n    # Calculate the target sum using the first row\n    target_sum = sum(matrix[0])\n    \n    # Check each row sum\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check each column sum\n    for col in range(n):\n        column_sum = 0\n        for row in matrix:\n            column_sum += row[col]\n        if column_sum != target_sum:\n            return False\n    \n    # Check the sum of the first diagonal\n    diagonal1_sum = 0\n    for i in range(n):\n        diagonal1_sum += matrix[i][i]\n    if diagonal1_sum != target_sum:\n        return False\n    \n    # Check the sum of the second diagonal\n    diagonal2_sum = 0\n    for i in range(n):\n        diagonal2_sum += matrix[i][n - 1 - i]\n    if diagonal2_sum != target_sum:\n        return False\n    \n    # If all checks passed, it is a magic square\n    return True\n",
    "reward": true,
    "program_code": "\ndef magic_square_test(matrix):\n    n = len(matrix)\n    if n == 0:\n        return False\n    \n    # Calculate the target sum using the first row\n    target_sum = sum(matrix[0])\n    \n    # Check each row sum\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check each column sum\n    for col in range(n):\n        column_sum = 0\n        for row in matrix:\n            column_sum += row[col]\n        if column_sum != target_sum:\n            return False\n    \n    # Check the sum of the first diagonal\n    diagonal1_sum = 0\n    for i in range(n):\n        diagonal1_sum += matrix[i][i]\n    if diagonal1_sum != target_sum:\n        return False\n    \n    # Check the sum of the second diagonal\n    diagonal2_sum = 0\n    for i in range(n):\n        diagonal2_sum += matrix[i][n - 1 - i]\n    if diagonal2_sum != target_sum:\n        return False\n    \n    # If all checks passed, it is a magic square\n    return True\n",
    "program_name": "magic_square_test",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to determine if a given square matrix is a magic square. A magic square is a grid of numbers where the sums of numbers in each row, each column, and both main diagonals are the same.\n\n2. **Conceptualize a solution in plain English:**\n\n   To check if a matrix is a magic square, we need to:\n   - Calculate the sum of the first row to use as the target sum.\n   - Verify that each row's sum equals the target sum.\n   - Verify that each column's sum equals the target sum.\n   - Verify that the sums of the two main diagonals equal the target sum.\n   If all these conditions are met, the matrix is a magic square.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   function is_magic_square(matrix):\n       n = length of matrix\n       if n is 0, return False\n       \n       target_sum = sum of the first row\n       \n       for each row in matrix:\n           if sum of row is not equal to target_sum, return False\n       \n       for each column index from 0 to n-1:\n           column_sum = 0\n           for each row in matrix:\n               add the element at column index to column_sum\n           if column_sum is not equal to target_sum, return False\n       \n       diagonal1_sum = 0\n       diagonal2_sum = 0\n       for index from 0 to n-1:\n           add matrix[index][index] to diagonal1_sum\n           add matrix[index][n-1-index] to diagonal2_sum\n       \n       if diagonal1_sum is not equal to target_sum, return False\n       if diagonal2_sum is not equal to target_sum, return False\n       \n       return True\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef magic_square_test(matrix):\n    n = len(matrix)\n    if n == 0:\n        return False\n    \n    # Calculate the target sum using the first row\n    target_sum = sum(matrix[0])\n    \n    # Check each row sum\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check each column sum\n    for col in range(n):\n        column_sum = 0\n        for row in matrix:\n            column_sum += row[col]\n        if column_sum != target_sum:\n            return False\n    \n    # Check the sum of the first diagonal\n    diagonal1_sum = 0\n    for i in range(n):\n        diagonal1_sum += matrix[i][i]\n    if diagonal1_sum != target_sum:\n        return False\n    \n    # Check the sum of the second diagonal\n    diagonal2_sum = 0\n    for i in range(n):\n        diagonal2_sum += matrix[i][n - 1 - i]\n    if diagonal2_sum != target_sum:\n        return False\n    \n    # If all checks passed, it is a magic square\n    return True\n```",
    "no_parent": true,
    "dependency_used": false
}