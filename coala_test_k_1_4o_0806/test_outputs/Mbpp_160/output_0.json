{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nNone\n\nTests failed:\nassert find_solution(2, 3, 7) == (2, 1) # output: (-7, 7)",
    "code": "\ndef extended_gcd(a, b):\n    # Base case: if b is 0, gcd is a, and coefficients are (1, 0)\n    if b == 0:\n        return (a, 1, 0)\n    else:\n        # Recursively apply the extended Euclidean algorithm\n        gcd, x1, y1 = extended_gcd(b, a % b)\n        # Update x and y using results from recursion\n        x = y1\n        y = x1 - (a // b) * y1\n        return (gcd, x, y)\n\ndef find_solution(a, b, n):\n    # Use the extended Euclidean algorithm to find gcd and coefficients\n    gcd, x0, y0 = extended_gcd(a, b)\n    # Check if n is divisible by gcd, if not, no solution exists\n    if n % gcd != 0:\n        return None\n    # Scale the solution to match the original equation\n    scale = n // gcd\n    x = x0 * scale\n    y = y0 * scale\n    return (x, y)\n",
    "full_code": "\ndef extended_gcd(a, b):\n    # Base case: if b is 0, gcd is a, and coefficients are (1, 0)\n    if b == 0:\n        return (a, 1, 0)\n    else:\n        # Recursively apply the extended Euclidean algorithm\n        gcd, x1, y1 = extended_gcd(b, a % b)\n        # Update x and y using results from recursion\n        x = y1\n        y = x1 - (a // b) * y1\n        return (gcd, x, y)\n\ndef find_solution(a, b, n):\n    # Use the extended Euclidean algorithm to find gcd and coefficients\n    gcd, x0, y0 = extended_gcd(a, b)\n    # Check if n is divisible by gcd, if not, no solution exists\n    if n % gcd != 0:\n        return None\n    # Scale the solution to match the original equation\n    scale = n // gcd\n    x = x0 * scale\n    y = y0 * scale\n    return (x, y)\n",
    "reward": false,
    "program_code": "\ndef extended_gcd(a, b):\n    # Base case: if b is 0, gcd is a, and coefficients are (1, 0)\n    if b == 0:\n        return (a, 1, 0)\n    else:\n        # Recursively apply the extended Euclidean algorithm\n        gcd, x1, y1 = extended_gcd(b, a % b)\n        # Update x and y using results from recursion\n        x = y1\n        y = x1 - (a // b) * y1\n        return (gcd, x, y)\n\ndef find_solution(a, b, n):\n    # Use the extended Euclidean algorithm to find gcd and coefficients\n    gcd, x0, y0 = extended_gcd(a, b)\n    # Check if n is divisible by gcd, if not, no solution exists\n    if n % gcd != 0:\n        return None\n    # Scale the solution to match the original equation\n    scale = n // gcd\n    x = x0 * scale\n    y = y0 * scale\n    return (x, y)\n",
    "program_name": "find_solution",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We need to find two integers, `x` and `y`, such that when multiplied by given integers `a` and `b` respectively, their sum equals another given integer `n`. If such integers `x` and `y` exist, we return them as a tuple `(x, y)`. If no such integers exist, we return `None`.\n\n2. **Conceptualize a solution in plain English:**\n\n   This problem is a classic example of a linear Diophantine equation of the form `ax + by = n`. A solution exists if and only if the greatest common divisor (GCD) of `a` and `b` divides `n`. We can use the Extended Euclidean Algorithm to find one particular solution `(x0, y0)` to the equation `ax + by = gcd(a, b)`. If `gcd(a, b)` divides `n`, we can scale this solution by `n / gcd(a, b)` to get a solution to the original equation.\n\n3. **Write a pseudocode solution:**\n\n   ```\n   function extended_gcd(a, b):\n       if b == 0:\n           return (a, 1, 0)\n       else:\n           gcd, x1, y1 = extended_gcd(b, a % b)\n           x = y1\n           y = x1 - (a // b) * y1\n           return (gcd, x, y)\n\n   function find_solution(a, b, n):\n       gcd, x0, y0 = extended_gcd(a, b)\n       if n % gcd != 0:\n           return None\n       scale = n // gcd\n       x = x0 * scale\n       y = y0 * scale\n       return (x, y)\n   ```\n\n4. **Output the final Python 3 solution with comments:**\n\n```python\ndef extended_gcd(a, b):\n    # Base case: if b is 0, gcd is a, and coefficients are (1, 0)\n    if b == 0:\n        return (a, 1, 0)\n    else:\n        # Recursively apply the extended Euclidean algorithm\n        gcd, x1, y1 = extended_gcd(b, a % b)\n        # Update x and y using results from recursion\n        x = y1\n        y = x1 - (a // b) * y1\n        return (gcd, x, y)\n\ndef find_solution(a, b, n):\n    # Use the extended Euclidean algorithm to find gcd and coefficients\n    gcd, x0, y0 = extended_gcd(a, b)\n    # Check if n is divisible by gcd, if not, no solution exists\n    if n % gcd != 0:\n        return None\n    # Scale the solution to match the original equation\n    scale = n // gcd\n    x = x0 * scale\n    y = y0 * scale\n    return (x, y)\n```\n\nThis code uses the Extended Euclidean Algorithm to find a solution to the linear Diophantine equation `ax + by = n`, if it exists. If `n` is not divisible by the GCD of `a` and `b`, it returns `None`, indicating no solution exists. Otherwise, it scales the solution to satisfy the equation.",
    "no_parent": true,
    "dependency_used": false
}