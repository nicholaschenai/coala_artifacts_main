{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\nNone\n\nTests failed:\n Input: ['2', '1', '-1', '2', '1 2'] Expected output: NO\nYES # Execution output: None # Runtime error or time limit exceeded error",
    "code": "\ndef is_good_sequence_possible(T, test_cases):\n    for test_case in test_cases:\n        N = test_case[0]\n        A = test_case[1]\n        \n        sum_A = sum(A)\n        sum_indices = N * (N - 1) // 2  # Sum of first N-1 natural numbers\n        \n        if sum_A % sum_indices == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nT = int(data[0])\nindex = 1\ntest_cases = []\nfor _ in range(T):\n    N = int(data[index])\n    A = list(map(int, data[index + 1:index + 1 + N]))\n    test_cases.append((N, A))\n    index += N + 1\n\nis_good_sequence_possible(T, test_cases)\n",
    "full_code": "\ndef is_good_sequence_possible(T, test_cases):\n    for test_case in test_cases:\n        N = test_case[0]\n        A = test_case[1]\n        \n        sum_A = sum(A)\n        sum_indices = N * (N - 1) // 2  # Sum of first N-1 natural numbers\n        \n        if sum_A % sum_indices == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nT = int(data[0])\nindex = 1\ntest_cases = []\nfor _ in range(T):\n    N = int(data[index])\n    A = list(map(int, data[index + 1:index + 1 + N]))\n    test_cases.append((N, A))\n    index += N + 1\n\nis_good_sequence_possible(T, test_cases)\n",
    "reward": false,
    "program_code": "\ndef is_good_sequence_possible(T, test_cases):\n    for test_case in test_cases:\n        N = test_case[0]\n        A = test_case[1]\n        \n        sum_A = sum(A)\n        sum_indices = N * (N - 1) // 2  # Sum of first N-1 natural numbers\n        \n        if sum_A % sum_indices == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nT = int(data[0])\nindex = 1\ntest_cases = []\nfor _ in range(T):\n    N = int(data[index])\n    A = list(map(int, data[index + 1:index + 1 + N]))\n    test_cases.append((N, A))\n    index += N + 1\n\nis_good_sequence_possible(T, test_cases)\n",
    "program_name": "is_good_sequence_possible",
    "dependencies": [],
    "raw_msg": "### Problem Restatement\n\nWe have a sequence of integers, and we want to determine if it's possible to make the sum of the sequence equal to zero by performing a series of operations. In each operation, we can choose an index `i` and decrease the element at that index by `i`. We need to determine if it's possible to make the sequence \"good\" (i.e., sum to zero) for multiple test cases.\n\n### Conceptual Solution\n\n1. **Understanding the Operation**: For each element `A[i]` in the sequence, we can decrease it by `i` any number of times. This means we can effectively reduce `A[i]` by any multiple of `i`.\n\n2. **Key Insight**: The operation allows us to adjust each element by multiples of its index. Therefore, the sum of the sequence can be adjusted by any linear combination of the indices.\n\n3. **Feasibility Check**: To determine if the sequence can be made to sum to zero, we need to check if the sum of the sequence is a multiple of the sum of the indices. If it is, then it's possible to adjust the sequence to make the sum zero.\n\n4. **Implementation Steps**:\n   - For each test case, calculate the sum of the sequence.\n   - Calculate the sum of the indices (which is a known formula for the sum of the first `N` natural numbers).\n   - Check if the sum of the sequence is a multiple of the sum of the indices.\n\n### Pseudocode\n\n```\nfunction is_good_sequence_possible(T, test_cases):\n    for each test_case in test_cases:\n        N = test_case[0]\n        A = test_case[1]\n        \n        sum_A = sum(A)\n        sum_indices = N * (N - 1) / 2  # Sum of first N-1 natural numbers\n        \n        if sum_A % sum_indices == 0:\n            print \"YES\"\n        else:\n            print \"NO\"\n```\n\n### Python Code\n\n```python\ndef is_good_sequence_possible(T, test_cases):\n    for test_case in test_cases:\n        N = test_case[0]\n        A = test_case[1]\n        \n        sum_A = sum(A)\n        sum_indices = N * (N - 1) // 2  # Sum of first N-1 natural numbers\n        \n        if sum_A % sum_indices == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nT = int(data[0])\nindex = 1\ntest_cases = []\nfor _ in range(T):\n    N = int(data[index])\n    A = list(map(int, data[index + 1:index + 1 + N]))\n    test_cases.append((N, A))\n    index += N + 1\n\nis_good_sequence_possible(T, test_cases)\n```\n\n### Explanation of the Code\n\n- We read the number of test cases `T`.\n- For each test case, we extract `N` and the sequence `A`.\n- We calculate the sum of the sequence `sum_A`.\n- We calculate the sum of the indices using the formula for the sum of the first `N-1` natural numbers.\n- We check if `sum_A` is divisible by `sum_indices`. If it is, we print \"YES\", otherwise \"NO\".",
    "no_parent": false,
    "dependency_used": false
}