{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: 4\n3 0\n5 1 2\n7 3 5\n10 -1 0\n2 12\n5 7 10\n10 16 20\n3 -100\n100 0 0\n100 -50 50\n200 100 100\n1 100\n99 -100 0\n Output: YES\nNO\nYES\nNO\n\n\nTests failed:\nNone",
    "code": "\ndef canSatisfyAllCustomers(test_cases):\n    results = []\n    for test_case in test_cases:\n        n, m = test_case[0]\n        customers = test_case[1]\n        \n        current_time = 0\n        min_temp = m\n        max_temp = m\n        possible = True\n        \n        for t_i, l_i, h_i in customers:\n            time_diff = t_i - current_time\n            min_temp -= time_diff\n            max_temp += time_diff\n            \n            min_temp = max(min_temp, l_i)\n            max_temp = min(max_temp, h_i)\n            \n            if min_temp > max_temp:\n                possible = False\n                break\n            \n            current_time = t_i\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nq = int(data[0])\nindex = 1\ntest_cases = []\nfor _ in range(q):\n    n, m = int(data[index]), int(data[index + 1])\n    index += 2\n    customers = []\n    for _ in range(n):\n        t_i, l_i, h_i = int(data[index]), int(data[index + 1]), int(data[index + 2])\n        customers.append((t_i, l_i, h_i))\n        index += 3\n    test_cases.append(((n, m), customers))\n\nresults = canSatisfyAllCustomers(test_cases)\nfor result in results:\n    print(result)\n",
    "full_code": "\ndef canSatisfyAllCustomers(test_cases):\n    results = []\n    for test_case in test_cases:\n        n, m = test_case[0]\n        customers = test_case[1]\n        \n        current_time = 0\n        min_temp = m\n        max_temp = m\n        possible = True\n        \n        for t_i, l_i, h_i in customers:\n            time_diff = t_i - current_time\n            min_temp -= time_diff\n            max_temp += time_diff\n            \n            min_temp = max(min_temp, l_i)\n            max_temp = min(max_temp, h_i)\n            \n            if min_temp > max_temp:\n                possible = False\n                break\n            \n            current_time = t_i\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nq = int(data[0])\nindex = 1\ntest_cases = []\nfor _ in range(q):\n    n, m = int(data[index]), int(data[index + 1])\n    index += 2\n    customers = []\n    for _ in range(n):\n        t_i, l_i, h_i = int(data[index]), int(data[index + 1]), int(data[index + 2])\n        customers.append((t_i, l_i, h_i))\n        index += 3\n    test_cases.append(((n, m), customers))\n\nresults = canSatisfyAllCustomers(test_cases)\nfor result in results:\n    print(result)\n",
    "reward": true,
    "program_code": "\ndef canSatisfyAllCustomers(test_cases):\n    results = []\n    for test_case in test_cases:\n        n, m = test_case[0]\n        customers = test_case[1]\n        \n        current_time = 0\n        min_temp = m\n        max_temp = m\n        possible = True\n        \n        for t_i, l_i, h_i in customers:\n            time_diff = t_i - current_time\n            min_temp -= time_diff\n            max_temp += time_diff\n            \n            min_temp = max(min_temp, l_i)\n            max_temp = min(max_temp, h_i)\n            \n            if min_temp > max_temp:\n                possible = False\n                break\n            \n            current_time = t_i\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nq = int(data[0])\nindex = 1\ntest_cases = []\nfor _ in range(q):\n    n, m = int(data[index]), int(data[index + 1])\n    index += 2\n    customers = []\n    for _ in range(n):\n        t_i, l_i, h_i = int(data[index]), int(data[index + 1]), int(data[index + 2])\n        customers.append((t_i, l_i, h_i))\n        index += 3\n    test_cases.append(((n, m), customers))\n\nresults = canSatisfyAllCustomers(test_cases)\nfor result in results:\n    print(result)\n",
    "program_name": "canSatisfyAllCustomers",
    "dependencies": [],
    "raw_msg": "### Problem Restatement\n\nWe need to determine if it's possible to adjust the temperature of a restaurant using an air conditioner to satisfy all customers. Each customer has a specific time they visit and a preferred temperature range. The air conditioner can increase, decrease, or maintain the temperature, and we need to ensure that at the time of each customer's visit, the temperature is within their preferred range.\n\n### Conceptual Solution\n\n1. **Initial Setup**: Start with the initial temperature and the air conditioner off.\n2. **Iterate Over Customers**: For each customer, calculate the time available to adjust the temperature since the last customer (or from time 0 for the first customer).\n3. **Determine Temperature Range**: For each customer, determine the possible temperature range that can be achieved given the time available and the previous temperature range.\n4. **Check Feasibility**: If at any point the possible temperature range does not overlap with the customer's preferred range, it's impossible to satisfy that customer.\n5. **Output Result**: If all customers can be satisfied, output \"YES\", otherwise \"NO\".\n\n### Pseudocode\n\n```\nfunction canSatisfyAllCustomers(test_cases):\n    for each test_case in test_cases:\n        read n, m\n        initialize current_time = 0\n        initialize min_temp = m\n        initialize max_temp = m\n        possible = True\n        \n        for each customer (t_i, l_i, h_i):\n            time_diff = t_i - current_time\n            min_temp -= time_diff\n            max_temp += time_diff\n            \n            min_temp = max(min_temp, l_i)\n            max_temp = min(max_temp, h_i)\n            \n            if min_temp > max_temp:\n                possible = False\n                break\n            \n            current_time = t_i\n        \n        if possible:\n            print \"YES\"\n        else:\n            print \"NO\"\n```\n\n### Final Python Solution\n\n```python\ndef canSatisfyAllCustomers(test_cases):\n    results = []\n    for test_case in test_cases:\n        n, m = test_case[0]\n        customers = test_case[1]\n        \n        current_time = 0\n        min_temp = m\n        max_temp = m\n        possible = True\n        \n        for t_i, l_i, h_i in customers:\n            time_diff = t_i - current_time\n            min_temp -= time_diff\n            max_temp += time_diff\n            \n            min_temp = max(min_temp, l_i)\n            max_temp = min(max_temp, h_i)\n            \n            if min_temp > max_temp:\n                possible = False\n                break\n            \n            current_time = t_i\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nq = int(data[0])\nindex = 1\ntest_cases = []\nfor _ in range(q):\n    n, m = int(data[index]), int(data[index + 1])\n    index += 2\n    customers = []\n    for _ in range(n):\n        t_i, l_i, h_i = int(data[index]), int(data[index + 1]), int(data[index + 2])\n        customers.append((t_i, l_i, h_i))\n        index += 3\n    test_cases.append(((n, m), customers))\n\nresults = canSatisfyAllCustomers(test_cases)\nfor result in results:\n    print(result)\n```\n\nThis solution iterates over each test case, adjusting the possible temperature range based on the time elapsed and the customer's preferred range, and checks if all customers can be satisfied.",
    "no_parent": false,
    "dependency_used": false
}