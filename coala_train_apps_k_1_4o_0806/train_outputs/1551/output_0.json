{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\nNone\n\nTests failed:\n Input: ['2', 'i do not have any fancy quotes', 'when nothing goes right go left'] Expected output: [{'Real', 'Fancy'}, {'regularly', 'fancy'}] # Execution output: []\nNo output detected. You might want to check the reading from / writing to standard IO.\nA common mistake is to put the IO inside a function, but the function is not called.\n",
    "code": "\ndef classify_quotes(T, quotes):\n    # Iterate over each quote\n    for quote in quotes:\n        # Split the quote into words\n        words = quote.split()\n        # Check if \"not\" is in the list of words\n        if \"not\" in words:\n            # If \"not\" is found, classify as \"Real Fancy\"\n            print(\"Real Fancy\")\n        else:\n            # If \"not\" is not found, classify as \"regularly fancy\"\n            print(\"regularly fancy\")\n\n# Example usage:\n# T = number of test cases\n# quotes = list of quotes\n# classify_quotes(T, quotes)\n",
    "full_code": "\ndef classify_quotes(T, quotes):\n    # Iterate over each quote\n    for quote in quotes:\n        # Split the quote into words\n        words = quote.split()\n        # Check if \"not\" is in the list of words\n        if \"not\" in words:\n            # If \"not\" is found, classify as \"Real Fancy\"\n            print(\"Real Fancy\")\n        else:\n            # If \"not\" is not found, classify as \"regularly fancy\"\n            print(\"regularly fancy\")\n\n# Example usage:\n# T = number of test cases\n# quotes = list of quotes\n# classify_quotes(T, quotes)\n",
    "reward": false,
    "program_code": "\ndef classify_quotes(T, quotes):\n    # Iterate over each quote\n    for quote in quotes:\n        # Split the quote into words\n        words = quote.split()\n        # Check if \"not\" is in the list of words\n        if \"not\" in words:\n            # If \"not\" is found, classify as \"Real Fancy\"\n            print(\"Real Fancy\")\n        else:\n            # If \"not\" is not found, classify as \"regularly fancy\"\n            print(\"regularly fancy\")\n\n# Example usage:\n# T = number of test cases\n# quotes = list of quotes\n# classify_quotes(T, quotes)\n",
    "program_name": "classify_quotes",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nWe need to classify quotes based on whether they contain the word \"not\" as a standalone word. If a quote contains the word \"not\", it is considered \"Real Fancy\". Otherwise, it is \"regularly fancy\". We will be given multiple quotes, and for each quote, we need to determine its classification.\n\n## Conceptual Solution\n\n1. For each quote, split the quote into individual words.\n2. Check if the word \"not\" is present in the list of words.\n3. If \"not\" is present, classify the quote as \"Real Fancy\".\n4. If \"not\" is not present, classify the quote as \"regularly fancy\".\n\n## Pseudocode\n\n```\nfunction classify_quotes(T, quotes):\n    for each quote in quotes:\n        split the quote into words\n        if \"not\" is in the list of words:\n            print \"Real Fancy\"\n        else:\n            print \"regularly fancy\"\n```\n\n## Final Python Solution\n\n```python\ndef classify_quotes(T, quotes):\n    # Iterate over each quote\n    for quote in quotes:\n        # Split the quote into words\n        words = quote.split()\n        # Check if \"not\" is in the list of words\n        if \"not\" in words:\n            # If \"not\" is found, classify as \"Real Fancy\"\n            print(\"Real Fancy\")\n        else:\n            # If \"not\" is not found, classify as \"regularly fancy\"\n            print(\"regularly fancy\")\n\n# Example usage:\n# T = number of test cases\n# quotes = list of quotes\n# classify_quotes(T, quotes)\n```\n\nThis solution reads the number of test cases and the quotes, splits each quote into words, checks for the presence of the word \"not\", and prints the appropriate classification for each quote.",
    "no_parent": false,
    "dependency_used": false
}