{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['2', 'i do not have any fancy quotes', 'when nothing goes right go left'] Output: Real Fancy\nregularly fancy\n\nTests failed:\nNone",
    "code": "\ndef classify_quotes(T, quotes):\n    # Iterate over each quote\n    for quote in quotes:\n        # Split the quote into words\n        words = quote.split()\n        # Check if \"not\" is in the list of words\n        if \"not\" in words:\n            # If \"not\" is found, classify as \"Real Fancy\"\n            print(\"Real Fancy\")\n        else:\n            # If \"not\" is not found, classify as \"regularly fancy\"\n            print(\"regularly fancy\")\n\n# Read the number of test cases\nT = int(input().strip())\n# Read each quote and store in a list\nquotes = [input().strip() for _ in range(T)]\n# Call the function with the number of test cases and the list of quotes\nclassify_quotes(T, quotes)\n",
    "full_code": "\ndef classify_quotes(T, quotes):\n    # Iterate over each quote\n    for quote in quotes:\n        # Split the quote into words\n        words = quote.split()\n        # Check if \"not\" is in the list of words\n        if \"not\" in words:\n            # If \"not\" is found, classify as \"Real Fancy\"\n            print(\"Real Fancy\")\n        else:\n            # If \"not\" is not found, classify as \"regularly fancy\"\n            print(\"regularly fancy\")\n\n# Read the number of test cases\nT = int(input().strip())\n# Read each quote and store in a list\nquotes = [input().strip() for _ in range(T)]\n# Call the function with the number of test cases and the list of quotes\nclassify_quotes(T, quotes)\n",
    "reward": true,
    "program_code": "\ndef classify_quotes(T, quotes):\n    # Iterate over each quote\n    for quote in quotes:\n        # Split the quote into words\n        words = quote.split()\n        # Check if \"not\" is in the list of words\n        if \"not\" in words:\n            # If \"not\" is found, classify as \"Real Fancy\"\n            print(\"Real Fancy\")\n        else:\n            # If \"not\" is not found, classify as \"regularly fancy\"\n            print(\"regularly fancy\")\n\n# Read the number of test cases\nT = int(input().strip())\n# Read each quote and store in a list\nquotes = [input().strip() for _ in range(T)]\n# Call the function with the number of test cases and the list of quotes\nclassify_quotes(T, quotes)\n",
    "program_name": "classify_quotes",
    "dependencies": [],
    "raw_msg": "```python\ndef classify_quotes(T, quotes):\n    # Iterate over each quote\n    for quote in quotes:\n        # Split the quote into words\n        words = quote.split()\n        # Check if \"not\" is in the list of words\n        if \"not\" in words:\n            # If \"not\" is found, classify as \"Real Fancy\"\n            print(\"Real Fancy\")\n        else:\n            # If \"not\" is not found, classify as \"regularly fancy\"\n            print(\"regularly fancy\")\n\n# Read the number of test cases\nT = int(input().strip())\n# Read each quote and store in a list\nquotes = [input().strip() for _ in range(T)]\n# Call the function with the number of test cases and the list of quotes\nclassify_quotes(T, quotes)\n```\n\n### Explanation\n\n- **Reading Input**: The number of test cases `T` is read first. Then, each quote is read in a loop and stored in a list called `quotes`.\n- **Function Call**: The `classify_quotes` function is called with `T` and `quotes` as arguments.\n- **Output**: The function processes each quote and prints \"Real Fancy\" if the word \"not\" is present as a standalone word, otherwise it prints \"regularly fancy\". \n\nThis solution is designed to work in a competitive programming environment where input is read from standard input and output is written to standard output.",
    "no_parent": false,
    "dependency_used": false
}