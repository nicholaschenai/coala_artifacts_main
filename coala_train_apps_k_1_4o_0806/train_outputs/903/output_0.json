{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['1', '1 1', '4 4'] Output: 1.60\n\nTests failed:\nNone",
    "code": "\ndef calculate_mirror_position(x1, y1, x2, y2):\n    # Calculate the x-coordinate of the mirror using the reflection formula\n    return (x1 * y2 + x2 * y1) / (y1 + y2)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        x1 = int(data[index])\n        y1 = int(data[index + 1])\n        x2 = int(data[index + 2])\n        y2 = int(data[index + 3])\n        index += 4\n        \n        mirror_x = calculate_mirror_position(x1, y1, x2, y2)\n        results.append(f\"{mirror_x:.2f}\")\n    \n    for result in results:\n        print(result)\n\nmain()\n",
    "full_code": "\ndef calculate_mirror_position(x1, y1, x2, y2):\n    # Calculate the x-coordinate of the mirror using the reflection formula\n    return (x1 * y2 + x2 * y1) / (y1 + y2)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        x1 = int(data[index])\n        y1 = int(data[index + 1])\n        x2 = int(data[index + 2])\n        y2 = int(data[index + 3])\n        index += 4\n        \n        mirror_x = calculate_mirror_position(x1, y1, x2, y2)\n        results.append(f\"{mirror_x:.2f}\")\n    \n    for result in results:\n        print(result)\n\nmain()\n",
    "reward": true,
    "program_code": "\ndef calculate_mirror_position(x1, y1, x2, y2):\n    # Calculate the x-coordinate of the mirror using the reflection formula\n    return (x1 * y2 + x2 * y1) / (y1 + y2)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        x1 = int(data[index])\n        y1 = int(data[index + 1])\n        x2 = int(data[index + 2])\n        y2 = int(data[index + 3])\n        index += 4\n        \n        mirror_x = calculate_mirror_position(x1, y1, x2, y2)\n        results.append(f\"{mirror_x:.2f}\")\n    \n    for result in results:\n        print(result)\n\nmain()\n",
    "program_name": "main",
    "dependencies": [],
    "raw_msg": "### Problem Restatement\n\nKabir wants to see Tara's smile using a mirror placed on the x-axis. Given the coordinates of Kabir and Tara, we need to determine the x-coordinate on the x-axis where the mirror should be placed so that Kabir can see Tara's reflection. The solution should be accurate to two decimal places.\n\n### Conceptual Solution\n\n1. **Understanding Reflection**: The mirror should be placed such that the angle of incidence equals the angle of reflection. This means the path from Kabir to the mirror and from the mirror to Tara should form a straight line.\n\n2. **Geometric Insight**: The x-coordinate of the mirror can be found using the formula derived from the reflection property:\n   \\[\n   x_{\\text{mirror}} = \\frac{x_1 \\cdot y_2 + x_2 \\cdot y_1}{y_1 + y_2}\n   \\]\n   This formula ensures that the angles are equal, satisfying the reflection condition.\n\n3. **Iterate for Each Test Case**: For each test case, compute the x-coordinate of the mirror using the formula and print it with a precision of two decimal places.\n\n### Pseudocode\n\n```\nfunction calculate_mirror_position(x1, y1, x2, y2):\n    return (x1 * y2 + x2 * y1) / (y1 + y2)\n\nread T  // number of test cases\nfor each test case:\n    read x1, y1\n    read x2, y2\n    mirror_x = calculate_mirror_position(x1, y1, x2, y2)\n    print mirror_x formatted to 2 decimal places\n```\n\n### Python Code\n\n```python\ndef calculate_mirror_position(x1, y1, x2, y2):\n    # Calculate the x-coordinate of the mirror using the reflection formula\n    return (x1 * y2 + x2 * y1) / (y1 + y2)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        x1 = int(data[index])\n        y1 = int(data[index + 1])\n        x2 = int(data[index + 2])\n        y2 = int(data[index + 3])\n        index += 4\n        \n        mirror_x = calculate_mirror_position(x1, y1, x2, y2)\n        results.append(f\"{mirror_x:.2f}\")\n    \n    for result in results:\n        print(result)\n\nmain()\n```\n\n### Explanation\n\n- **Function `calculate_mirror_position`**: Computes the x-coordinate of the mirror using the derived formula.\n- **Main Function**: Reads input, processes each test case, and outputs the result formatted to two decimal places.\n- **Precision**: The result is formatted to two decimal places to meet the problem's precision requirement.",
    "no_parent": false,
    "dependency_used": false
}