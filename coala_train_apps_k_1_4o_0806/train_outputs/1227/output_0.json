{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\nNone\n\nTests failed:\n Input: ['2', 'blue yellow green orange black green', 'green yellow green orange black green'] Expected output: [{'NO'}, {'YES'}] # Execution output: ['NO', 'NO']",
    "code": "\ndef check_adjacent_colors(T, test_cases):\n    for colors in test_cases:\n        # Check the four possible sets of adjacent sides\n        if (colors[0] == colors[2] == colors[4]) or \\\n           (colors[0] == colors[3] == colors[4]) or \\\n           (colors[1] == colors[2] == colors[5]) or \\\n           (colors[1] == colors[3] == colors[5]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nT = int(data[0])\nindex = 1\ntest_cases = []\nfor _ in range(T):\n    test_cases.append(data[index:index + 6])\n    index += 6\n\ncheck_adjacent_colors(T, test_cases)\n",
    "full_code": "\ndef check_adjacent_colors(T, test_cases):\n    for colors in test_cases:\n        # Check the four possible sets of adjacent sides\n        if (colors[0] == colors[2] == colors[4]) or \\\n           (colors[0] == colors[3] == colors[4]) or \\\n           (colors[1] == colors[2] == colors[5]) or \\\n           (colors[1] == colors[3] == colors[5]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nT = int(data[0])\nindex = 1\ntest_cases = []\nfor _ in range(T):\n    test_cases.append(data[index:index + 6])\n    index += 6\n\ncheck_adjacent_colors(T, test_cases)\n",
    "reward": false,
    "program_code": "\ndef check_adjacent_colors(T, test_cases):\n    for colors in test_cases:\n        # Check the four possible sets of adjacent sides\n        if (colors[0] == colors[2] == colors[4]) or \\\n           (colors[0] == colors[3] == colors[4]) or \\\n           (colors[1] == colors[2] == colors[5]) or \\\n           (colors[1] == colors[3] == colors[5]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nT = int(data[0])\nindex = 1\ntest_cases = []\nfor _ in range(T):\n    test_cases.append(data[index:index + 6])\n    index += 6\n\ncheck_adjacent_colors(T, test_cases)\n",
    "program_name": "check_adjacent_colors",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nWe have a cube with six sides, each painted in one of six possible colors: black, blue, red, green, yellow, or orange. For each test case, we are given the colors of the six sides in a specific order: front, back, left, right, top, and bottom. Our task is to determine if there are three sides that are pairwise adjacent and painted in the same color.\n\n## Conceptual Solution\n\n1. **Understanding Adjacency**: On a cube, the sides that are pairwise adjacent form a corner. There are four such corners:\n   - Front, Left, Top\n   - Front, Right, Top\n   - Back, Left, Bottom\n   - Back, Right, Bottom\n\n2. **Checking for Same Color**: For each test case, we need to check if any of these four sets of sides are painted in the same color.\n\n3. **Output**: For each test case, output \"YES\" if there is a set of three adjacent sides with the same color, otherwise output \"NO\".\n\n## Pseudocode\n\n```\nfunction check_adjacent_colors(T, test_cases):\n    for each test_case in test_cases:\n        colors = test_case\n        if (colors[0] == colors[2] == colors[4]) or\n           (colors[0] == colors[3] == colors[4]) or\n           (colors[1] == colors[2] == colors[5]) or\n           (colors[1] == colors[3] == colors[5]):\n            print \"YES\"\n        else:\n            print \"NO\"\n```\n\n## Final Python Solution\n\n```python\ndef check_adjacent_colors(T, test_cases):\n    for colors in test_cases:\n        # Check the four possible sets of adjacent sides\n        if (colors[0] == colors[2] == colors[4]) or \\\n           (colors[0] == colors[3] == colors[4]) or \\\n           (colors[1] == colors[2] == colors[5]) or \\\n           (colors[1] == colors[3] == colors[5]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nT = int(data[0])\nindex = 1\ntest_cases = []\nfor _ in range(T):\n    test_cases.append(data[index:index + 6])\n    index += 6\n\ncheck_adjacent_colors(T, test_cases)\n```\n\n### Explanation\n\n- We define a function `check_adjacent_colors` that takes the number of test cases `T` and a list of test cases `test_cases`.\n- For each test case, we check the four possible sets of adjacent sides to see if they are painted in the same color.\n- If any set of adjacent sides is the same color, we print \"YES\". Otherwise, we print \"NO\".\n- The input is read from standard input, and the function processes each test case accordingly.",
    "no_parent": false,
    "dependency_used": false
}