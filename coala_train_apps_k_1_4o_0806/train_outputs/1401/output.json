{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['7 50', '1 12 5 111 200 1000 10'] Output: 4\n\nTests failed:\nNone",
    "code": "\ndef maxChocolates(n, k, prices):\n    # Sort the prices in ascending order\n    prices.sort()\n    \n    # Initialize the count of chocolates and the total money spent\n    count = 0\n    total_spent = 0\n    \n    # Iterate over the sorted prices\n    for price in prices:\n        # Check if the current price can be added without exceeding the budget\n        if total_spent + price <= k:\n            total_spent += price  # Add the price to the total spent\n            count += 1  # Increment the count of chocolates\n        else:\n            break  # Stop if the budget is exceeded\n    \n    # Return the maximum number of chocolates that can be bought\n    return count\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse the input\nn = int(data[0])\nk = int(data[1])\nprices = list(map(int, data[2:]))\n\n# Call the function and print the result\nresult = maxChocolates(n, k, prices)\nprint(result)\n",
    "full_code": "\ndef maxChocolates(n, k, prices):\n    # Sort the prices in ascending order\n    prices.sort()\n    \n    # Initialize the count of chocolates and the total money spent\n    count = 0\n    total_spent = 0\n    \n    # Iterate over the sorted prices\n    for price in prices:\n        # Check if the current price can be added without exceeding the budget\n        if total_spent + price <= k:\n            total_spent += price  # Add the price to the total spent\n            count += 1  # Increment the count of chocolates\n        else:\n            break  # Stop if the budget is exceeded\n    \n    # Return the maximum number of chocolates that can be bought\n    return count\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse the input\nn = int(data[0])\nk = int(data[1])\nprices = list(map(int, data[2:]))\n\n# Call the function and print the result\nresult = maxChocolates(n, k, prices)\nprint(result)\n",
    "reward": true,
    "program_code": "\ndef maxChocolates(n, k, prices):\n    # Sort the prices in ascending order\n    prices.sort()\n    \n    # Initialize the count of chocolates and the total money spent\n    count = 0\n    total_spent = 0\n    \n    # Iterate over the sorted prices\n    for price in prices:\n        # Check if the current price can be added without exceeding the budget\n        if total_spent + price <= k:\n            total_spent += price  # Add the price to the total spent\n            count += 1  # Increment the count of chocolates\n        else:\n            break  # Stop if the budget is exceeded\n    \n    # Return the maximum number of chocolates that can be bought\n    return count\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse the input\nn = int(data[0])\nk = int(data[1])\nprices = list(map(int, data[2:]))\n\n# Call the function and print the result\nresult = maxChocolates(n, k, prices)\nprint(result)\n",
    "program_name": "maxChocolates",
    "dependencies": [],
    "raw_msg": "```python\ndef maxChocolates(n, k, prices):\n    # Sort the prices in ascending order\n    prices.sort()\n    \n    # Initialize the count of chocolates and the total money spent\n    count = 0\n    total_spent = 0\n    \n    # Iterate over the sorted prices\n    for price in prices:\n        # Check if the current price can be added without exceeding the budget\n        if total_spent + price <= k:\n            total_spent += price  # Add the price to the total spent\n            count += 1  # Increment the count of chocolates\n        else:\n            break  # Stop if the budget is exceeded\n    \n    # Return the maximum number of chocolates that can be bought\n    return count\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse the input\nn = int(data[0])\nk = int(data[1])\nprices = list(map(int, data[2:]))\n\n# Call the function and print the result\nresult = maxChocolates(n, k, prices)\nprint(result)\n```\n\n### Explanation\n\n- **Input Handling**: The code reads all input at once using `sys.stdin.read()`, which is suitable for competitive programming environments where input is provided in bulk. The input is split into a list of strings, and the first two elements are parsed as integers for `n` (number of chocolates) and `k` (budget). The remaining elements are converted into a list of integers representing the prices of chocolates.\n- **Function Logic**: The `maxChocolates` function sorts the prices and iterates through them, adding prices to the total spent as long as the budget is not exceeded. It counts the number of chocolates that can be bought within the budget.\n- **Output**: The result from the function is printed directly, which is the maximum number of chocolates Anushka can buy.",
    "no_parent": false,
    "dependency_used": false
}