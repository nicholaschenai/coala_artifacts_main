{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['2', '4', '1 0 1 0', '0 0 0 1', '0 1 0 0', '1 0 0 1', '4', '1 0 1 0', '0 0 0 0', '1 0 1 1', '0 1 0 0'] Output: SAFE\nUNSAFE\n\nTests failed:\nNone",
    "code": "\ndef is_safe(grid, N):\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                # Check horizontal and vertical neighbors only\n                if i > 0 and grid[i-1][j] == 1:\n                    return \"UNSAFE\"\n                if i < N-1 and grid[i+1][j] == 1:\n                    return \"UNSAFE\"\n                if j > 0 and grid[i][j-1] == 1:\n                    return \"UNSAFE\"\n                if j < N-1 and grid[i][j+1] == 1:\n                    return \"UNSAFE\"\n    return \"SAFE\"\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        grid = []\n        for _ in range(N):\n            row = list(map(int, data[index:index + N]))\n            index += N\n            grid.append(row)\n        \n        result = is_safe(grid, N)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\n# Call the solve function to execute the logic\nsolve()\n",
    "full_code": "\ndef is_safe(grid, N):\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                # Check horizontal and vertical neighbors only\n                if i > 0 and grid[i-1][j] == 1:\n                    return \"UNSAFE\"\n                if i < N-1 and grid[i+1][j] == 1:\n                    return \"UNSAFE\"\n                if j > 0 and grid[i][j-1] == 1:\n                    return \"UNSAFE\"\n                if j < N-1 and grid[i][j+1] == 1:\n                    return \"UNSAFE\"\n    return \"SAFE\"\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        grid = []\n        for _ in range(N):\n            row = list(map(int, data[index:index + N]))\n            index += N\n            grid.append(row)\n        \n        result = is_safe(grid, N)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\n# Call the solve function to execute the logic\nsolve()\n",
    "reward": true,
    "program_code": "\ndef is_safe(grid, N):\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                # Check horizontal and vertical neighbors only\n                if i > 0 and grid[i-1][j] == 1:\n                    return \"UNSAFE\"\n                if i < N-1 and grid[i+1][j] == 1:\n                    return \"UNSAFE\"\n                if j > 0 and grid[i][j-1] == 1:\n                    return \"UNSAFE\"\n                if j < N-1 and grid[i][j+1] == 1:\n                    return \"UNSAFE\"\n    return \"SAFE\"\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        grid = []\n        for _ in range(N):\n            row = list(map(int, data[index:index + N]))\n            index += N\n            grid.append(row)\n        \n        result = is_safe(grid, N)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\n# Call the solve function to execute the logic\nsolve()\n",
    "program_name": "solve",
    "dependencies": [],
    "raw_msg": "```python\ndef is_safe(grid, N):\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                # Check horizontal and vertical neighbors only\n                if i > 0 and grid[i-1][j] == 1:\n                    return \"UNSAFE\"\n                if i < N-1 and grid[i+1][j] == 1:\n                    return \"UNSAFE\"\n                if j > 0 and grid[i][j-1] == 1:\n                    return \"UNSAFE\"\n                if j < N-1 and grid[i][j+1] == 1:\n                    return \"UNSAFE\"\n    return \"SAFE\"\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        index += 1\n        grid = []\n        for _ in range(N):\n            row = list(map(int, data[index:index + N]))\n            index += N\n            grid.append(row)\n        \n        result = is_safe(grid, N)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\n# Call the solve function to execute the logic\nsolve()\n```",
    "no_parent": false,
    "dependency_used": false
}