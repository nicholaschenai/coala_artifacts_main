{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\nNone\n\nTests failed:\n Input: ['2', '4 9', '5 2 2 4', '4 9', '5 2 18 3'] Expected output: [{'YES'}, {'NO'}] # Execution output: ['NO', 'NO']",
    "code": "\ndef can_spend_all_money(T, test_cases):\n    for test_case in test_cases:\n        N, K = test_case[0]\n        demands = test_case[1]\n        \n        total_demand = sum(demands)\n        \n        if total_demand == K:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nT = int(data[0])\nindex = 1\ntest_cases = []\nfor _ in range(T):\n    N, K = map(int, data[index:index+2])\n    demands = list(map(int, data[index+2:index+2+N]))\n    test_cases.append(((N, K), demands))\n    index += 2 + N\n\ncan_spend_all_money(T, test_cases)\n",
    "full_code": "\ndef can_spend_all_money(T, test_cases):\n    for test_case in test_cases:\n        N, K = test_case[0]\n        demands = test_case[1]\n        \n        total_demand = sum(demands)\n        \n        if total_demand == K:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nT = int(data[0])\nindex = 1\ntest_cases = []\nfor _ in range(T):\n    N, K = map(int, data[index:index+2])\n    demands = list(map(int, data[index+2:index+2+N]))\n    test_cases.append(((N, K), demands))\n    index += 2 + N\n\ncan_spend_all_money(T, test_cases)\n",
    "reward": false,
    "program_code": "\ndef can_spend_all_money(T, test_cases):\n    for test_case in test_cases:\n        N, K = test_case[0]\n        demands = test_case[1]\n        \n        total_demand = sum(demands)\n        \n        if total_demand == K:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nT = int(data[0])\nindex = 1\ntest_cases = []\nfor _ in range(T):\n    N, K = map(int, data[index:index+2])\n    demands = list(map(int, data[index+2:index+2+N]))\n    test_cases.append(((N, K), demands))\n    index += 2 + N\n\ncan_spend_all_money(T, test_cases)\n",
    "program_name": "can_spend_all_money",
    "dependencies": [],
    "raw_msg": "### Problem Restatement\n\nWe have a number of test cases. For each test case, we are given:\n- `N`: the number of minions.\n- `K`: the total amount of money Gru has.\n- A list of `N` integers representing the amount of money each minion demands.\n\nThe task is to determine if Gru can distribute exactly all of his money (`K`) among the minions such that each minion receives an amount less than or equal to their demand. If Gru can distribute all his money in this way, we output \"YES\", otherwise \"NO\".\n\n### Conceptual Solution\n\n1. **Sum of Demands**: For each test case, calculate the sum of all the demands.\n2. **Comparison**: Compare the sum of demands with `K`.\n   - If the sum of demands is equal to `K`, output \"YES\".\n   - Otherwise, output \"NO\".\n\n### Pseudocode\n\n```\nfunction can_spend_all_money(T, test_cases):\n    for each test_case in test_cases:\n        N, K = test_case[0]\n        demands = test_case[1]\n        \n        total_demand = sum(demands)\n        \n        if total_demand == K:\n            print \"YES\"\n        else:\n            print \"NO\"\n\n# Read input\nT = read integer\ntest_cases = []\nfor i from 1 to T:\n    N, K = read two integers\n    demands = read list of N integers\n    append (N, K, demands) to test_cases\n\ncan_spend_all_money(T, test_cases)\n```\n\n### Final Python Solution\n\n```python\ndef can_spend_all_money(T, test_cases):\n    for test_case in test_cases:\n        N, K = test_case[0]\n        demands = test_case[1]\n        \n        total_demand = sum(demands)\n        \n        if total_demand == K:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nT = int(data[0])\nindex = 1\ntest_cases = []\nfor _ in range(T):\n    N, K = map(int, data[index:index+2])\n    demands = list(map(int, data[index+2:index+2+N]))\n    test_cases.append(((N, K), demands))\n    index += 2 + N\n\ncan_spend_all_money(T, test_cases)\n```\n\n### Explanation of the Code\n\n- We define a function `can_spend_all_money` that processes each test case.\n- For each test case, we extract `N`, `K`, and the list of demands.\n- We calculate the total demand by summing up the list of demands.\n- We compare the total demand with `K`. If they are equal, Gru can distribute all his money exactly, so we print \"YES\". Otherwise, we print \"NO\".\n- The input is read from standard input, and the data is parsed into the required format for processing.",
    "no_parent": false,
    "dependency_used": false
}