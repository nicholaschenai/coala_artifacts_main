{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['2', '3', '2'] Output: YES\n010\n001\n100\nNO\n\nTests failed:\nNone",
    "code": "\ndef solve_tournament(T, test_cases):\n    for N in test_cases:\n        if N % 2 == 0:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            for i in range(N):\n                result = \"\"\n                for j in range(N):\n                    if i == j:\n                        result += \"0\"\n                    elif (j - i + N) % N <= (N - 1) // 2:\n                        result += \"1\"\n                    else:\n                        result += \"0\"\n                print(result)\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# First line is the number of test cases\nT = int(data[0])\n\n# The following lines are the number of players for each test case\ntest_cases = [int(data[i]) for i in range(1, T + 1)]\n\n# Call the function with the parsed input\nsolve_tournament(T, test_cases)\n",
    "full_code": "\ndef solve_tournament(T, test_cases):\n    for N in test_cases:\n        if N % 2 == 0:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            for i in range(N):\n                result = \"\"\n                for j in range(N):\n                    if i == j:\n                        result += \"0\"\n                    elif (j - i + N) % N <= (N - 1) // 2:\n                        result += \"1\"\n                    else:\n                        result += \"0\"\n                print(result)\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# First line is the number of test cases\nT = int(data[0])\n\n# The following lines are the number of players for each test case\ntest_cases = [int(data[i]) for i in range(1, T + 1)]\n\n# Call the function with the parsed input\nsolve_tournament(T, test_cases)\n",
    "reward": true,
    "program_code": "\ndef solve_tournament(T, test_cases):\n    for N in test_cases:\n        if N % 2 == 0:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            for i in range(N):\n                result = \"\"\n                for j in range(N):\n                    if i == j:\n                        result += \"0\"\n                    elif (j - i + N) % N <= (N - 1) // 2:\n                        result += \"1\"\n                    else:\n                        result += \"0\"\n                print(result)\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# First line is the number of test cases\nT = int(data[0])\n\n# The following lines are the number of players for each test case\ntest_cases = [int(data[i]) for i in range(1, T + 1)]\n\n# Call the function with the parsed input\nsolve_tournament(T, test_cases)\n",
    "program_name": "solve_tournament",
    "dependencies": [],
    "raw_msg": "```python\ndef solve_tournament(T, test_cases):\n    for N in test_cases:\n        if N % 2 == 0:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            for i in range(N):\n                result = \"\"\n                for j in range(N):\n                    if i == j:\n                        result += \"0\"\n                    elif (j - i + N) % N <= (N - 1) // 2:\n                        result += \"1\"\n                    else:\n                        result += \"0\"\n                print(result)\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# First line is the number of test cases\nT = int(data[0])\n\n# The following lines are the number of players for each test case\ntest_cases = [int(data[i]) for i in range(1, T + 1)]\n\n# Call the function with the parsed input\nsolve_tournament(T, test_cases)\n```",
    "no_parent": false,
    "dependency_used": false
}