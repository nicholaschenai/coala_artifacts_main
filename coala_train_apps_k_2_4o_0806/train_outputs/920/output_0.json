{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\nNone\n\nTests failed:\n Input: ['3', 'gb', 'bgg', 'bbgg'] Expected output: [{'1'}, {'2'}, {'6'}] # Execution output: ['1', '2', '4']",
    "code": "\ndef calculate_minimum_awkwardness(s):\n    b_count = s.count('b')\n    g_count = s.count('g')\n    return b_count * g_count\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    results = []\n    \n    for i in range(1, T + 1):\n        s = data[i]\n        result = calculate_minimum_awkwardness(s)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nsolve()\n",
    "full_code": "\ndef calculate_minimum_awkwardness(s):\n    b_count = s.count('b')\n    g_count = s.count('g')\n    return b_count * g_count\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    results = []\n    \n    for i in range(1, T + 1):\n        s = data[i]\n        result = calculate_minimum_awkwardness(s)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nsolve()\n",
    "reward": false,
    "program_code": "\ndef calculate_minimum_awkwardness(s):\n    b_count = s.count('b')\n    g_count = s.count('g')\n    return b_count * g_count\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    results = []\n    \n    for i in range(1, T + 1):\n        s = data[i]\n        result = calculate_minimum_awkwardness(s)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nsolve()\n",
    "program_name": "solve",
    "dependencies": [],
    "raw_msg": "### Problem Restatement\n\nYou are given a string representing a line of students, where each character is either 'b' (boy) or 'g' (girl). The awkwardness of this line is defined as the sum of pairwise distances between each boy and girl. You can reorder the students to minimize this awkwardness. The task is to find the minimum possible awkwardness for each test case.\n\n### Conceptual Solution\n\nTo minimize the awkwardness, we should group all boys together and all girls together. This way, the distance between any boy and any girl is minimized. The minimum awkwardness is achieved by placing all boys on one side and all girls on the other side, or vice versa.\n\n1. Count the number of boys (`b_count`) and girls (`g_count`) in the string.\n2. Calculate the minimum awkwardness using the formula: `b_count * g_count`. This is because each boy will be paired with each girl exactly once, and the distance between them will be minimized to 1.\n\n### Pseudocode\n\n```\nfunction calculate_minimum_awkwardness(s):\n    b_count = count of 'b' in s\n    g_count = count of 'g' in s\n    return b_count * g_count\n\nfunction solve():\n    read T\n    for each test case:\n        read s\n        result = calculate_minimum_awkwardness(s)\n        print result\n```\n\n### Python Code\n\n```python\ndef calculate_minimum_awkwardness(s):\n    b_count = s.count('b')\n    g_count = s.count('g')\n    return b_count * g_count\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    results = []\n    \n    for i in range(1, T + 1):\n        s = data[i]\n        result = calculate_minimum_awkwardness(s)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nsolve()\n```\n\n### Explanation\n\n- **Counting Boys and Girls**: We count the number of 'b's and 'g's in the string. This gives us the number of boys and girls.\n- **Calculating Awkwardness**: The minimum awkwardness is the product of the number of boys and the number of girls, as each boy will be paired with each girl exactly once.\n- **Efficiency**: The solution is efficient because counting characters in a string is linear with respect to the length of the string, and we only perform this operation once per test case. Given the constraints, this approach will run efficiently within the limits.",
    "no_parent": false,
    "dependency_used": false
}