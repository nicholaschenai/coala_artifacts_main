{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\nNone\n\nTests failed:\n Input: ['2', '4 9', '5 2 2 4', '4 9', '5 2 18 3'] Expected output: [{'YES'}, {'NO'}] # Execution output: ['NO', 'NO']",
    "code": "\ndef can_spend_all_money():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(T):\n        N, K = int(data[index]), int(data[index + 1])\n        index += 2\n        demands = list(map(int, data[index:index + N]))\n        index += N\n        \n        if sum(demands) == K:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\n# Call the function to execute the solution\ncan_spend_all_money()\n",
    "full_code": "\ndef can_spend_all_money():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(T):\n        N, K = int(data[index]), int(data[index + 1])\n        index += 2\n        demands = list(map(int, data[index:index + N]))\n        index += N\n        \n        if sum(demands) == K:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\n# Call the function to execute the solution\ncan_spend_all_money()\n",
    "reward": false,
    "program_code": "\ndef can_spend_all_money():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(T):\n        N, K = int(data[index]), int(data[index + 1])\n        index += 2\n        demands = list(map(int, data[index:index + N]))\n        index += N\n        \n        if sum(demands) == K:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\n# Call the function to execute the solution\ncan_spend_all_money()\n",
    "program_name": "can_spend_all_money",
    "dependencies": [],
    "raw_msg": "### Problem Restatement\n\nWe have a number of test cases. For each test case, we are given:\n- `N`, the number of minions.\n- `K`, the total amount of money Gru has.\n- A list of `N` integers, each representing the amount of money a minion demands.\n\nThe task is to determine if Gru can distribute all of his money such that he has exactly zero money left, and each minion receives an amount less than or equal to their demand.\n\n### Conceptual Solution\n\n1. **Sum of Demands**: For each test case, calculate the sum of all the demands.\n2. **Comparison**: Compare the sum of demands with `K`.\n   - If the sum of demands equals `K`, output \"YES\" because Gru can distribute all his money exactly.\n   - Otherwise, output \"NO\" because Gru cannot distribute all his money to meet the demands exactly.\n\n### Pseudocode\n\n```\nfunction can_spend_all_money(test_cases):\n    for each test_case in test_cases:\n        read N, K\n        read demands (list of N integers)\n        \n        if sum(demands) == K:\n            print \"YES\"\n        else:\n            print \"NO\"\n```\n\n### Final Python Solution\n\n```python\ndef can_spend_all_money():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(T):\n        N, K = int(data[index]), int(data[index + 1])\n        index += 2\n        demands = list(map(int, data[index:index + N]))\n        index += N\n        \n        if sum(demands) == K:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\n# Call the function to execute the solution\ncan_spend_all_money()\n```\n\n### Explanation of the Code\n\n- **Input Handling**: We read all input data at once for efficiency, especially given the constraints.\n- **Loop Through Test Cases**: For each test case, we extract `N`, `K`, and the list of demands.\n- **Sum and Compare**: We calculate the sum of the demands and compare it to `K`.\n- **Output**: We store the result (\"YES\" or \"NO\") for each test case and print them at the end. This approach minimizes I/O operations, which is beneficial for large input sizes.",
    "no_parent": false,
    "dependency_used": false
}