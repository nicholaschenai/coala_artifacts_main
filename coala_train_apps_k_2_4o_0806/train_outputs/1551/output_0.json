{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['2', 'i do not have any fancy quotes', 'when nothing goes right go left'] Output: Real Fancy\nregularly fancy\n\nTests failed:\nNone",
    "code": "\ndef classify_quotes(T, quotes):\n    for quote in quotes:\n        # Split the quote into words\n        words = quote.split()\n        # Check if \"not\" is a separate word in the quote\n        if \"not\" in words:\n            print(\"Real Fancy\")\n        else:\n            print(\"regularly fancy\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().splitlines()\n\n# First line is the number of test cases\nT = int(data[0])\n\n# The following lines are the quotes\nquotes = data[1:T+1]\n\n# Classify each quote\nclassify_quotes(T, quotes)\n",
    "full_code": "\ndef classify_quotes(T, quotes):\n    for quote in quotes:\n        # Split the quote into words\n        words = quote.split()\n        # Check if \"not\" is a separate word in the quote\n        if \"not\" in words:\n            print(\"Real Fancy\")\n        else:\n            print(\"regularly fancy\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().splitlines()\n\n# First line is the number of test cases\nT = int(data[0])\n\n# The following lines are the quotes\nquotes = data[1:T+1]\n\n# Classify each quote\nclassify_quotes(T, quotes)\n",
    "reward": true,
    "program_code": "\ndef classify_quotes(T, quotes):\n    for quote in quotes:\n        # Split the quote into words\n        words = quote.split()\n        # Check if \"not\" is a separate word in the quote\n        if \"not\" in words:\n            print(\"Real Fancy\")\n        else:\n            print(\"regularly fancy\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().splitlines()\n\n# First line is the number of test cases\nT = int(data[0])\n\n# The following lines are the quotes\nquotes = data[1:T+1]\n\n# Classify each quote\nclassify_quotes(T, quotes)\n",
    "program_name": "classify_quotes",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nWe are given a number of quotes, and for each quote, we need to determine if it is \"Real Fancy\" or \"regularly fancy\". A quote is considered \"Real Fancy\" if it contains the word \"not\" as a separate word. Otherwise, it is \"regularly fancy\".\n\n## Conceptual Solution\n\n1. **Input Parsing**: \n   - Read the number of test cases, `T`.\n   - For each test case, read the quote `S`.\n\n2. **Check for \"not\"**:\n   - Split the quote `S` into words.\n   - Check if the word \"not\" is present in the list of words.\n\n3. **Output**:\n   - If \"not\" is found, print \"Real Fancy\".\n   - Otherwise, print \"regularly fancy\".\n\n## Pseudocode\n\n```\nfunction classify_quotes(T, quotes):\n    for each quote in quotes:\n        split the quote into words\n        if \"not\" is in the list of words:\n            print \"Real Fancy\"\n        else:\n            print \"regularly fancy\"\n```\n\n## Final Python Solution\n\n```python\ndef classify_quotes(T, quotes):\n    for quote in quotes:\n        # Split the quote into words\n        words = quote.split()\n        # Check if \"not\" is a separate word in the quote\n        if \"not\" in words:\n            print(\"Real Fancy\")\n        else:\n            print(\"regularly fancy\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().splitlines()\n\n# First line is the number of test cases\nT = int(data[0])\n\n# The following lines are the quotes\nquotes = data[1:T+1]\n\n# Classify each quote\nclassify_quotes(T, quotes)\n```\n\n### Explanation\n\n- **Input Handling**: We read all input at once and split it into lines. The first line gives us the number of test cases, `T`. The subsequent lines contain the quotes.\n- **Word Splitting**: For each quote, we split it into words using the `split()` method, which handles spaces and returns a list of words.\n- **Checking for \"not\"**: We simply check if the word \"not\" is in the list of words. If it is, the quote is \"Real Fancy\"; otherwise, it is \"regularly fancy\".\n- **Output**: We print the result for each quote based on the presence of the word \"not\".",
    "no_parent": false,
    "dependency_used": false
}