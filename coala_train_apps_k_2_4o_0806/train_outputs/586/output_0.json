{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['1', '10 5', 'amigoes  1', 'bannermen 1', 'monarchy 4', 'outliers 5', 'iniciador 10', 'aegimos 2', 'iiiacdnor 1', 'eilorstu 1', 'gimosae 3', 'mnachroy 7'] Output: iniciador 11\nmonarchy 11\namigoes 6\noutliers 6\nbannermen 1\n\nTests failed:\nNone",
    "code": "\ndef sort_characters(name):\n    return ''.join(sorted(name))\n\ndef process_test_case(N, R, submissions):\n    team_scores = {}\n    team_names = {}\n\n    # Process first R submissions to map scrambled names to correct names\n    for i in range(R):\n        scrambled_name, score = submissions[i]\n        sorted_name = sort_characters(scrambled_name)\n        team_names[sorted_name] = scrambled_name\n        team_scores[scrambled_name] = score\n\n    # Process remaining submissions\n    for i in range(R, N):\n        scrambled_name, score = submissions[i]\n        sorted_name = sort_characters(scrambled_name)\n        correct_name = team_names[sorted_name]\n        team_scores[correct_name] += score\n\n    # Sort teams by score (descending) and name (lexicographically)\n    sorted_teams = sorted(team_scores.items(), key=lambda x: (-x[1], x[0]))\n\n    # Output sorted teams\n    for team, score in sorted_teams:\n        print(team, score)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    for _ in range(T):\n        N, R = map(int, data[index].split())\n        index += 1\n        submissions = []\n        \n        for _ in range(N):\n            line = data[index].rsplit(' ', 1)\n            team_name = line[0].strip()\n            score = int(line[1])\n            submissions.append((team_name, score))\n            index += 1\n        \n        process_test_case(N, R, submissions)\n\nmain()\n",
    "full_code": "\ndef sort_characters(name):\n    return ''.join(sorted(name))\n\ndef process_test_case(N, R, submissions):\n    team_scores = {}\n    team_names = {}\n\n    # Process first R submissions to map scrambled names to correct names\n    for i in range(R):\n        scrambled_name, score = submissions[i]\n        sorted_name = sort_characters(scrambled_name)\n        team_names[sorted_name] = scrambled_name\n        team_scores[scrambled_name] = score\n\n    # Process remaining submissions\n    for i in range(R, N):\n        scrambled_name, score = submissions[i]\n        sorted_name = sort_characters(scrambled_name)\n        correct_name = team_names[sorted_name]\n        team_scores[correct_name] += score\n\n    # Sort teams by score (descending) and name (lexicographically)\n    sorted_teams = sorted(team_scores.items(), key=lambda x: (-x[1], x[0]))\n\n    # Output sorted teams\n    for team, score in sorted_teams:\n        print(team, score)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    for _ in range(T):\n        N, R = map(int, data[index].split())\n        index += 1\n        submissions = []\n        \n        for _ in range(N):\n            line = data[index].rsplit(' ', 1)\n            team_name = line[0].strip()\n            score = int(line[1])\n            submissions.append((team_name, score))\n            index += 1\n        \n        process_test_case(N, R, submissions)\n\nmain()\n",
    "reward": true,
    "program_code": "\ndef sort_characters(name):\n    return ''.join(sorted(name))\n\ndef process_test_case(N, R, submissions):\n    team_scores = {}\n    team_names = {}\n\n    # Process first R submissions to map scrambled names to correct names\n    for i in range(R):\n        scrambled_name, score = submissions[i]\n        sorted_name = sort_characters(scrambled_name)\n        team_names[sorted_name] = scrambled_name\n        team_scores[scrambled_name] = score\n\n    # Process remaining submissions\n    for i in range(R, N):\n        scrambled_name, score = submissions[i]\n        sorted_name = sort_characters(scrambled_name)\n        correct_name = team_names[sorted_name]\n        team_scores[correct_name] += score\n\n    # Sort teams by score (descending) and name (lexicographically)\n    sorted_teams = sorted(team_scores.items(), key=lambda x: (-x[1], x[0]))\n\n    # Output sorted teams\n    for team, score in sorted_teams:\n        print(team, score)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    for _ in range(T):\n        N, R = map(int, data[index].split())\n        index += 1\n        submissions = []\n        \n        for _ in range(N):\n            line = data[index].rsplit(' ', 1)\n            team_name = line[0].strip()\n            score = int(line[1])\n            submissions.append((team_name, score))\n            index += 1\n        \n        process_test_case(N, R, submissions)\n\nmain()\n",
    "program_name": "main",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nWe have a programming competition where each team has a unique name, but due to an error, the order of characters in the team names was scrambled. Each team submitted their name and score once within the first half-hour, and then continued to submit scores for the rest of the competition. We need to calculate the total score for each team, identify the correct team names, and then output the teams sorted by their total scores in descending order. If two teams have the same score, they should be sorted lexicographically by their names.\n\n## Conceptual Solution\n\n1. **Input Parsing**: Read the number of test cases. For each test case, read the number of submissions and the number of submissions within the first half-hour. Then, read the submissions, which include scrambled team names and scores.\n\n2. **Identify Teams**: Use the first half-hour submissions to identify the correct team names by sorting the characters in each name. This will allow us to map scrambled names to the correct team names.\n\n3. **Calculate Scores**: For each submission, sort the characters in the team name to find the correct team. Accumulate the scores for each team.\n\n4. **Sort and Output**: Sort the teams by their total scores in descending order. If scores are tied, sort by team name lexicographically. Output the sorted list of team names and their scores.\n\n## Pseudocode\n\n```\nfunction process_test_case(N, R, submissions):\n    team_scores = {}\n    team_names = {}\n\n    // Process first R submissions to map scrambled names to correct names\n    for i from 0 to R-1:\n        scrambled_name, score = submissions[i]\n        sorted_name = sort_characters(scrambled_name)\n        team_names[sorted_name] = scrambled_name\n        team_scores[scrambled_name] = score\n\n    // Process remaining submissions\n    for i from R to N-1:\n        scrambled_name, score = submissions[i]\n        sorted_name = sort_characters(scrambled_name)\n        correct_name = team_names[sorted_name]\n        team_scores[correct_name] += score\n\n    // Sort teams by score and name\n    sorted_teams = sort_by_score_and_name(team_scores)\n\n    // Output sorted teams\n    for team, score in sorted_teams:\n        print(team, score)\n\nfunction main():\n    T = read_integer()\n    for _ in range(T):\n        N, R = read_two_integers()\n        submissions = read_submissions(N)\n        process_test_case(N, R, submissions)\n```\n\n## Python Code\n\n```python\ndef sort_characters(name):\n    return ''.join(sorted(name))\n\ndef process_test_case(N, R, submissions):\n    team_scores = {}\n    team_names = {}\n\n    # Process first R submissions to map scrambled names to correct names\n    for i in range(R):\n        scrambled_name, score = submissions[i]\n        sorted_name = sort_characters(scrambled_name)\n        team_names[sorted_name] = scrambled_name\n        team_scores[scrambled_name] = score\n\n    # Process remaining submissions\n    for i in range(R, N):\n        scrambled_name, score = submissions[i]\n        sorted_name = sort_characters(scrambled_name)\n        correct_name = team_names[sorted_name]\n        team_scores[correct_name] += score\n\n    # Sort teams by score (descending) and name (lexicographically)\n    sorted_teams = sorted(team_scores.items(), key=lambda x: (-x[1], x[0]))\n\n    # Output sorted teams\n    for team, score in sorted_teams:\n        print(team, score)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    \n    for _ in range(T):\n        N, R = map(int, data[index].split())\n        index += 1\n        submissions = []\n        \n        for _ in range(N):\n            line = data[index].rsplit(' ', 1)\n            team_name = line[0].strip()\n            score = int(line[1])\n            submissions.append((team_name, score))\n            index += 1\n        \n        process_test_case(N, R, submissions)\n\nmain()\n```\n\nThis code reads input, processes each test case to identify teams and calculate their scores, and then outputs the sorted list of teams based on the specified criteria.",
    "no_parent": false,
    "dependency_used": false
}