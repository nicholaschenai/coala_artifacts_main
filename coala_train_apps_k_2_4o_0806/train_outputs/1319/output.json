{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['10 3', '1', '3', '7', '6', '-1', '5', '-1', '18', '9', '11', '2', '-1', '4'] Output: 7\n6\n18\n\nTests failed:\nNone",
    "code": "\nimport sys\nimport heapq\n\ndef execute_wealthiest():\n    # Read all input from standard input\n    input = sys.stdin.read\n    data = input().split()\n    \n    # First two numbers are N and M\n    N = int(data[0])\n    M = int(data[1])\n    \n    # Max-heap to store the wealth of citizens\n    max_heap = []\n    \n    # To store the results of each king's visit\n    results = []\n    \n    # Process each line after the first line\n    for i in range(2, len(data)):\n        value = int(data[i])\n        \n        if value == -1:\n            # King's visit, pop the richest citizen\n            richest = -heapq.heappop(max_heap)\n            results.append(richest)\n        else:\n            # Citizen's wealth, push it onto the heap\n            heapq.heappush(max_heap, -value)\n    \n    # Output the results for each king's visit\n    for result in results:\n        print(result)\n\n# Call the function to execute the logic\nexecute_wealthiest()\n",
    "full_code": "\nimport sys\nimport heapq\n\ndef execute_wealthiest():\n    # Read all input from standard input\n    input = sys.stdin.read\n    data = input().split()\n    \n    # First two numbers are N and M\n    N = int(data[0])\n    M = int(data[1])\n    \n    # Max-heap to store the wealth of citizens\n    max_heap = []\n    \n    # To store the results of each king's visit\n    results = []\n    \n    # Process each line after the first line\n    for i in range(2, len(data)):\n        value = int(data[i])\n        \n        if value == -1:\n            # King's visit, pop the richest citizen\n            richest = -heapq.heappop(max_heap)\n            results.append(richest)\n        else:\n            # Citizen's wealth, push it onto the heap\n            heapq.heappush(max_heap, -value)\n    \n    # Output the results for each king's visit\n    for result in results:\n        print(result)\n\n# Call the function to execute the logic\nexecute_wealthiest()\n",
    "reward": true,
    "program_code": "\nimport sys\nimport heapq\n\ndef execute_wealthiest():\n    # Read all input from standard input\n    input = sys.stdin.read\n    data = input().split()\n    \n    # First two numbers are N and M\n    N = int(data[0])\n    M = int(data[1])\n    \n    # Max-heap to store the wealth of citizens\n    max_heap = []\n    \n    # To store the results of each king's visit\n    results = []\n    \n    # Process each line after the first line\n    for i in range(2, len(data)):\n        value = int(data[i])\n        \n        if value == -1:\n            # King's visit, pop the richest citizen\n            richest = -heapq.heappop(max_heap)\n            results.append(richest)\n        else:\n            # Citizen's wealth, push it onto the heap\n            heapq.heappush(max_heap, -value)\n    \n    # Output the results for each king's visit\n    for result in results:\n        print(result)\n\n# Call the function to execute the logic\nexecute_wealthiest()\n",
    "program_name": "execute_wealthiest",
    "dependencies": [],
    "raw_msg": "```python\nimport sys\nimport heapq\n\ndef execute_wealthiest():\n    # Read all input from standard input\n    input = sys.stdin.read\n    data = input().split()\n    \n    # First two numbers are N and M\n    N = int(data[0])\n    M = int(data[1])\n    \n    # Max-heap to store the wealth of citizens\n    max_heap = []\n    \n    # To store the results of each king's visit\n    results = []\n    \n    # Process each line after the first line\n    for i in range(2, len(data)):\n        value = int(data[i])\n        \n        if value == -1:\n            # King's visit, pop the richest citizen\n            richest = -heapq.heappop(max_heap)\n            results.append(richest)\n        else:\n            # Citizen's wealth, push it onto the heap\n            heapq.heappush(max_heap, -value)\n    \n    # Output the results for each king's visit\n    for result in results:\n        print(result)\n\n# Call the function to execute the logic\nexecute_wealthiest()\n```\n\n### Explanation\n\n- **Function Call**: The function `execute_wealthiest()` is called at the end of the script to ensure that the logic is executed when the script runs.\n- **Heap Operations**: We use a max-heap (simulated using negative values with `heapq`) to efficiently track and retrieve the richest citizen.\n- **Input Handling**: The input is read from standard input, split into a list, and processed line by line.\n- **Output**: The wealth of the executed citizen is printed for each king's visit, as required by the problem statement.",
    "no_parent": false,
    "dependency_used": false
}