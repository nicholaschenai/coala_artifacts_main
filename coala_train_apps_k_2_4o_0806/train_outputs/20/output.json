{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: 4\n3 0\n5 1 2\n7 3 5\n10 -1 0\n2 12\n5 7 10\n10 16 20\n3 -100\n100 0 0\n100 -50 50\n200 100 100\n1 100\n99 -100 0\n Output: YES\nNO\nYES\nNO\n\n\nTests failed:\nNone",
    "code": "\ndef canSatisfyAllCustomers():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    q = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(q):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        \n        customers = []\n        for _ in range(n):\n            t_i = int(data[index])\n            l_i = int(data[index + 1])\n            h_i = int(data[index + 2])\n            customers.append((t_i, l_i, h_i))\n            index += 3\n        \n        current_time = 0\n        min_temp = max_temp = m\n        possible = True\n        \n        for t_i, l_i, h_i in customers:\n            time_diff = t_i - current_time\n            \n            # Update possible temperature range\n            min_temp -= time_diff\n            max_temp += time_diff\n            \n            # Check if the current customer's range is satisfiable\n            if max_temp < l_i or min_temp > h_i:\n                possible = False\n                break\n            \n            # Update the possible temperature range to satisfy the current customer\n            min_temp = max(min_temp, l_i)\n            max_temp = min(max_temp, h_i)\n            \n            # Update current time\n            current_time = t_i\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\ncanSatisfyAllCustomers()\n",
    "full_code": "\ndef canSatisfyAllCustomers():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    q = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(q):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        \n        customers = []\n        for _ in range(n):\n            t_i = int(data[index])\n            l_i = int(data[index + 1])\n            h_i = int(data[index + 2])\n            customers.append((t_i, l_i, h_i))\n            index += 3\n        \n        current_time = 0\n        min_temp = max_temp = m\n        possible = True\n        \n        for t_i, l_i, h_i in customers:\n            time_diff = t_i - current_time\n            \n            # Update possible temperature range\n            min_temp -= time_diff\n            max_temp += time_diff\n            \n            # Check if the current customer's range is satisfiable\n            if max_temp < l_i or min_temp > h_i:\n                possible = False\n                break\n            \n            # Update the possible temperature range to satisfy the current customer\n            min_temp = max(min_temp, l_i)\n            max_temp = min(max_temp, h_i)\n            \n            # Update current time\n            current_time = t_i\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\ncanSatisfyAllCustomers()\n",
    "reward": true,
    "program_code": "\ndef canSatisfyAllCustomers():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    q = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(q):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        \n        customers = []\n        for _ in range(n):\n            t_i = int(data[index])\n            l_i = int(data[index + 1])\n            h_i = int(data[index + 2])\n            customers.append((t_i, l_i, h_i))\n            index += 3\n        \n        current_time = 0\n        min_temp = max_temp = m\n        possible = True\n        \n        for t_i, l_i, h_i in customers:\n            time_diff = t_i - current_time\n            \n            # Update possible temperature range\n            min_temp -= time_diff\n            max_temp += time_diff\n            \n            # Check if the current customer's range is satisfiable\n            if max_temp < l_i or min_temp > h_i:\n                possible = False\n                break\n            \n            # Update the possible temperature range to satisfy the current customer\n            min_temp = max(min_temp, l_i)\n            max_temp = min(max_temp, h_i)\n            \n            # Update current time\n            current_time = t_i\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\ncanSatisfyAllCustomers()\n",
    "program_name": "canSatisfyAllCustomers",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nGildong owns a restaurant and wants to ensure that the temperature is comfortable for all customers who have made reservations. Each customer has a preferred temperature range and a specific time they will arrive. The restaurant's air conditioner can be set to heat, cool, or remain off, and it starts off. The goal is to determine if it's possible to adjust the temperature to satisfy all customers at their respective arrival times.\n\n## Conceptual Solution\n\n1. **Initial Setup**: Start with the initial temperature and the air conditioner off.\n2. **Iterate Over Customers**: For each customer, calculate the time available to adjust the temperature from the previous customer's visit (or from time 0 for the first customer).\n3. **Temperature Range Calculation**: For each customer, determine the possible temperature range that can be achieved given the time available and the previous temperature.\n4. **Check Satisfaction**: Ensure that the customer's preferred temperature range overlaps with the possible temperature range. If it does not, it's impossible to satisfy the customer.\n5. **Update Temperature Range**: Adjust the possible temperature range for the next customer based on the current customer's preferred range and the time available.\n\n## Pseudocode\n\n```\nfunction canSatisfyAllCustomers(test_cases):\n    for each test_case in test_cases:\n        read n, m\n        customers = list of (t_i, l_i, h_i) for each customer\n        current_time = 0\n        min_temp = max_temp = m\n        \n        for each customer in customers:\n            t_i, l_i, h_i = customer\n            time_diff = t_i - current_time\n            \n            # Update possible temperature range\n            min_temp -= time_diff\n            max_temp += time_diff\n            \n            # Check if the current customer's range is satisfiable\n            if max_temp < l_i or min_temp > h_i:\n                print \"NO\"\n                break\n            \n            # Update the possible temperature range to satisfy the current customer\n            min_temp = max(min_temp, l_i)\n            max_temp = min(max_temp, h_i)\n            \n            # Update current time\n            current_time = t_i\n        else:\n            print \"YES\"\n```\n\n## Final Python Solution\n\n```python\ndef canSatisfyAllCustomers():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    q = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(q):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        \n        customers = []\n        for _ in range(n):\n            t_i = int(data[index])\n            l_i = int(data[index + 1])\n            h_i = int(data[index + 2])\n            customers.append((t_i, l_i, h_i))\n            index += 3\n        \n        current_time = 0\n        min_temp = max_temp = m\n        possible = True\n        \n        for t_i, l_i, h_i in customers:\n            time_diff = t_i - current_time\n            \n            # Update possible temperature range\n            min_temp -= time_diff\n            max_temp += time_diff\n            \n            # Check if the current customer's range is satisfiable\n            if max_temp < l_i or min_temp > h_i:\n                possible = False\n                break\n            \n            # Update the possible temperature range to satisfy the current customer\n            min_temp = max(min_temp, l_i)\n            max_temp = min(max_temp, h_i)\n            \n            # Update current time\n            current_time = t_i\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\ncanSatisfyAllCustomers()\n```\n\nThis solution iterates through each test case, updating the possible temperature range based on the time available and the customer's preferred range, and checks if all customers can be satisfied.",
    "no_parent": false,
    "dependency_used": false
}