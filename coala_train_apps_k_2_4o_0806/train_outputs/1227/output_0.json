{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\nNone\n\nTests failed:\n Input: ['2', 'blue yellow green orange black green', 'green yellow green orange black green'] Expected output: [{'NO'}, {'YES'}] # Execution output: []\nNo output detected. You might want to check the reading from / writing to standard IO.\nA common mistake is to put the IO inside a function, but the function is not called.\n",
    "code": "\ndef check_adjacent_sides(colors):\n    # Define the sets of adjacent sides\n    adjacent_sets = [\n        (0, 2, 4), (0, 3, 4), (0, 2, 5), (0, 3, 5),\n        (1, 2, 4), (1, 3, 4), (1, 2, 5), (1, 3, 5)\n    ]\n    \n    # Check each set of adjacent sides\n    for a, b, c in adjacent_sets:\n        if colors[a] == colors[b] == colors[c]:\n            return \"YES\"\n    return \"NO\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    T = int(data[0])\n    results = []\n    \n    for i in range(1, T + 1):\n        colors = data[i].split()\n        result = check_adjacent_sides(colors)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\n",
    "full_code": "\ndef check_adjacent_sides(colors):\n    # Define the sets of adjacent sides\n    adjacent_sets = [\n        (0, 2, 4), (0, 3, 4), (0, 2, 5), (0, 3, 5),\n        (1, 2, 4), (1, 3, 4), (1, 2, 5), (1, 3, 5)\n    ]\n    \n    # Check each set of adjacent sides\n    for a, b, c in adjacent_sets:\n        if colors[a] == colors[b] == colors[c]:\n            return \"YES\"\n    return \"NO\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    T = int(data[0])\n    results = []\n    \n    for i in range(1, T + 1):\n        colors = data[i].split()\n        result = check_adjacent_sides(colors)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\n",
    "reward": false,
    "program_code": "\ndef check_adjacent_sides(colors):\n    # Define the sets of adjacent sides\n    adjacent_sets = [\n        (0, 2, 4), (0, 3, 4), (0, 2, 5), (0, 3, 5),\n        (1, 2, 4), (1, 3, 4), (1, 2, 5), (1, 3, 5)\n    ]\n    \n    # Check each set of adjacent sides\n    for a, b, c in adjacent_sets:\n        if colors[a] == colors[b] == colors[c]:\n            return \"YES\"\n    return \"NO\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    T = int(data[0])\n    results = []\n    \n    for i in range(1, T + 1):\n        colors = data[i].split()\n        result = check_adjacent_sides(colors)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\n",
    "program_name": "main",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nWe have a cube with each of its six sides painted in one of six possible colors: black, blue, red, green, yellow, or orange. For each test case, we are given the colors of the six sides in a specific order: front, back, left, right, top, and bottom. Our task is to determine if there are three sides that are pairwise adjacent and painted in the same color. If such a set of sides exists, we output \"YES\"; otherwise, we output \"NO\".\n\n## Conceptual Solution\n\n1. **Understand Adjacency on a Cube**: On a cube, the following sets of sides are pairwise adjacent:\n   - (front, left, top)\n   - (front, right, top)\n   - (front, left, bottom)\n   - (front, right, bottom)\n   - (back, left, top)\n   - (back, right, top)\n   - (back, left, bottom)\n   - (back, right, bottom)\n\n2. **Check Each Test Case**: For each test case, check if any of the above sets of sides have the same color.\n\n3. **Output the Result**: If any set of adjacent sides has the same color, output \"YES\". Otherwise, output \"NO\".\n\n## Pseudocode\n\n```\nfunction check_adjacent_sides(colors):\n    Define the sets of adjacent sides:\n    adjacent_sets = [\n        (0, 2, 4), (0, 3, 4), (0, 2, 5), (0, 3, 5),\n        (1, 2, 4), (1, 3, 4), (1, 2, 5), (1, 3, 5)\n    ]\n    \n    for each set in adjacent_sets:\n        if colors[set[0]] == colors[set[1]] == colors[set[2]]:\n            return \"YES\"\n    return \"NO\"\n\nfunction main():\n    Read integer T (number of test cases)\n    for each test case:\n        Read the six colors\n        result = check_adjacent_sides(colors)\n        Print result\n```\n\n## Final Python Solution\n\n```python\ndef check_adjacent_sides(colors):\n    # Define the sets of adjacent sides\n    adjacent_sets = [\n        (0, 2, 4), (0, 3, 4), (0, 2, 5), (0, 3, 5),\n        (1, 2, 4), (1, 3, 4), (1, 2, 5), (1, 3, 5)\n    ]\n    \n    # Check each set of adjacent sides\n    for a, b, c in adjacent_sets:\n        if colors[a] == colors[b] == colors[c]:\n            return \"YES\"\n    return \"NO\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    T = int(data[0])\n    results = []\n    \n    for i in range(1, T + 1):\n        colors = data[i].split()\n        result = check_adjacent_sides(colors)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\n```\n\nThis solution reads input from standard input, processes each test case to check for adjacent sides with the same color, and outputs \"YES\" or \"NO\" accordingly.",
    "no_parent": false,
    "dependency_used": false
}