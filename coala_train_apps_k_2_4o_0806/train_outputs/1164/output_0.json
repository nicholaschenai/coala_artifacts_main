{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['3 3', '16 24 60', '498 861 589', '14 24 62', '72 557 819', '16 15 69', '435 779 232'] Output: 2\n1\n3\n\nTests failed:\nNone",
    "code": "\ndef calculate_difficulty(P, S, problems):\n    difficulties = []\n    for i in range(P):\n        scores = problems[i][0]\n        contestants = problems[i][1]\n        \n        # Pair scores with contestants and sort by score\n        paired = list(zip(scores, contestants))\n        paired.sort()  # Sort by score since scores are the first element in the tuple\n        \n        # Count decreases in contestants\n        decrease_count = 0\n        for j in range(S - 1):\n            if paired[j][1] > paired[j + 1][1]:\n                decrease_count += 1\n        \n        # Store difficulty as a tuple (decrease_count, i+1)\n        difficulties.append((decrease_count, i + 1))\n    \n    # Sort difficulties by (decrease_count, -index)\n    difficulties.sort(key=lambda x: (x[0], -x[1]))\n    \n    # Extract and print indices\n    for difficulty in difficulties:\n        print(difficulty[1])\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nP = int(data[0])\nS = int(data[1])\nproblems = []\n\nindex = 2\nfor _ in range(P):\n    scores = list(map(int, data[index:index + S]))\n    contestants = list(map(int, data[index + S:index + 2 * S]))\n    problems.append((scores, contestants))\n    index += 2 * S\n\ncalculate_difficulty(P, S, problems)\n",
    "full_code": "\ndef calculate_difficulty(P, S, problems):\n    difficulties = []\n    for i in range(P):\n        scores = problems[i][0]\n        contestants = problems[i][1]\n        \n        # Pair scores with contestants and sort by score\n        paired = list(zip(scores, contestants))\n        paired.sort()  # Sort by score since scores are the first element in the tuple\n        \n        # Count decreases in contestants\n        decrease_count = 0\n        for j in range(S - 1):\n            if paired[j][1] > paired[j + 1][1]:\n                decrease_count += 1\n        \n        # Store difficulty as a tuple (decrease_count, i+1)\n        difficulties.append((decrease_count, i + 1))\n    \n    # Sort difficulties by (decrease_count, -index)\n    difficulties.sort(key=lambda x: (x[0], -x[1]))\n    \n    # Extract and print indices\n    for difficulty in difficulties:\n        print(difficulty[1])\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nP = int(data[0])\nS = int(data[1])\nproblems = []\n\nindex = 2\nfor _ in range(P):\n    scores = list(map(int, data[index:index + S]))\n    contestants = list(map(int, data[index + S:index + 2 * S]))\n    problems.append((scores, contestants))\n    index += 2 * S\n\ncalculate_difficulty(P, S, problems)\n",
    "reward": true,
    "program_code": "\ndef calculate_difficulty(P, S, problems):\n    difficulties = []\n    for i in range(P):\n        scores = problems[i][0]\n        contestants = problems[i][1]\n        \n        # Pair scores with contestants and sort by score\n        paired = list(zip(scores, contestants))\n        paired.sort()  # Sort by score since scores are the first element in the tuple\n        \n        # Count decreases in contestants\n        decrease_count = 0\n        for j in range(S - 1):\n            if paired[j][1] > paired[j + 1][1]:\n                decrease_count += 1\n        \n        # Store difficulty as a tuple (decrease_count, i+1)\n        difficulties.append((decrease_count, i + 1))\n    \n    # Sort difficulties by (decrease_count, -index)\n    difficulties.sort(key=lambda x: (x[0], -x[1]))\n    \n    # Extract and print indices\n    for difficulty in difficulties:\n        print(difficulty[1])\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nP = int(data[0])\nS = int(data[1])\nproblems = []\n\nindex = 2\nfor _ in range(P):\n    scores = list(map(int, data[index:index + S]))\n    contestants = list(map(int, data[index + S:index + 2 * S]))\n    problems.append((scores, contestants))\n    index += 2 * S\n\ncalculate_difficulty(P, S, problems)\n",
    "program_name": "calculate_difficulty",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nWe have a contest with multiple problems, each containing several subtasks. Each subtask has a score and a number of contestants who solved it. The difficulty of a problem is determined by counting how many times the number of contestants solving a subtask decreases as the score increases. We need to sort the problems by difficulty, where a problem is considered more difficult if it has more decreases, or if the number of decreases is the same, the problem with the higher index is considered more difficult. Finally, we output the indices of the problems in increasing order of difficulty.\n\n## Conceptual Solution\n\n1. **Input Parsing**: Read the number of problems `P` and the number of subtasks `S`. For each problem, read the scores and the number of contestants who solved each subtask.\n\n2. **Calculate Difficulty**: For each problem, sort the subtasks by score. Count the number of times the number of contestants decreases from one subtask to the next.\n\n3. **Sort Problems**: Create a list of tuples where each tuple contains the difficulty count and the problem index. Sort this list first by the difficulty count in ascending order, and then by the problem index in descending order if the difficulty counts are the same.\n\n4. **Output**: Extract and print the problem indices from the sorted list.\n\n## Pseudocode\n\n```\nfunction calculate_difficulty(P, S, problems):\n    difficulties = []\n    for i from 0 to P-1:\n        scores = problems[i][0]\n        contestants = problems[i][1]\n        \n        // Pair scores with contestants and sort by score\n        paired = zip(scores, contestants)\n        sorted_paired = sort(paired by score)\n        \n        // Count decreases in contestants\n        decrease_count = 0\n        for j from 0 to S-2:\n            if sorted_paired[j][1] > sorted_paired[j+1][1]:\n                decrease_count += 1\n        \n        // Store difficulty as a tuple (decrease_count, i+1)\n        difficulties.append((decrease_count, i+1))\n    \n    // Sort difficulties by (decrease_count, -index)\n    sorted_difficulties = sort(difficulties by (decrease_count, -index))\n    \n    // Extract and print indices\n    for difficulty in sorted_difficulties:\n        print(difficulty[1])\n\n// Read input and call calculate_difficulty\n```\n\n## Python Code\n\n```python\ndef calculate_difficulty(P, S, problems):\n    difficulties = []\n    for i in range(P):\n        scores = problems[i][0]\n        contestants = problems[i][1]\n        \n        # Pair scores with contestants and sort by score\n        paired = list(zip(scores, contestants))\n        paired.sort()  # Sort by score since scores are the first element in the tuple\n        \n        # Count decreases in contestants\n        decrease_count = 0\n        for j in range(S - 1):\n            if paired[j][1] > paired[j + 1][1]:\n                decrease_count += 1\n        \n        # Store difficulty as a tuple (decrease_count, i+1)\n        difficulties.append((decrease_count, i + 1))\n    \n    # Sort difficulties by (decrease_count, -index)\n    difficulties.sort(key=lambda x: (x[0], -x[1]))\n    \n    # Extract and print indices\n    for difficulty in difficulties:\n        print(difficulty[1])\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nP = int(data[0])\nS = int(data[1])\nproblems = []\n\nindex = 2\nfor _ in range(P):\n    scores = list(map(int, data[index:index + S]))\n    contestants = list(map(int, data[index + S:index + 2 * S]))\n    problems.append((scores, contestants))\n    index += 2 * S\n\ncalculate_difficulty(P, S, problems)\n```\n\nThis code reads the input, calculates the difficulty for each problem, sorts them according to the specified criteria, and outputs the indices in the required order.",
    "no_parent": false,
    "dependency_used": false
}