{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['2', '1 2', '2 1'] Output: 2\n2\n\nTests failed:\nNone",
    "code": "\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    MOD = 10**6 + 3\n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        X = int(data[index + 1])\n        index += 2\n        \n        factorial_mod = 1\n        for i in range(1, N + 1):\n            factorial_mod = (factorial_mod * i) % MOD\n        \n        result = (factorial_mod * X) % MOD\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\n# Call the solve function to execute the logic\nsolve()\n",
    "full_code": "\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    MOD = 10**6 + 3\n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        X = int(data[index + 1])\n        index += 2\n        \n        factorial_mod = 1\n        for i in range(1, N + 1):\n            factorial_mod = (factorial_mod * i) % MOD\n        \n        result = (factorial_mod * X) % MOD\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\n# Call the solve function to execute the logic\nsolve()\n",
    "reward": true,
    "program_code": "\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    MOD = 10**6 + 3\n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        X = int(data[index + 1])\n        index += 2\n        \n        factorial_mod = 1\n        for i in range(1, N + 1):\n            factorial_mod = (factorial_mod * i) % MOD\n        \n        result = (factorial_mod * X) % MOD\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\n# Call the solve function to execute the logic\nsolve()\n",
    "program_name": "solve",
    "dependencies": [],
    "raw_msg": "```python\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    MOD = 10**6 + 3\n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(T):\n        N = int(data[index])\n        X = int(data[index + 1])\n        index += 2\n        \n        factorial_mod = 1\n        for i in range(1, N + 1):\n            factorial_mod = (factorial_mod * i) % MOD\n        \n        result = (factorial_mod * X) % MOD\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\n# Call the solve function to execute the logic\nsolve()\n```",
    "no_parent": false,
    "dependency_used": false
}