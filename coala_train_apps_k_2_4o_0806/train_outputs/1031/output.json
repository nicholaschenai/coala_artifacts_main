{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['4', '5 6', '6 10', '258303 89837245228', '616153 77878145466'] Output: [{'5.00000', '3.00000', '4.00000'}, {'-1'}, {'-1'}, {'546189.769984', '285168.817674', '616153.000000'}]\n\nTests failed:\nNone",
    "code": "\nimport sys\nimport math\n\ndef solve_triangle(H, S):\n    if H**4 < 16 * S**2:\n        return -1\n    else:\n        discriminant = H**4 - 16 * S**2\n        sqrt_discriminant = math.sqrt(discriminant)\n        \n        x1 = (H**2 + sqrt_discriminant) / 2\n        x2 = (H**2 - sqrt_discriminant) / 2\n        \n        if x1 >= 0:\n            a1 = math.sqrt(x1)\n            b1 = 2 * S / a1\n            if a1 > 0 and b1 > 0:\n                return sorted([a1, b1, H])\n        \n        if x2 >= 0:\n            a2 = math.sqrt(x2)\n            b2 = 2 * S / a2\n            if a2 > 0 and b2 > 0:\n                return sorted([a2, b2, H])\n        \n        return -1\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        H = int(data[index])\n        S = int(data[index + 1])\n        index += 2\n        \n        result = solve_triangle(H, S)\n        if result == -1:\n            results.append(\"-1\")\n        else:\n            results.append(f\"{result[0]:.5f} {result[1]:.5f} {result[2]:.5f}\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n",
    "full_code": "\nimport sys\nimport math\n\ndef solve_triangle(H, S):\n    if H**4 < 16 * S**2:\n        return -1\n    else:\n        discriminant = H**4 - 16 * S**2\n        sqrt_discriminant = math.sqrt(discriminant)\n        \n        x1 = (H**2 + sqrt_discriminant) / 2\n        x2 = (H**2 - sqrt_discriminant) / 2\n        \n        if x1 >= 0:\n            a1 = math.sqrt(x1)\n            b1 = 2 * S / a1\n            if a1 > 0 and b1 > 0:\n                return sorted([a1, b1, H])\n        \n        if x2 >= 0:\n            a2 = math.sqrt(x2)\n            b2 = 2 * S / a2\n            if a2 > 0 and b2 > 0:\n                return sorted([a2, b2, H])\n        \n        return -1\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        H = int(data[index])\n        S = int(data[index + 1])\n        index += 2\n        \n        result = solve_triangle(H, S)\n        if result == -1:\n            results.append(\"-1\")\n        else:\n            results.append(f\"{result[0]:.5f} {result[1]:.5f} {result[2]:.5f}\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n",
    "reward": true,
    "program_code": "\nimport sys\nimport math\n\ndef solve_triangle(H, S):\n    if H**4 < 16 * S**2:\n        return -1\n    else:\n        discriminant = H**4 - 16 * S**2\n        sqrt_discriminant = math.sqrt(discriminant)\n        \n        x1 = (H**2 + sqrt_discriminant) / 2\n        x2 = (H**2 - sqrt_discriminant) / 2\n        \n        if x1 >= 0:\n            a1 = math.sqrt(x1)\n            b1 = 2 * S / a1\n            if a1 > 0 and b1 > 0:\n                return sorted([a1, b1, H])\n        \n        if x2 >= 0:\n            a2 = math.sqrt(x2)\n            b2 = 2 * S / a2\n            if a2 > 0 and b2 > 0:\n                return sorted([a2, b2, H])\n        \n        return -1\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        H = int(data[index])\n        S = int(data[index + 1])\n        index += 2\n        \n        result = solve_triangle(H, S)\n        if result == -1:\n            results.append(\"-1\")\n        else:\n            results.append(f\"{result[0]:.5f} {result[1]:.5f} {result[2]:.5f}\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n",
    "program_name": "main",
    "dependencies": [],
    "raw_msg": "### Problem Restatement\n\nWe need to determine if there exists a right-angled triangle with a given hypotenuse \\( H \\) and area \\( S \\). If such a triangle exists, we should output the lengths of its sides in non-decreasing order. If no such triangle exists, we should output -1.\n\n### Conceptual Solution\n\n1. **Understanding the Triangle Properties**:\n   - For a right-angled triangle with sides \\( a \\), \\( b \\), and hypotenuse \\( c \\), the Pythagorean theorem states: \\( a^2 + b^2 = c^2 \\).\n   - The area \\( S \\) of the triangle is given by: \\( S = \\frac{1}{2} \\times a \\times b \\).\n\n2. **Formulating the Problem**:\n   - We are given \\( c = H \\) and \\( S \\).\n   - We need to find \\( a \\) and \\( b \\) such that:\n     - \\( a^2 + b^2 = H^2 \\)\n     - \\( \\frac{1}{2} \\times a \\times b = S \\)\n\n3. **Deriving the Equations**:\n   - From the area equation: \\( a \\times b = 2S \\).\n   - Substitute \\( b = \\frac{2S}{a} \\) into the Pythagorean equation:\n     \\[\n     a^2 + \\left(\\frac{2S}{a}\\right)^2 = H^2\n     \\]\n   - Simplify to get a quadratic equation in terms of \\( a \\):\n     \\[\n     a^4 - H^2a^2 + 4S^2 = 0\n     \\]\n\n4. **Solving the Quadratic Equation**:\n   - Let \\( x = a^2 \\). The equation becomes:\n     \\[\n     x^2 - H^2x + 4S^2 = 0\n     \\]\n   - Solve for \\( x \\) using the quadratic formula:\n     \\[\n     x = \\frac{H^2 \\pm \\sqrt{H^4 - 16S^2}}{2}\n     \\]\n   - Check if the discriminant \\( H^4 - 16S^2 \\) is non-negative to ensure real solutions.\n\n5. **Finding \\( a \\) and \\( b \\)**:\n   - If valid \\( x \\) is found, compute \\( a = \\sqrt{x} \\) and \\( b = \\frac{2S}{a} \\).\n   - Ensure \\( a \\) and \\( b \\) are positive and satisfy the original conditions.\n\n### Pseudocode\n\n```\nfunction solve_triangle(H, S):\n    if H^4 < 16 * S^2:\n        return -1\n    else:\n        discriminant = H^4 - 16 * S^2\n        x1 = (H^2 + sqrt(discriminant)) / 2\n        x2 = (H^2 - sqrt(discriminant)) / 2\n        if x1 >= 0:\n            a1 = sqrt(x1)\n            b1 = 2 * S / a1\n            if a1 > 0 and b1 > 0:\n                return sorted([a1, b1, H])\n        if x2 >= 0:\n            a2 = sqrt(x2)\n            b2 = 2 * S / a2\n            if a2 > 0 and b2 > 0:\n                return sorted([a2, b2, H])\n        return -1\n\nfunction main():\n    read T\n    for each test case:\n        read H, S\n        result = solve_triangle(H, S)\n        print result\n```\n\n### Python Code\n\n```python\nimport sys\nimport math\n\ndef solve_triangle(H, S):\n    if H**4 < 16 * S**2:\n        return -1\n    else:\n        discriminant = H**4 - 16 * S**2\n        sqrt_discriminant = math.sqrt(discriminant)\n        \n        x1 = (H**2 + sqrt_discriminant) / 2\n        x2 = (H**2 - sqrt_discriminant) / 2\n        \n        if x1 >= 0:\n            a1 = math.sqrt(x1)\n            b1 = 2 * S / a1\n            if a1 > 0 and b1 > 0:\n                return sorted([a1, b1, H])\n        \n        if x2 >= 0:\n            a2 = math.sqrt(x2)\n            b2 = 2 * S / a2\n            if a2 > 0 and b2 > 0:\n                return sorted([a2, b2, H])\n        \n        return -1\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        H = int(data[index])\n        S = int(data[index + 1])\n        index += 2\n        \n        result = solve_triangle(H, S)\n        if result == -1:\n            results.append(\"-1\")\n        else:\n            results.append(f\"{result[0]:.5f} {result[1]:.5f} {result[2]:.5f}\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis code reads input, processes each test case, and outputs the results. It uses the derived quadratic equation to find possible side lengths of the triangle and checks if they satisfy the given conditions.",
    "no_parent": false,
    "dependency_used": false
}