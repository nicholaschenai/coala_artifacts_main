{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\nTests failed:\nNone",
    "code": "\ndef find_first_index(arr, element):\n    # Find the first index of the element in the sorted array\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return -1\n\ndef find_last_index(arr, element):\n    # Find the last index of the element in the sorted array\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == element:\n            return i\n    return -1\n\ndef is_majority(arr, n, element):\n    # Check if the array is empty\n    if n == 0:\n        return False\n    \n    # Find the first occurrence of the element\n    first_index = find_first_index(arr, element)\n    # If the element is not found, return False\n    if first_index == -1:\n        return False\n    \n    # Find the last occurrence of the element\n    last_index = find_last_index(arr, element)\n    # Calculate the count of the element\n    count = last_index - first_index + 1\n    \n    # Check if the count is greater than n/2\n    return count > n / 2\n",
    "full_code": "\ndef find_first_index(arr, element):\n    # Find the first index of the element in the sorted array\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return -1\n\ndef find_last_index(arr, element):\n    # Find the last index of the element in the sorted array\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == element:\n            return i\n    return -1\n\ndef is_majority(arr, n, element):\n    # Check if the array is empty\n    if n == 0:\n        return False\n    \n    # Find the first occurrence of the element\n    first_index = find_first_index(arr, element)\n    # If the element is not found, return False\n    if first_index == -1:\n        return False\n    \n    # Find the last occurrence of the element\n    last_index = find_last_index(arr, element)\n    # Calculate the count of the element\n    count = last_index - first_index + 1\n    \n    # Check if the count is greater than n/2\n    return count > n / 2\n",
    "reward": true,
    "program_code": "\ndef find_first_index(arr, element):\n    # Find the first index of the element in the sorted array\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return -1\n\ndef find_last_index(arr, element):\n    # Find the last index of the element in the sorted array\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == element:\n            return i\n    return -1\n\ndef is_majority(arr, n, element):\n    # Check if the array is empty\n    if n == 0:\n        return False\n    \n    # Find the first occurrence of the element\n    first_index = find_first_index(arr, element)\n    # If the element is not found, return False\n    if first_index == -1:\n        return False\n    \n    # Find the last occurrence of the element\n    last_index = find_last_index(arr, element)\n    # Calculate the count of the element\n    count = last_index - first_index + 1\n    \n    # Check if the count is greater than n/2\n    return count > n / 2\n",
    "program_name": "is_majority",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   We need to create a function that checks if a given element appears more than half the time in a sorted array. If it does, we call it the \"majority element.\"\n\n2. **Conceptualize a solution first in plain English**: \n   Since the array is sorted, we can easily find the first and last occurrence of the element. If the count of the element (which can be calculated using the indices of its first and last occurrence) is greater than half the length of the array, then it is the majority element.\n\n3. **Write a pseudocode solution**:\n   ```\n   function is_majority(arr, n, element):\n       if n is 0:\n           return False\n       \n       first_index = find_first_index(arr, element)\n       if first_index is -1:\n           return False\n       \n       last_index = find_last_index(arr, element)\n       count = last_index - first_index + 1\n       \n       return count > n / 2\n\n   function find_first_index(arr, element):\n       for i from 0 to length of arr:\n           if arr[i] == element:\n               return i\n       return -1\n\n   function find_last_index(arr, element):\n       for i from length of arr - 1 down to 0:\n           if arr[i] == element:\n               return i\n       return -1\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef find_first_index(arr, element):\n    # Find the first index of the element in the sorted array\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return -1\n\ndef find_last_index(arr, element):\n    # Find the last index of the element in the sorted array\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == element:\n            return i\n    return -1\n\ndef is_majority(arr, n, element):\n    # Check if the array is empty\n    if n == 0:\n        return False\n    \n    # Find the first occurrence of the element\n    first_index = find_first_index(arr, element)\n    # If the element is not found, return False\n    if first_index == -1:\n        return False\n    \n    # Find the last occurrence of the element\n    last_index = find_last_index(arr, element)\n    # Calculate the count of the element\n    count = last_index - first_index + 1\n    \n    # Check if the count is greater than n/2\n    return count > n / 2\n```",
    "no_parent": true,
    "dependency_used": false
}