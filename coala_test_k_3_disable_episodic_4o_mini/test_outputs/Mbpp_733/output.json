{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\nTests failed:\nNone",
    "code": "\ndef find_first_occurrence(array, target):\n    left = 0  # Initialize the left pointer\n    right = len(array) - 1  # Initialize the right pointer\n    result = -1  # To store the index of the first occurrence\n\n    # Perform binary search\n    while left <= right:\n        mid = (left + right) // 2  # Calculate the middle index\n        if array[mid] == target:  # Check if the middle element is the target\n            result = mid  # Found the target, store the index\n            right = mid - 1  # Continue searching in the left half\n        elif array[mid] < target:  # If the middle element is less than the target\n            left = mid + 1  # Search in the right half\n        else:  # If the middle element is greater than the target\n            right = mid - 1  # Search in the left half\n\n    return result  # Return the index of the first occurrence or -1 if not found\n",
    "full_code": "\ndef find_first_occurrence(array, target):\n    left = 0  # Initialize the left pointer\n    right = len(array) - 1  # Initialize the right pointer\n    result = -1  # To store the index of the first occurrence\n\n    # Perform binary search\n    while left <= right:\n        mid = (left + right) // 2  # Calculate the middle index\n        if array[mid] == target:  # Check if the middle element is the target\n            result = mid  # Found the target, store the index\n            right = mid - 1  # Continue searching in the left half\n        elif array[mid] < target:  # If the middle element is less than the target\n            left = mid + 1  # Search in the right half\n        else:  # If the middle element is greater than the target\n            right = mid - 1  # Search in the left half\n\n    return result  # Return the index of the first occurrence or -1 if not found\n",
    "reward": true,
    "program_code": "\ndef find_first_occurrence(array, target):\n    left = 0  # Initialize the left pointer\n    right = len(array) - 1  # Initialize the right pointer\n    result = -1  # To store the index of the first occurrence\n\n    # Perform binary search\n    while left <= right:\n        mid = (left + right) // 2  # Calculate the middle index\n        if array[mid] == target:  # Check if the middle element is the target\n            result = mid  # Found the target, store the index\n            right = mid - 1  # Continue searching in the left half\n        elif array[mid] < target:  # If the middle element is less than the target\n            left = mid + 1  # Search in the right half\n        else:  # If the middle element is greater than the target\n            right = mid - 1  # Search in the left half\n\n    return result  # Return the index of the first occurrence or -1 if not found\n",
    "program_name": "find_first_occurrence",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   The task is to find the index of the first occurrence of a specific number in a sorted list of numbers. The function should return the index of this number if it exists, or indicate that it does not exist if it is not found.\n\n2. **Conceptualize a solution first in plain English**: \n   Since the array is sorted, we can use a binary search approach to efficiently find the first occurrence of the target number. We will maintain two pointers to track the search space and adjust them based on comparisons with the target number. If we find the target, we will continue searching to the left to ensure it is the first occurrence.\n\n3. **Write a pseudocode solution**:\n   ```\n   function find_first_occurrence(array, target):\n       set left to 0\n       set right to length of array - 1\n       set result to -1  // to store the index of the first occurrence\n\n       while left <= right:\n           set mid to (left + right) // 2\n           if array[mid] == target:\n               result = mid  // found the target, store the index\n               right = mid - 1  // continue searching in the left half\n           else if array[mid] < target:\n               left = mid + 1  // search in the right half\n           else:\n               right = mid - 1  // search in the left half\n\n       return result  // return the index of the first occurrence or -1 if not found\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef find_first_occurrence(array, target):\n    left = 0  # Initialize the left pointer\n    right = len(array) - 1  # Initialize the right pointer\n    result = -1  # To store the index of the first occurrence\n\n    # Perform binary search\n    while left <= right:\n        mid = (left + right) // 2  # Calculate the middle index\n        if array[mid] == target:  # Check if the middle element is the target\n            result = mid  # Found the target, store the index\n            right = mid - 1  # Continue searching in the left half\n        elif array[mid] < target:  # If the middle element is less than the target\n            left = mid + 1  # Search in the right half\n        else:  # If the middle element is greater than the target\n            right = mid - 1  # Search in the left half\n\n    return result  # Return the index of the first occurrence or -1 if not found\n```",
    "no_parent": true,
    "dependency_used": false
}