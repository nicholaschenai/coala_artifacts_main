{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert is_octagonal(5) == 65\n\nTests failed:\nNone",
    "code": "\n# Define a function to calculate the nth octagonal number\ndef is_octagonal(n: int) -> int:\n    # The formula for the nth octagonal number is n * (3n - 2)\n    return n * (3 * n - 2)\n\n# The function is declared last as per the instructions\n",
    "full_code": "\n# Define a function to calculate the nth octagonal number\ndef is_octagonal(n: int) -> int:\n    # The formula for the nth octagonal number is n * (3n - 2)\n    return n * (3 * n - 2)\n\n# The function is declared last as per the instructions\n",
    "reward": true,
    "program_code": "\n# Define a function to calculate the nth octagonal number\ndef is_octagonal(n: int) -> int:\n    # The formula for the nth octagonal number is n * (3n - 2)\n    return n * (3 * n - 2)\n\n# The function is declared last as per the instructions\n",
    "program_name": "is_octagonal",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   The task is to create a function that calculates the nth octagonal number. The octagonal numbers are a specific sequence of numbers that can be derived from a mathematical formula.\n\n2. **Conceptualize a solution first in plain English**: \n   The nth octagonal number can be calculated using the formula:\n   \\[\n   O(n) = n(3n - 2)\n   \\]\n   This formula allows us to compute the nth octagonal number directly without needing to iterate through previous numbers in the sequence.\n\n3. **Write a pseudocode solution**:\n   ```\n   FUNCTION is_octagonal(n: int) -> int:\n       RETURN n * (3 * n - 2)\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\n# Define a function to calculate the nth octagonal number\ndef is_octagonal(n: int) -> int:\n    # The formula for the nth octagonal number is n * (3n - 2)\n    return n * (3 * n - 2)\n\n# The function is declared last as per the instructions\n```",
    "no_parent": true,
    "dependency_used": false
}