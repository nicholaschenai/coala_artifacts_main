{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert not is_perfect_square(10)\n\nTests failed:\nNone",
    "code": "\ndef is_perfect_square(n: int) -> bool:\n    # Check if the number is negative\n    if n < 0:\n        return False  # Negative numbers cannot be perfect squares\n    \n    # Calculate the integer square root of n\n    root = int(n**0.5)  # This gives us the largest integer whose square is <= n\n    \n    # Check if squaring the root gives us back n\n    return root * root == n  # Return True if it is a perfect square, otherwise False\n",
    "full_code": "\ndef is_perfect_square(n: int) -> bool:\n    # Check if the number is negative\n    if n < 0:\n        return False  # Negative numbers cannot be perfect squares\n    \n    # Calculate the integer square root of n\n    root = int(n**0.5)  # This gives us the largest integer whose square is <= n\n    \n    # Check if squaring the root gives us back n\n    return root * root == n  # Return True if it is a perfect square, otherwise False\n",
    "reward": true,
    "program_code": "\ndef is_perfect_square(n: int) -> bool:\n    # Check if the number is negative\n    if n < 0:\n        return False  # Negative numbers cannot be perfect squares\n    \n    # Calculate the integer square root of n\n    root = int(n**0.5)  # This gives us the largest integer whose square is <= n\n    \n    # Check if squaring the root gives us back n\n    return root * root == n  # Return True if it is a perfect square, otherwise False\n",
    "program_name": "is_perfect_square",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   We need to create a function that checks if a given number is a perfect square. A perfect square is a number that can be expressed as the square of an integer.\n\n2. **Conceptualize a solution first in plain English**: \n   To determine if a number is a perfect square, we can calculate the integer square root of the number and then square that result. If squaring the integer square root gives us back the original number, then it is a perfect square; otherwise, it is not.\n\n3. **Write a pseudocode solution**:\n   - Define a function `is_perfect_square(n)` that takes an integer `n`.\n   - If `n` is less than 0, return `False` (since negative numbers cannot be perfect squares).\n   - Calculate the integer square root of `n` (let's call it `root`).\n   - If `root * root` equals `n`, return `True`; otherwise, return `False`.\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef is_perfect_square(n: int) -> bool:\n    # Check if the number is negative\n    if n < 0:\n        return False  # Negative numbers cannot be perfect squares\n    \n    # Calculate the integer square root of n\n    root = int(n**0.5)  # This gives us the largest integer whose square is <= n\n    \n    # Check if squaring the root gives us back n\n    return root * root == n  # Return True if it is a perfect square, otherwise False\n```",
    "no_parent": true,
    "dependency_used": false
}