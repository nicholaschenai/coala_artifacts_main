{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert capital_words_spaces(\"Python\") == 'Python'\n\nTests failed:\nNone",
    "code": "\ndef capital_words_spaces(input_string: str) -> str:\n    # Check if the input string is empty\n    if not input_string:\n        return \"\"\n    \n    # Initialize an empty result string\n    result = \"\"\n    \n    # Iterate through each character in the input string\n    for i in range(len(input_string)):\n        # If the character is uppercase and it's not the first character\n        if input_string[i].isupper() and i > 0:\n            # Append a space before the uppercase character\n            result += \" \"\n        # Append the current character to the result\n        result += input_string[i]\n    \n    return result\n\n# The function is declared last as per the instructions.\n",
    "full_code": "\ndef capital_words_spaces(input_string: str) -> str:\n    # Check if the input string is empty\n    if not input_string:\n        return \"\"\n    \n    # Initialize an empty result string\n    result = \"\"\n    \n    # Iterate through each character in the input string\n    for i in range(len(input_string)):\n        # If the character is uppercase and it's not the first character\n        if input_string[i].isupper() and i > 0:\n            # Append a space before the uppercase character\n            result += \" \"\n        # Append the current character to the result\n        result += input_string[i]\n    \n    return result\n\n# The function is declared last as per the instructions.\n",
    "reward": true,
    "program_code": "\ndef capital_words_spaces(input_string: str) -> str:\n    # Check if the input string is empty\n    if not input_string:\n        return \"\"\n    \n    # Initialize an empty result string\n    result = \"\"\n    \n    # Iterate through each character in the input string\n    for i in range(len(input_string)):\n        # If the character is uppercase and it's not the first character\n        if input_string[i].isupper() and i > 0:\n            # Append a space before the uppercase character\n            result += \" \"\n        # Append the current character to the result\n        result += input_string[i]\n    \n    return result\n\n# The function is declared last as per the instructions.\n",
    "program_name": "capital_words_spaces",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   The task is to create a function that takes a string as input and adds spaces between words that start with capital letters. If the input string contains only one capitalized word, it should return the string unchanged.\n\n2. **Conceptualize a solution first in plain English**: \n   To solve this problem, we can iterate through each character in the string. Whenever we encounter a capital letter that is not the first character of the string, we will insert a space before it. This way, we will separate the words that start with capital letters. Finally, we will return the modified string.\n\n3. **Write a pseudocode solution**:\n   ```\n   function capital_words_spaces(input_string):\n       if input_string is empty:\n           return empty string\n       initialize an empty result string\n       for each character in input_string:\n           if character is capital letter and it is not the first character:\n               append a space to result string\n           append character to result string\n       return result string\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef capital_words_spaces(input_string: str) -> str:\n    # Check if the input string is empty\n    if not input_string:\n        return \"\"\n    \n    # Initialize an empty result string\n    result = \"\"\n    \n    # Iterate through each character in the input string\n    for i in range(len(input_string)):\n        # If the character is uppercase and it's not the first character\n        if input_string[i].isupper() and i > 0:\n            # Append a space before the uppercase character\n            result += \" \"\n        # Append the current character to the result\n        result += input_string[i]\n    \n    return result\n\n# The function is declared last as per the instructions.\n```",
    "no_parent": true,
    "dependency_used": false
}