{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\nTests failed:\nNone",
    "code": "\ndef flatten_list(nested_list):\n    # Create an empty list to hold the flattened result\n    result = []\n    \n    # Iterate through each element in the nested list\n    for element in nested_list:\n        # If the element is a list, recursively flatten it\n        if isinstance(element, list):\n            result.extend(flatten_list(element))  # Extend the result with the flattened sub-list\n        else:\n            result.append(element)  # If it's not a list, append the element directly to the result\n    \n    # Return the flattened list\n    return result\n",
    "full_code": "\ndef flatten_list(nested_list):\n    # Create an empty list to hold the flattened result\n    result = []\n    \n    # Iterate through each element in the nested list\n    for element in nested_list:\n        # If the element is a list, recursively flatten it\n        if isinstance(element, list):\n            result.extend(flatten_list(element))  # Extend the result with the flattened sub-list\n        else:\n            result.append(element)  # If it's not a list, append the element directly to the result\n    \n    # Return the flattened list\n    return result\n",
    "reward": true,
    "program_code": "\ndef flatten_list(nested_list):\n    # Create an empty list to hold the flattened result\n    result = []\n    \n    # Iterate through each element in the nested list\n    for element in nested_list:\n        # If the element is a list, recursively flatten it\n        if isinstance(element, list):\n            result.extend(flatten_list(element))  # Extend the result with the flattened sub-list\n        else:\n            result.append(element)  # If it's not a list, append the element directly to the result\n    \n    # Return the flattened list\n    return result\n",
    "program_name": "flatten_list",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n   The task is to create a function that takes a nested list (a list that can contain other lists) and flattens it into a single list containing all the elements in a single level, preserving the order of the elements.\n\n2. **Conceptualize a solution first in plain English:**\n   To flatten the nested list, we can iterate through each element of the list. If the element is a list itself, we will recursively call the flattening function on that element. If the element is not a list, we will add it directly to the result list. This way, we can handle any level of nesting.\n\n3. **Write a pseudocode solution:**\n   ```\n   function flatten_list(nested_list):\n       create an empty list called result\n       for each element in nested_list:\n           if element is a list:\n               call flatten_list on element and extend result with the returned value\n           else:\n               append element to result\n       return result\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n```python\ndef flatten_list(nested_list):\n    # Create an empty list to hold the flattened result\n    result = []\n    \n    # Iterate through each element in the nested list\n    for element in nested_list:\n        # If the element is a list, recursively flatten it\n        if isinstance(element, list):\n            result.extend(flatten_list(element))  # Extend the result with the flattened sub-list\n        else:\n            result.append(element)  # If it's not a list, append the element directly to the result\n    \n    # Return the flattened list\n    return result\n```",
    "no_parent": true,
    "dependency_used": false
}