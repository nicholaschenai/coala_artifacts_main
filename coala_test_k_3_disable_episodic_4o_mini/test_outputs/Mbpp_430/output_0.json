{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nNone\n\nTests failed:\nassert parabola_directrix(5,3,2)==-198 # output: 1",
    "code": "\ndef parabola_directrix(a: int, b: int, c: int) -> int:\n    # Calculate the vertex x-coordinate\n    vertex_x = -b / (2 * a)\n    \n    # Calculate the vertex y-coordinate\n    vertex_y = a * vertex_x**2 + b * vertex_x + c\n    \n    # Calculate the distance p from the vertex to the focus\n    p = 1 / (4 * a)\n    \n    # Calculate the directrix\n    directrix = vertex_y - p\n    \n    # Return the directrix as an integer\n    return int(directrix)\n\n",
    "full_code": "\ndef parabola_directrix(a: int, b: int, c: int) -> int:\n    # Calculate the vertex x-coordinate\n    vertex_x = -b / (2 * a)\n    \n    # Calculate the vertex y-coordinate\n    vertex_y = a * vertex_x**2 + b * vertex_x + c\n    \n    # Calculate the distance p from the vertex to the focus\n    p = 1 / (4 * a)\n    \n    # Calculate the directrix\n    directrix = vertex_y - p\n    \n    # Return the directrix as an integer\n    return int(directrix)\n\n",
    "reward": false,
    "program_code": "\ndef parabola_directrix(a: int, b: int, c: int) -> int:\n    # Calculate the vertex x-coordinate\n    vertex_x = -b / (2 * a)\n    \n    # Calculate the vertex y-coordinate\n    vertex_y = a * vertex_x**2 + b * vertex_x + c\n    \n    # Calculate the distance p from the vertex to the focus\n    p = 1 / (4 * a)\n    \n    # Calculate the directrix\n    directrix = vertex_y - p\n    \n    # Return the directrix as an integer\n    return int(directrix)\n\n",
    "program_name": "parabola_directrix",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   The task is to create a function that calculates the directrix of a parabola given its coefficients. The directrix is a line associated with the parabola that helps define its shape. The function should take three parameters (coefficients of the parabola) and return the value of the directrix.\n\n2. **Conceptualize a solution first in plain English**: \n   A parabola can be represented in the form \\( y = ax^2 + bx + c \\). The directrix of a parabola can be calculated using the formula \\( y = \\frac{1 - 4p}{4a} \\), where \\( p \\) is the distance from the vertex to the focus. The vertex can be found using the formula \\( x = -\\frac{b}{2a} \\) and substituting this back into the parabola equation to find the corresponding \\( y \\)-coordinate. The directrix can then be derived from these values.\n\n3. **Write a pseudocode solution**:\n   ```\n   function parabola_directrix(a, b, c):\n       # Calculate the vertex x-coordinate\n       vertex_x = -b / (2 * a)\n       \n       # Calculate the vertex y-coordinate\n       vertex_y = a * vertex_x^2 + b * vertex_x + c\n       \n       # Calculate the distance p from the vertex to the focus\n       p = 1 / (4 * a)\n       \n       # Calculate the directrix\n       directrix = vertex_y - p\n       \n       return directrix\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef parabola_directrix(a: int, b: int, c: int) -> int:\n    # Calculate the vertex x-coordinate\n    vertex_x = -b / (2 * a)\n    \n    # Calculate the vertex y-coordinate\n    vertex_y = a * vertex_x**2 + b * vertex_x + c\n    \n    # Calculate the distance p from the vertex to the focus\n    p = 1 / (4 * a)\n    \n    # Calculate the directrix\n    directrix = vertex_y - p\n    \n    # Return the directrix as an integer\n    return int(directrix)\n\n```",
    "no_parent": true,
    "dependency_used": false
}