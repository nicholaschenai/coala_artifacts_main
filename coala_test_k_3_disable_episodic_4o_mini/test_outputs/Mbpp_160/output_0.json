{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nNone\n\nTests failed:\nassert find_solution(2, 3, 7) == (2, 1) # output: (-7, 7)",
    "code": "\ndef gcd(a, b):\n    # Function to compute the greatest common divisor using the Euclidean algorithm\n    while b:\n        a, b = b, a % b\n    return a\n\ndef extended_euclidean(a, b):\n    # Function to find one solution (x, y) such that ax + by = gcd(a, b)\n    if b == 0:\n        return (1, 0)  # Base case\n    x1, y1 = extended_euclidean(b, a % b)\n    return (y1, x1 - (a // b) * y1)\n\ndef find_solution(a: int, b: int, n: int) -> tuple[int, int] | None:\n    # Calculate the gcd of a and b\n    g = gcd(a, b)\n    # Check if n is divisible by g\n    if n % g != 0:\n        return None  # No solution exists\n    \n    # Find one solution using Extended Euclidean Algorithm\n    x0, y0 = extended_euclidean(a, b)\n    x0 *= n // g  # Scale the solution\n    y0 *= n // g\n    \n    return (x0, y0)  # Return the solution as a tuple\n",
    "full_code": "\ndef gcd(a, b):\n    # Function to compute the greatest common divisor using the Euclidean algorithm\n    while b:\n        a, b = b, a % b\n    return a\n\ndef extended_euclidean(a, b):\n    # Function to find one solution (x, y) such that ax + by = gcd(a, b)\n    if b == 0:\n        return (1, 0)  # Base case\n    x1, y1 = extended_euclidean(b, a % b)\n    return (y1, x1 - (a // b) * y1)\n\ndef find_solution(a: int, b: int, n: int) -> tuple[int, int] | None:\n    # Calculate the gcd of a and b\n    g = gcd(a, b)\n    # Check if n is divisible by g\n    if n % g != 0:\n        return None  # No solution exists\n    \n    # Find one solution using Extended Euclidean Algorithm\n    x0, y0 = extended_euclidean(a, b)\n    x0 *= n // g  # Scale the solution\n    y0 *= n // g\n    \n    return (x0, y0)  # Return the solution as a tuple\n",
    "reward": false,
    "program_code": "\ndef gcd(a, b):\n    # Function to compute the greatest common divisor using the Euclidean algorithm\n    while b:\n        a, b = b, a % b\n    return a\n\ndef extended_euclidean(a, b):\n    # Function to find one solution (x, y) such that ax + by = gcd(a, b)\n    if b == 0:\n        return (1, 0)  # Base case\n    x1, y1 = extended_euclidean(b, a % b)\n    return (y1, x1 - (a // b) * y1)\n\ndef find_solution(a: int, b: int, n: int) -> tuple[int, int] | None:\n    # Calculate the gcd of a and b\n    g = gcd(a, b)\n    # Check if n is divisible by g\n    if n % g != 0:\n        return None  # No solution exists\n    \n    # Find one solution using Extended Euclidean Algorithm\n    x0, y0 = extended_euclidean(a, b)\n    x0 *= n // g  # Scale the solution\n    y0 *= n // g\n    \n    return (x0, y0)  # Return the solution as a tuple\n",
    "program_name": "find_solution",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   The task is to find two integers, x and y, such that the equation `ax + by = n` holds true for given integers a, b, and n. If no such integers exist, the function should return None.\n\n2. **Conceptualize a solution first in plain English**: \n   To solve the equation `ax + by = n`, we can use the Extended Euclidean Algorithm to find integers x and y. First, we need to check if a solution exists by determining if the greatest common divisor (gcd) of a and b divides n. If it does, we can find one particular solution and then generate all possible solutions based on that.\n\n3. **Write a pseudocode solution**:\n   ```\n   function find_solution(a, b, n):\n       g = gcd(a, b)  // Calculate the gcd of a and b\n       if n is not divisible by g:\n           return None  // No solution exists\n       \n       // Find one solution using Extended Euclidean Algorithm\n       x0, y0 = extended_euclidean(a, b)\n       x0 *= n / g  // Scale the solution\n       y0 *= n / g\n       \n       return (x0, y0)  // Return the solution as a tuple\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef gcd(a, b):\n    # Function to compute the greatest common divisor using the Euclidean algorithm\n    while b:\n        a, b = b, a % b\n    return a\n\ndef extended_euclidean(a, b):\n    # Function to find one solution (x, y) such that ax + by = gcd(a, b)\n    if b == 0:\n        return (1, 0)  # Base case\n    x1, y1 = extended_euclidean(b, a % b)\n    return (y1, x1 - (a // b) * y1)\n\ndef find_solution(a: int, b: int, n: int) -> tuple[int, int] | None:\n    # Calculate the gcd of a and b\n    g = gcd(a, b)\n    # Check if n is divisible by g\n    if n % g != 0:\n        return None  # No solution exists\n    \n    # Find one solution using Extended Euclidean Algorithm\n    x0, y0 = extended_euclidean(a, b)\n    x0 *= n // g  # Scale the solution\n    y0 *= n // g\n    \n    return (x0, y0)  # Return the solution as a tuple\n```",
    "no_parent": true,
    "dependency_used": false
}