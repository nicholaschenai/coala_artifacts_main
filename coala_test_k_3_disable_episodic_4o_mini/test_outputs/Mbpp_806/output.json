{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\nTests failed:\nNone",
    "code": "\ndef max_run_uppercase(s: str) -> int:\n    # Initialize variables to track the maximum length and current length of uppercase runs\n    max_length = 0\n    current_length = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            current_length += 1  # Increment the current length for consecutive uppercase\n        else:\n            # If we hit a non-uppercase character, check if we need to update max_length\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 0  # Reset current length for the next run\n    \n    # Final check in case the string ends with an uppercase run\n    if current_length > max_length:\n        max_length = current_length\n    \n    return max_length  # Return the maximum length found\n",
    "full_code": "\ndef max_run_uppercase(s: str) -> int:\n    # Initialize variables to track the maximum length and current length of uppercase runs\n    max_length = 0\n    current_length = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            current_length += 1  # Increment the current length for consecutive uppercase\n        else:\n            # If we hit a non-uppercase character, check if we need to update max_length\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 0  # Reset current length for the next run\n    \n    # Final check in case the string ends with an uppercase run\n    if current_length > max_length:\n        max_length = current_length\n    \n    return max_length  # Return the maximum length found\n",
    "reward": true,
    "program_code": "\ndef max_run_uppercase(s: str) -> int:\n    # Initialize variables to track the maximum length and current length of uppercase runs\n    max_length = 0\n    current_length = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            current_length += 1  # Increment the current length for consecutive uppercase\n        else:\n            # If we hit a non-uppercase character, check if we need to update max_length\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 0  # Reset current length for the next run\n    \n    # Final check in case the string ends with an uppercase run\n    if current_length > max_length:\n        max_length = current_length\n    \n    return max_length  # Return the maximum length found\n",
    "program_name": "max_run_uppercase",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: The task is to create a function that finds the longest consecutive sequence of uppercase letters in a given string and returns the length of that sequence.\n\n2. **Conceptualize a solution first in plain English**: To solve this problem, we can iterate through each character in the string while keeping track of the current length of consecutive uppercase letters. Whenever we encounter an uppercase letter, we increase the current length. If we encounter a lowercase letter or a non-uppercase character, we compare the current length with the maximum length found so far and reset the current length to zero. At the end of the iteration, we need to check one last time to ensure we account for a sequence that might end at the last character of the string.\n\n3. **Write a pseudocode solution**:\n   ```\n   function max_run_uppercase(s):\n       max_length = 0\n       current_length = 0\n       \n       for each character in s:\n           if character is uppercase:\n               current_length += 1\n           else:\n               if current_length > max_length:\n                   max_length = current_length\n               current_length = 0\n       \n       if current_length > max_length:\n           max_length = current_length\n       \n       return max_length\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef max_run_uppercase(s: str) -> int:\n    # Initialize variables to track the maximum length and current length of uppercase runs\n    max_length = 0\n    current_length = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            current_length += 1  # Increment the current length for consecutive uppercase\n        else:\n            # If we hit a non-uppercase character, check if we need to update max_length\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 0  # Reset current length for the next run\n    \n    # Final check in case the string ends with an uppercase run\n    if current_length > max_length:\n        max_length = current_length\n    \n    return max_length  # Return the maximum length found\n```",
    "no_parent": true,
    "dependency_used": false
}