{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert get_pairs_count([1,1,1,1],2) == 6\n\nTests failed:\nNone",
    "code": "\ndef get_pairs_count(numbers, target_sum):\n    count_map = {}\n    pair_count = 0\n\n    # Count occurrences of each number\n    for number in numbers:\n        if number in count_map:\n            count_map[number] += 1\n        else:\n            count_map[number] = 1\n\n    # Count pairs\n    for number in numbers:\n        complement = target_sum - number\n        if complement in count_map:\n            pair_count += count_map[complement]\n            # If the complement is the same as the number, we need to adjust the count\n            if complement == number:\n                pair_count -= 1\n\n    # Each pair is counted twice, so divide by 2\n    return pair_count // 2\n",
    "full_code": "\ndef get_pairs_count(numbers, target_sum):\n    count_map = {}\n    pair_count = 0\n\n    # Count occurrences of each number\n    for number in numbers:\n        if number in count_map:\n            count_map[number] += 1\n        else:\n            count_map[number] = 1\n\n    # Count pairs\n    for number in numbers:\n        complement = target_sum - number\n        if complement in count_map:\n            pair_count += count_map[complement]\n            # If the complement is the same as the number, we need to adjust the count\n            if complement == number:\n                pair_count -= 1\n\n    # Each pair is counted twice, so divide by 2\n    return pair_count // 2\n",
    "reward": true,
    "program_code": "\ndef get_pairs_count(numbers, target_sum):\n    count_map = {}\n    pair_count = 0\n\n    # Count occurrences of each number\n    for number in numbers:\n        if number in count_map:\n            count_map[number] += 1\n        else:\n            count_map[number] = 1\n\n    # Count pairs\n    for number in numbers:\n        complement = target_sum - number\n        if complement in count_map:\n            pair_count += count_map[complement]\n            # If the complement is the same as the number, we need to adjust the count\n            if complement == number:\n                pair_count -= 1\n\n    # Each pair is counted twice, so divide by 2\n    return pair_count // 2\n",
    "program_name": "get_pairs_count",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   We need to create a function that counts how many pairs of numbers in a given list add up to a specified sum. For example, if the list is `[1, 1, 1, 1]` and the sum is `2`, the function should return `6` because there are six pairs of `1`s that can be formed.\n\n2. **Conceptualize a solution first in plain English**: \n   To solve this problem, we can use a dictionary to keep track of how many times each number appears in the list. For each number in the list, we can check if there exists another number that, when added to it, equals the specified sum. If such a number exists, we can calculate how many pairs can be formed using the counts of these two numbers.\n\n3. **Write a pseudocode solution**:\n   - Initialize a dictionary to count occurrences of each number in the list.\n   - For each number in the list:\n     - Calculate the complement (the number that, when added to the current number, equals the specified sum).\n     - If the complement exists in the dictionary:\n       - If the current number and the complement are the same, calculate the number of ways to choose 2 from the count of that number.\n       - If they are different, multiply the counts of the current number and the complement to get the number of pairs.\n   - Return the total count of pairs.\n\n4. **Output the final Python 3 solution**:\n```python\ndef get_pairs_count(numbers, target_sum):\n    count_map = {}\n    pair_count = 0\n\n    # Count occurrences of each number\n    for number in numbers:\n        if number in count_map:\n            count_map[number] += 1\n        else:\n            count_map[number] = 1\n\n    # Count pairs\n    for number in numbers:\n        complement = target_sum - number\n        if complement in count_map:\n            pair_count += count_map[complement]\n            # If the complement is the same as the number, we need to adjust the count\n            if complement == number:\n                pair_count -= 1\n\n    # Each pair is counted twice, so divide by 2\n    return pair_count // 2\n```",
    "no_parent": true,
    "dependency_used": false
}