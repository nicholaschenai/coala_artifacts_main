{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert sum_series(6) == 12\n\nTests failed:\nNone",
    "code": "\ndef sum_series(n):\n    # Initialize the total sum to 0\n    total_sum = 0\n    # Loop from 0 to n // 2\n    for i in range(n // 2 + 1):\n        # Calculate the current term\n        term = n - 2 * i\n        # If the term is positive, add it to the total sum\n        if term > 0:\n            total_sum += term\n        else:\n            # If the term is non-positive, break the loop\n            break\n    # Return the total sum\n    return total_sum\n",
    "full_code": "\ndef sum_series(n):\n    # Initialize the total sum to 0\n    total_sum = 0\n    # Loop from 0 to n // 2\n    for i in range(n // 2 + 1):\n        # Calculate the current term\n        term = n - 2 * i\n        # If the term is positive, add it to the total sum\n        if term > 0:\n            total_sum += term\n        else:\n            # If the term is non-positive, break the loop\n            break\n    # Return the total sum\n    return total_sum\n",
    "reward": true,
    "program_code": "\ndef sum_series(n):\n    # Initialize the total sum to 0\n    total_sum = 0\n    # Loop from 0 to n // 2\n    for i in range(n // 2 + 1):\n        # Calculate the current term\n        term = n - 2 * i\n        # If the term is positive, add it to the total sum\n        if term > 0:\n            total_sum += term\n        else:\n            # If the term is non-positive, break the loop\n            break\n    # Return the total sum\n    return total_sum\n",
    "program_name": "sum_series",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   The task is to create a function that calculates the sum of a series where each term is derived from a formula based on a given integer `n`. Specifically, the series starts from `n` and decreases by `2` for each subsequent term until the term is less than or equal to `0`. The goal is to find the total sum of these terms.\n\n2. **Conceptualize a solution first in plain English**: \n   To solve this problem, we can use a loop to iterate from `0` to `n // 2`. In each iteration, we will calculate the term using the formula `n - 2 * i` and add it to a cumulative sum. We will continue this until the term becomes non-positive. Finally, we will return the total sum.\n\n3. **Write a pseudocode solution**:\n   ```\n   function sum_series(n):\n       initialize total_sum to 0\n       for i from 0 to n // 2:\n           term = n - 2 * i\n           if term > 0:\n               total_sum += term\n           else:\n               break\n       return total_sum\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef sum_series(n):\n    # Initialize the total sum to 0\n    total_sum = 0\n    # Loop from 0 to n // 2\n    for i in range(n // 2 + 1):\n        # Calculate the current term\n        term = n - 2 * i\n        # If the term is positive, add it to the total sum\n        if term > 0:\n            total_sum += term\n        else:\n            # If the term is non-positive, break the loop\n            break\n    # Return the total sum\n    return total_sum\n```",
    "no_parent": true,
    "dependency_used": false
}