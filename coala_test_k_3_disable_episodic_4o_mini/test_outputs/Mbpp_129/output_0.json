{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\nTests failed:\nNone",
    "code": "\ndef is_magic_square(matrix):\n    # Check if the matrix is empty\n    if not matrix:\n        return False\n    \n    # Calculate the target sum from the first row\n    target_sum = sum(matrix[0])\n    \n    # Check if all rows sum to the target sum\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check if all columns sum to the target sum\n    n = len(matrix)\n    for col in range(n):\n        column_sum = sum(matrix[row][col] for row in range(n))\n        if column_sum != target_sum:\n            return False\n    \n    # Check the sum of the main diagonal\n    diagonal1_sum = sum(matrix[i][i] for i in range(n))\n    # Check the sum of the other diagonal\n    diagonal2_sum = sum(matrix[i][n - 1 - i] for i in range(n))\n    \n    # Check if both diagonals sum to the target sum\n    if diagonal1_sum != target_sum or diagonal2_sum != target_sum:\n        return False\n    \n    # If all checks passed, it is a magic square\n    return True\n\ndef magic_square_test(matrix):\n    return is_magic_square(matrix)\n",
    "full_code": "\ndef is_magic_square(matrix):\n    # Check if the matrix is empty\n    if not matrix:\n        return False\n    \n    # Calculate the target sum from the first row\n    target_sum = sum(matrix[0])\n    \n    # Check if all rows sum to the target sum\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check if all columns sum to the target sum\n    n = len(matrix)\n    for col in range(n):\n        column_sum = sum(matrix[row][col] for row in range(n))\n        if column_sum != target_sum:\n            return False\n    \n    # Check the sum of the main diagonal\n    diagonal1_sum = sum(matrix[i][i] for i in range(n))\n    # Check the sum of the other diagonal\n    diagonal2_sum = sum(matrix[i][n - 1 - i] for i in range(n))\n    \n    # Check if both diagonals sum to the target sum\n    if diagonal1_sum != target_sum or diagonal2_sum != target_sum:\n        return False\n    \n    # If all checks passed, it is a magic square\n    return True\n\ndef magic_square_test(matrix):\n    return is_magic_square(matrix)\n",
    "reward": true,
    "program_code": "\ndef is_magic_square(matrix):\n    # Check if the matrix is empty\n    if not matrix:\n        return False\n    \n    # Calculate the target sum from the first row\n    target_sum = sum(matrix[0])\n    \n    # Check if all rows sum to the target sum\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check if all columns sum to the target sum\n    n = len(matrix)\n    for col in range(n):\n        column_sum = sum(matrix[row][col] for row in range(n))\n        if column_sum != target_sum:\n            return False\n    \n    # Check the sum of the main diagonal\n    diagonal1_sum = sum(matrix[i][i] for i in range(n))\n    # Check the sum of the other diagonal\n    diagonal2_sum = sum(matrix[i][n - 1 - i] for i in range(n))\n    \n    # Check if both diagonals sum to the target sum\n    if diagonal1_sum != target_sum or diagonal2_sum != target_sum:\n        return False\n    \n    # If all checks passed, it is a magic square\n    return True\n\ndef magic_square_test(matrix):\n    return is_magic_square(matrix)\n",
    "program_name": "magic_square_test",
    "dependencies": [],
    "raw_msg": "```python\ndef is_magic_square(matrix):\n    # Check if the matrix is empty\n    if not matrix:\n        return False\n    \n    # Calculate the target sum from the first row\n    target_sum = sum(matrix[0])\n    \n    # Check if all rows sum to the target sum\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check if all columns sum to the target sum\n    n = len(matrix)\n    for col in range(n):\n        column_sum = sum(matrix[row][col] for row in range(n))\n        if column_sum != target_sum:\n            return False\n    \n    # Check the sum of the main diagonal\n    diagonal1_sum = sum(matrix[i][i] for i in range(n))\n    # Check the sum of the other diagonal\n    diagonal2_sum = sum(matrix[i][n - 1 - i] for i in range(n))\n    \n    # Check if both diagonals sum to the target sum\n    if diagonal1_sum != target_sum or diagonal2_sum != target_sum:\n        return False\n    \n    # If all checks passed, it is a magic square\n    return True\n\ndef magic_square_test(matrix):\n    return is_magic_square(matrix)\n```",
    "no_parent": true,
    "dependency_used": false
}