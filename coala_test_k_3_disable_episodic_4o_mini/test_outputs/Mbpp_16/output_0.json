{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\nTests failed:\nNone",
    "code": "\ndef is_lowercase(s):\n    # Check if the string contains only lowercase letters\n    return s.islower() and s.isalpha()\n\ndef text_lowercase_underscore(input_string: str) -> bool:\n    # Split the input string by underscores\n    parts = input_string.split('_')\n    # Check each part to see if it contains only lowercase letters\n    for part in parts:\n        if part and not is_lowercase(part):\n            return False\n    return True\n",
    "full_code": "\ndef is_lowercase(s):\n    # Check if the string contains only lowercase letters\n    return s.islower() and s.isalpha()\n\ndef text_lowercase_underscore(input_string: str) -> bool:\n    # Split the input string by underscores\n    parts = input_string.split('_')\n    # Check each part to see if it contains only lowercase letters\n    for part in parts:\n        if part and not is_lowercase(part):\n            return False\n    return True\n",
    "reward": true,
    "program_code": "\ndef is_lowercase(s):\n    # Check if the string contains only lowercase letters\n    return s.islower() and s.isalpha()\n\ndef text_lowercase_underscore(input_string: str) -> bool:\n    # Split the input string by underscores\n    parts = input_string.split('_')\n    # Check each part to see if it contains only lowercase letters\n    for part in parts:\n        if part and not is_lowercase(part):\n            return False\n    return True\n",
    "program_name": "text_lowercase_underscore",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   The task is to create a function that checks if a given string consists of sequences of lowercase letters that are separated by underscores. If the string follows this pattern, the function should return `True`; otherwise, it should return `False`.\n\n2. **Conceptualize a solution first in plain English**: \n   To solve this problem, we need to check if the string can be split into parts using underscores as delimiters. Each part should only contain lowercase letters. We can achieve this by splitting the string at underscores and then verifying that each resulting segment contains only lowercase letters.\n\n3. **Write a pseudocode solution**:\n   ```\n   function text_lowercase_underscore(input_string):\n       split the input_string by underscores\n       for each segment in the split parts:\n           if the segment is not empty and contains only lowercase letters:\n               continue\n           else:\n               return False\n       return True\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef is_lowercase(s):\n    # Check if the string contains only lowercase letters\n    return s.islower() and s.isalpha()\n\ndef text_lowercase_underscore(input_string: str) -> bool:\n    # Split the input string by underscores\n    parts = input_string.split('_')\n    # Check each part to see if it contains only lowercase letters\n    for part in parts:\n        if part and not is_lowercase(part):\n            return False\n    return True\n```",
    "no_parent": true,
    "dependency_used": false
}