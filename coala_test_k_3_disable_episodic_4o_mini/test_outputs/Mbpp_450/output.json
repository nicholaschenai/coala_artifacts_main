{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\nTests failed:\nNone",
    "code": "\ndef extract_string(string_list, size):\n    # Create an empty list to store the results\n    result = []\n    # Iterate through each string in the provided list\n    for string in string_list:\n        # Check if the length of the string matches the specified size\n        if len(string) == size:\n            # If it matches, add it to the result list\n            result.append(string)\n    # Return the final list of strings that match the specified size\n    return result\n",
    "full_code": "\ndef extract_string(string_list, size):\n    # Create an empty list to store the results\n    result = []\n    # Iterate through each string in the provided list\n    for string in string_list:\n        # Check if the length of the string matches the specified size\n        if len(string) == size:\n            # If it matches, add it to the result list\n            result.append(string)\n    # Return the final list of strings that match the specified size\n    return result\n",
    "reward": true,
    "program_code": "\ndef extract_string(string_list, size):\n    # Create an empty list to store the results\n    result = []\n    # Iterate through each string in the provided list\n    for string in string_list:\n        # Check if the length of the string matches the specified size\n        if len(string) == size:\n            # If it matches, add it to the result list\n            result.append(string)\n    # Return the final list of strings that match the specified size\n    return result\n",
    "program_name": "extract_string",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   The task is to create a function that takes a list of strings and returns a new list containing only those strings that have a specified length.\n\n2. **Conceptualize a solution first in plain English**: \n   We will iterate through the provided list of strings and check the length of each string. If the length of a string matches the specified size, we will add it to a new list. Finally, we will return this new list.\n\n3. **Write a pseudocode solution**:\n   ```\n   function extract_string(string_list, size):\n       create an empty list called result\n       for each string in string_list:\n           if the length of string is equal to size:\n               add string to result\n       return result\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef extract_string(string_list, size):\n    # Create an empty list to store the results\n    result = []\n    # Iterate through each string in the provided list\n    for string in string_list:\n        # Check if the length of the string matches the specified size\n        if len(string) == size:\n            # If it matches, add it to the result list\n            result.append(string)\n    # Return the final list of strings that match the specified size\n    return result\n```",
    "no_parent": true,
    "dependency_used": false
}