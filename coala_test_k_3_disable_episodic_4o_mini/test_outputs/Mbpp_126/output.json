{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert sum(10,15) == 6\n\nTests failed:\nNone",
    "code": "\ndef gcd(a, b):\n    # Calculate the greatest common divisor using the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef sum_of_divisors(n):\n    # Calculate the sum of all divisors of n\n    total = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            total += i  # i is a divisor\n            if i != n // i:\n                total += n // i  # n // i is also a divisor\n    return total\n\ndef sum(a: int, b: int) -> int:\n    # Find the GCD of a and b\n    g = gcd(a, b)\n    # Return the sum of the divisors of the GCD\n    return sum_of_divisors(g)\n",
    "full_code": "\ndef gcd(a, b):\n    # Calculate the greatest common divisor using the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef sum_of_divisors(n):\n    # Calculate the sum of all divisors of n\n    total = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            total += i  # i is a divisor\n            if i != n // i:\n                total += n // i  # n // i is also a divisor\n    return total\n\ndef sum(a: int, b: int) -> int:\n    # Find the GCD of a and b\n    g = gcd(a, b)\n    # Return the sum of the divisors of the GCD\n    return sum_of_divisors(g)\n",
    "reward": true,
    "program_code": "\ndef gcd(a, b):\n    # Calculate the greatest common divisor using the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef sum_of_divisors(n):\n    # Calculate the sum of all divisors of n\n    total = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            total += i  # i is a divisor\n            if i != n // i:\n                total += n // i  # n // i is also a divisor\n    return total\n\ndef sum(a: int, b: int) -> int:\n    # Find the GCD of a and b\n    g = gcd(a, b)\n    # Return the sum of the divisors of the GCD\n    return sum_of_divisors(g)\n",
    "program_name": "sum",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: The task is to create a function that calculates the sum of all common divisors of two given numbers.\n\n2. **Conceptualize a solution first in plain English**: To find the sum of common divisors of two numbers, we can follow these steps:\n   - First, determine the greatest common divisor (GCD) of the two numbers. The common divisors of the two numbers are the divisors of their GCD.\n   - Next, find all the divisors of the GCD.\n   - Finally, sum these divisors and return the result.\n\n3. **Write a pseudocode solution**:\n   ```\n   function gcd(a, b):\n       while b is not 0:\n           a, b = b, a % b\n       return a\n\n   function sum_of_divisors(n):\n       sum = 0\n       for i from 1 to sqrt(n):\n           if n % i == 0:\n               sum += i\n               if i is not equal to n / i:\n                   sum += n / i\n       return sum\n\n   function sum(a, b):\n       g = gcd(a, b)\n       return sum_of_divisors(g)\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef gcd(a, b):\n    # Calculate the greatest common divisor using the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef sum_of_divisors(n):\n    # Calculate the sum of all divisors of n\n    total = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            total += i  # i is a divisor\n            if i != n // i:\n                total += n // i  # n // i is also a divisor\n    return total\n\ndef sum(a: int, b: int) -> int:\n    # Find the GCD of a and b\n    g = gcd(a, b)\n    # Return the sum of the divisors of the GCD\n    return sum_of_divisors(g)\n```",
    "no_parent": true,
    "dependency_used": false
}