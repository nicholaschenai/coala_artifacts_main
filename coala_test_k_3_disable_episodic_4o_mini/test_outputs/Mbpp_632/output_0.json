{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\nTests failed:\nNone",
    "code": "\ndef move_zero(input_list):\n    # Create an empty list to hold non-zero elements\n    non_zero_elements = []\n    # Count the number of zeros in the input list\n    zero_count = 0\n    \n    # Iterate through each element in the input list\n    for element in input_list:\n        if element != 0:\n            # If the element is not zero, add it to the non_zero_elements list\n            non_zero_elements.append(element)\n        else:\n            # If the element is zero, increment the zero_count\n            zero_count += 1\n    \n    # Create the result list by combining non_zero_elements and the counted zeros\n    result = non_zero_elements + [0] * zero_count\n    return result\n",
    "full_code": "\ndef move_zero(input_list):\n    # Create an empty list to hold non-zero elements\n    non_zero_elements = []\n    # Count the number of zeros in the input list\n    zero_count = 0\n    \n    # Iterate through each element in the input list\n    for element in input_list:\n        if element != 0:\n            # If the element is not zero, add it to the non_zero_elements list\n            non_zero_elements.append(element)\n        else:\n            # If the element is zero, increment the zero_count\n            zero_count += 1\n    \n    # Create the result list by combining non_zero_elements and the counted zeros\n    result = non_zero_elements + [0] * zero_count\n    return result\n",
    "reward": true,
    "program_code": "\ndef move_zero(input_list):\n    # Create an empty list to hold non-zero elements\n    non_zero_elements = []\n    # Count the number of zeros in the input list\n    zero_count = 0\n    \n    # Iterate through each element in the input list\n    for element in input_list:\n        if element != 0:\n            # If the element is not zero, add it to the non_zero_elements list\n            non_zero_elements.append(element)\n        else:\n            # If the element is zero, increment the zero_count\n            zero_count += 1\n    \n    # Create the result list by combining non_zero_elements and the counted zeros\n    result = non_zero_elements + [0] * zero_count\n    return result\n",
    "program_name": "move_zero",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   The task is to create a function that takes a list of integers and moves all the zeros in that list to the end while maintaining the order of the non-zero elements.\n\n2. **Conceptualize a solution first in plain English**: \n   To solve this problem, we can iterate through the list and collect all non-zero elements in a new list. After collecting all non-zero elements, we can count how many zeros were in the original list and append that many zeros to the end of the new list. This way, we ensure that all non-zero elements retain their original order, and all zeros are moved to the end.\n\n3. **Write a pseudocode solution**:\n   ```\n   function move_zero(input_list):\n       create an empty list for non_zero_elements\n       count zeros in input_list\n       for each element in input_list:\n           if element is not zero:\n               add element to non_zero_elements\n       create a result list by combining non_zero_elements and the counted zeros\n       return result list\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef move_zero(input_list):\n    # Create an empty list to hold non-zero elements\n    non_zero_elements = []\n    # Count the number of zeros in the input list\n    zero_count = 0\n    \n    # Iterate through each element in the input list\n    for element in input_list:\n        if element != 0:\n            # If the element is not zero, add it to the non_zero_elements list\n            non_zero_elements.append(element)\n        else:\n            # If the element is zero, increment the zero_count\n            zero_count += 1\n    \n    # Create the result list by combining non_zero_elements and the counted zeros\n    result = non_zero_elements + [0] * zero_count\n    return result\n```",
    "no_parent": true,
    "dependency_used": false
}