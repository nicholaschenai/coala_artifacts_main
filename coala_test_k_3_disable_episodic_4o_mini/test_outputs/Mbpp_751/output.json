{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n\nTests failed:\nNone",
    "code": "\ndef check_min_heap(array):\n    # Iterate through each element in the array up to the last parent node\n    for i in range(len(array) // 2):\n        # Calculate the indices of the left and right children\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n        \n        # Check if the left child exists and if the parent is greater than the left child\n        if left_child_index < len(array):\n            if array[i] > array[left_child_index]:\n                return False\n        \n        # Check if the right child exists and if the parent is greater than the right child\n        if right_child_index < len(array):\n            if array[i] > array[right_child_index]:\n                return False\n    \n    # If all parent-child relationships are valid, return True\n    return True\n",
    "full_code": "\ndef check_min_heap(array):\n    # Iterate through each element in the array up to the last parent node\n    for i in range(len(array) // 2):\n        # Calculate the indices of the left and right children\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n        \n        # Check if the left child exists and if the parent is greater than the left child\n        if left_child_index < len(array):\n            if array[i] > array[left_child_index]:\n                return False\n        \n        # Check if the right child exists and if the parent is greater than the right child\n        if right_child_index < len(array):\n            if array[i] > array[right_child_index]:\n                return False\n    \n    # If all parent-child relationships are valid, return True\n    return True\n",
    "reward": true,
    "program_code": "\ndef check_min_heap(array):\n    # Iterate through each element in the array up to the last parent node\n    for i in range(len(array) // 2):\n        # Calculate the indices of the left and right children\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n        \n        # Check if the left child exists and if the parent is greater than the left child\n        if left_child_index < len(array):\n            if array[i] > array[left_child_index]:\n                return False\n        \n        # Check if the right child exists and if the parent is greater than the right child\n        if right_child_index < len(array):\n            if array[i] > array[right_child_index]:\n                return False\n    \n    # If all parent-child relationships are valid, return True\n    return True\n",
    "program_name": "check_min_heap",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   The task is to determine if a given list of integers represents a min-heap. A min-heap is a complete binary tree where each parent node is less than or equal to its child nodes. The list represents the heap in a level-order traversal.\n\n2. **Conceptualize a solution first in plain English**: \n   To check if the array represents a min-heap, we need to verify that for every element in the array, the value of the element is less than or equal to its children. For an element at index `i`, its left child is at index `2*i + 1` and its right child is at index `2*i + 2`. We will iterate through the array and check these conditions for each element that has children.\n\n3. **Write a pseudocode solution**:\n   ```\n   function check_min_heap(array):\n       for each index i from 0 to (length of array // 2) - 1:\n           left_child_index = 2 * i + 1\n           right_child_index = 2 * i + 2\n           if left_child_index < length of array:\n               if array[i] > array[left_child_index]:\n                   return False\n           if right_child_index < length of array:\n               if array[i] > array[right_child_index]:\n                   return False\n       return True\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef check_min_heap(array):\n    # Iterate through each element in the array up to the last parent node\n    for i in range(len(array) // 2):\n        # Calculate the indices of the left and right children\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n        \n        # Check if the left child exists and if the parent is greater than the left child\n        if left_child_index < len(array):\n            if array[i] > array[left_child_index]:\n                return False\n        \n        # Check if the right child exists and if the parent is greater than the right child\n        if right_child_index < len(array):\n            if array[i] > array[right_child_index]:\n                return False\n    \n    # If all parent-child relationships are valid, return True\n    return True\n```",
    "no_parent": true,
    "dependency_used": false
}