{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\nTests failed:\nNone",
    "code": "\ndef insert_element(lst, elem):\n    # Create an empty list to hold the result\n    result = []\n    \n    # Iterate through each item in the input list\n    for item in lst:\n        # Append the specified element to the result list\n        result.append(elem)\n        # Append the current item from the original list to the result list\n        result.append(item)\n    \n    # Return the new list with the inserted elements\n    return result\n",
    "full_code": "\ndef insert_element(lst, elem):\n    # Create an empty list to hold the result\n    result = []\n    \n    # Iterate through each item in the input list\n    for item in lst:\n        # Append the specified element to the result list\n        result.append(elem)\n        # Append the current item from the original list to the result list\n        result.append(item)\n    \n    # Return the new list with the inserted elements\n    return result\n",
    "reward": true,
    "program_code": "\ndef insert_element(lst, elem):\n    # Create an empty list to hold the result\n    result = []\n    \n    # Iterate through each item in the input list\n    for item in lst:\n        # Append the specified element to the result list\n        result.append(elem)\n        # Append the current item from the original list to the result list\n        result.append(item)\n    \n    # Return the new list with the inserted elements\n    return result\n",
    "program_name": "insert_element",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   The task is to create a function that takes a list and an element, and then inserts that element before each item in the list. The function should return the new list with the inserted elements.\n\n2. **Conceptualize a solution first in plain English**: \n   To solve this problem, we can iterate through the original list and for each element, we will add the specified element followed by the original element to a new list. This way, we ensure that the specified element is placed before each item in the original list.\n\n3. **Write a pseudocode solution**:\n   ```\n   function insert_element(list, element):\n       create an empty list called result\n       for each item in the input list:\n           append the element to result\n           append the item to result\n       return result\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef insert_element(lst, elem):\n    # Create an empty list to hold the result\n    result = []\n    \n    # Iterate through each item in the input list\n    for item in lst:\n        # Append the specified element to the result list\n        result.append(elem)\n        # Append the current item from the original list to the result list\n        result.append(item)\n    \n    # Return the new list with the inserted elements\n    return result\n```",
    "no_parent": true,
    "dependency_used": false
}