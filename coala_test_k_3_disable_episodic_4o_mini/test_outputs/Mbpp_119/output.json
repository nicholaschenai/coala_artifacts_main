{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert search([1,1,2,2,3]) == 3\n\nTests failed:\nNone",
    "code": "\ndef search(arr):\n    # Initialize left and right pointers for binary search\n    left = 0\n    right = len(arr) - 1\n    \n    # Perform binary search\n    while left < right:\n        mid = (left + right) // 2  # Find the middle index\n        \n        # Check if mid is even\n        if mid % 2 == 0:\n            # If the next element is the same, the unique element is in the right half\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid  # Unique element is in the left half\n        else:\n            # If the previous element is the same, the unique element is in the right half\n            if arr[mid] == arr[mid - 1]:\n                left = mid + 1\n            else:\n                right = mid  # Unique element is in the left half\n    \n    # When left meets right, we found the unique element\n    return arr[left]\n",
    "full_code": "\ndef search(arr):\n    # Initialize left and right pointers for binary search\n    left = 0\n    right = len(arr) - 1\n    \n    # Perform binary search\n    while left < right:\n        mid = (left + right) // 2  # Find the middle index\n        \n        # Check if mid is even\n        if mid % 2 == 0:\n            # If the next element is the same, the unique element is in the right half\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid  # Unique element is in the left half\n        else:\n            # If the previous element is the same, the unique element is in the right half\n            if arr[mid] == arr[mid - 1]:\n                left = mid + 1\n            else:\n                right = mid  # Unique element is in the left half\n    \n    # When left meets right, we found the unique element\n    return arr[left]\n",
    "reward": true,
    "program_code": "\ndef search(arr):\n    # Initialize left and right pointers for binary search\n    left = 0\n    right = len(arr) - 1\n    \n    # Perform binary search\n    while left < right:\n        mid = (left + right) // 2  # Find the middle index\n        \n        # Check if mid is even\n        if mid % 2 == 0:\n            # If the next element is the same, the unique element is in the right half\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid  # Unique element is in the left half\n        else:\n            # If the previous element is the same, the unique element is in the right half\n            if arr[mid] == arr[mid - 1]:\n                left = mid + 1\n            else:\n                right = mid  # Unique element is in the left half\n    \n    # When left meets right, we found the unique element\n    return arr[left]\n",
    "program_name": "search",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   We need to find the unique element in a sorted array where every other element appears exactly twice, except for one element that appears only once.\n\n2. **Conceptualize a solution first in plain English**: \n   Since the array is sorted, we can use a binary search approach to efficiently find the unique element. We can check pairs of elements and determine if the unique element is on the left or right side of the current mid-point based on the index and the values of the elements.\n\n3. **Write a pseudocode solution**:\n   ```\n   function search(arr):\n       initialize left to 0\n       initialize right to length of arr - 1\n       \n       while left is less than right:\n           calculate mid as (left + right) // 2\n           \n           if mid is even:\n               if arr[mid] is equal to arr[mid + 1]:\n                   move left to mid + 2\n               else:\n                   move right to mid\n           else:\n               if arr[mid] is equal to arr[mid - 1]:\n                   move left to mid + 1\n               else:\n                   move right to mid\n       \n       return arr[left]  // left will point to the unique element\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef search(arr):\n    # Initialize left and right pointers for binary search\n    left = 0\n    right = len(arr) - 1\n    \n    # Perform binary search\n    while left < right:\n        mid = (left + right) // 2  # Find the middle index\n        \n        # Check if mid is even\n        if mid % 2 == 0:\n            # If the next element is the same, the unique element is in the right half\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid  # Unique element is in the left half\n        else:\n            # If the previous element is the same, the unique element is in the right half\n            if arr[mid] == arr[mid - 1]:\n                left = mid + 1\n            else:\n                right = mid  # Unique element is in the left half\n    \n    # When left meets right, we found the unique element\n    return arr[left]\n```",
    "no_parent": true,
    "dependency_used": false
}