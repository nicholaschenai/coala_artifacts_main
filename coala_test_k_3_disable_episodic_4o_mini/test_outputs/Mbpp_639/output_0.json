{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\nTests failed:\nNone",
    "code": "\ndef calculate_length(name):\n    # Returns the length of the name\n    return len(name)\n\ndef sum_length_of_names(names):\n    # Initialize total length to 0\n    total_length = 0\n    \n    # Iterate through each name in the list\n    for name in names:\n        # Check if the first character is uppercase\n        if name and name[0].isupper():\n            # Add the length of the name to the total length\n            total_length += calculate_length(name)\n    \n    # Return the total length of names that start with an uppercase letter\n    return total_length\n\n# Main function as specified\ndef sample_nam(names):\n    return sum_length_of_names(names)\n",
    "full_code": "\ndef calculate_length(name):\n    # Returns the length of the name\n    return len(name)\n\ndef sum_length_of_names(names):\n    # Initialize total length to 0\n    total_length = 0\n    \n    # Iterate through each name in the list\n    for name in names:\n        # Check if the first character is uppercase\n        if name and name[0].isupper():\n            # Add the length of the name to the total length\n            total_length += calculate_length(name)\n    \n    # Return the total length of names that start with an uppercase letter\n    return total_length\n\n# Main function as specified\ndef sample_nam(names):\n    return sum_length_of_names(names)\n",
    "reward": true,
    "program_code": "\ndef calculate_length(name):\n    # Returns the length of the name\n    return len(name)\n\ndef sum_length_of_names(names):\n    # Initialize total length to 0\n    total_length = 0\n    \n    # Iterate through each name in the list\n    for name in names:\n        # Check if the first character is uppercase\n        if name and name[0].isupper():\n            # Add the length of the name to the total length\n            total_length += calculate_length(name)\n    \n    # Return the total length of names that start with an uppercase letter\n    return total_length\n\n# Main function as specified\ndef sample_nam(names):\n    return sum_length_of_names(names)\n",
    "program_name": "sample_nam",
    "dependencies": [],
    "raw_msg": "```python\ndef calculate_length(name):\n    # Returns the length of the name\n    return len(name)\n\ndef sum_length_of_names(names):\n    # Initialize total length to 0\n    total_length = 0\n    \n    # Iterate through each name in the list\n    for name in names:\n        # Check if the first character is uppercase\n        if name and name[0].isupper():\n            # Add the length of the name to the total length\n            total_length += calculate_length(name)\n    \n    # Return the total length of names that start with an uppercase letter\n    return total_length\n\n# Main function as specified\ndef sample_nam(names):\n    return sum_length_of_names(names)\n```",
    "no_parent": true,
    "dependency_used": false
}