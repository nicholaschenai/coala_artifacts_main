{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\nTests failed:\nNone",
    "code": "\ndef count_occurrences(nums):\n    count_dict = {}  # Step 1: Initialize a dictionary to count occurrences\n    for num in nums:  # Step 2: Count each number\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n            \n    return count_dict  # Return the dictionary of counts\n\ndef two_unique_nums(nums: list[int]) -> list[int]:\n    count_dict = count_occurrences(nums)  # Get the count of each number\n    unique_nums = []  # Step 3: Initialize a list for unique numbers\n    \n    for num, count in count_dict.items():  # Step 4: Find numbers that appear exactly once\n        if count == 1:\n            unique_nums.append(num)\n    \n    return unique_nums  # Step 5: Return the list of unique numbers\n",
    "full_code": "\ndef count_occurrences(nums):\n    count_dict = {}  # Step 1: Initialize a dictionary to count occurrences\n    for num in nums:  # Step 2: Count each number\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n            \n    return count_dict  # Return the dictionary of counts\n\ndef two_unique_nums(nums: list[int]) -> list[int]:\n    count_dict = count_occurrences(nums)  # Get the count of each number\n    unique_nums = []  # Step 3: Initialize a list for unique numbers\n    \n    for num, count in count_dict.items():  # Step 4: Find numbers that appear exactly once\n        if count == 1:\n            unique_nums.append(num)\n    \n    return unique_nums  # Step 5: Return the list of unique numbers\n",
    "reward": true,
    "program_code": "\ndef count_occurrences(nums):\n    count_dict = {}  # Step 1: Initialize a dictionary to count occurrences\n    for num in nums:  # Step 2: Count each number\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n            \n    return count_dict  # Return the dictionary of counts\n\ndef two_unique_nums(nums: list[int]) -> list[int]:\n    count_dict = count_occurrences(nums)  # Get the count of each number\n    unique_nums = []  # Step 3: Initialize a list for unique numbers\n    \n    for num, count in count_dict.items():  # Step 4: Find numbers that appear exactly once\n        if count == 1:\n            unique_nums.append(num)\n    \n    return unique_nums  # Step 5: Return the list of unique numbers\n",
    "program_name": "two_unique_nums",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: The task is to create a function that takes a list of numbers and removes any duplicates, returning only the numbers that appear exactly once in the list.\n\n2. **Conceptualize a solution first in plain English**: To solve this problem, we can use a dictionary to count the occurrences of each number in the list. After counting, we can create a new list that includes only those numbers that have a count of one, which means they are unique.\n\n3. **Write a pseudocode solution**:\n   - Initialize an empty dictionary to keep track of the counts of each number.\n   - Loop through each number in the input list and update the count in the dictionary.\n   - Initialize an empty list to store the unique numbers.\n   - Loop through the dictionary and add numbers with a count of one to the unique numbers list.\n   - Return the list of unique numbers.\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n\n```python\ndef count_occurrences(nums):\n    count_dict = {}  # Step 1: Initialize a dictionary to count occurrences\n    for num in nums:  # Step 2: Count each number\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n            \n    return count_dict  # Return the dictionary of counts\n\ndef two_unique_nums(nums: list[int]) -> list[int]:\n    count_dict = count_occurrences(nums)  # Get the count of each number\n    unique_nums = []  # Step 3: Initialize a list for unique numbers\n    \n    for num, count in count_dict.items():  # Step 4: Find numbers that appear exactly once\n        if count == 1:\n            unique_nums.append(num)\n    \n    return unique_nums  # Step 5: Return the list of unique numbers\n```",
    "no_parent": true,
    "dependency_used": false
}