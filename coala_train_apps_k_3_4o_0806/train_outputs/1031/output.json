{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['4', '5 6', '6 10', '258303 89837245228', '616153 77878145466'] Output: [{'5.00000', '3.00000', '4.00000'}, {'-1'}, {'-1'}, {'546189.769984', '285168.817674', '616153.000000'}]\n\nTests failed:\nNone",
    "code": "\nimport sys\nimport math\n\ndef find_triangle_sides():\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        H = int(data[index])\n        S = int(data[index + 1])\n        index += 2\n        \n        H2 = H * H\n        S2 = 2 * S\n        discriminant = H2 * H2 - 4 * S2 * S2\n        \n        if discriminant < 0:\n            results.append(\"-1\")\n            continue\n        \n        sqrt_discriminant = math.sqrt(discriminant)\n        \n        x1 = (H2 + sqrt_discriminant) / 2\n        x2 = (H2 - sqrt_discriminant) / 2\n        \n        found = False\n        \n        for x in [x1, x2]:\n            if x >= 0:\n                a = math.sqrt(x)\n                if a != 0:\n                    b = S2 / a\n                    if abs(a * a + b * b - H2) < 0.01:\n                        sides = sorted([a, b, H])\n                        results.append(f\"{sides[0]:.5f} {sides[1]:.5f} {sides[2]:.5f}\")\n                        found = True\n                        break\n        \n        if not found:\n            results.append(\"-1\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n# Call the function to execute the solution\nfind_triangle_sides()\n",
    "full_code": "\nimport sys\nimport math\n\ndef find_triangle_sides():\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        H = int(data[index])\n        S = int(data[index + 1])\n        index += 2\n        \n        H2 = H * H\n        S2 = 2 * S\n        discriminant = H2 * H2 - 4 * S2 * S2\n        \n        if discriminant < 0:\n            results.append(\"-1\")\n            continue\n        \n        sqrt_discriminant = math.sqrt(discriminant)\n        \n        x1 = (H2 + sqrt_discriminant) / 2\n        x2 = (H2 - sqrt_discriminant) / 2\n        \n        found = False\n        \n        for x in [x1, x2]:\n            if x >= 0:\n                a = math.sqrt(x)\n                if a != 0:\n                    b = S2 / a\n                    if abs(a * a + b * b - H2) < 0.01:\n                        sides = sorted([a, b, H])\n                        results.append(f\"{sides[0]:.5f} {sides[1]:.5f} {sides[2]:.5f}\")\n                        found = True\n                        break\n        \n        if not found:\n            results.append(\"-1\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n# Call the function to execute the solution\nfind_triangle_sides()\n",
    "reward": true,
    "program_code": "\nimport sys\nimport math\n\ndef find_triangle_sides():\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        H = int(data[index])\n        S = int(data[index + 1])\n        index += 2\n        \n        H2 = H * H\n        S2 = 2 * S\n        discriminant = H2 * H2 - 4 * S2 * S2\n        \n        if discriminant < 0:\n            results.append(\"-1\")\n            continue\n        \n        sqrt_discriminant = math.sqrt(discriminant)\n        \n        x1 = (H2 + sqrt_discriminant) / 2\n        x2 = (H2 - sqrt_discriminant) / 2\n        \n        found = False\n        \n        for x in [x1, x2]:\n            if x >= 0:\n                a = math.sqrt(x)\n                if a != 0:\n                    b = S2 / a\n                    if abs(a * a + b * b - H2) < 0.01:\n                        sides = sorted([a, b, H])\n                        results.append(f\"{sides[0]:.5f} {sides[1]:.5f} {sides[2]:.5f}\")\n                        found = True\n                        break\n        \n        if not found:\n            results.append(\"-1\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n# Call the function to execute the solution\nfind_triangle_sides()\n",
    "program_name": "find_triangle_sides",
    "dependencies": [],
    "raw_msg": "Let's fix the solution by ensuring the function is called and verify the input/output handling. Here's the corrected Python code:\n\n```python\nimport sys\nimport math\n\ndef find_triangle_sides():\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        H = int(data[index])\n        S = int(data[index + 1])\n        index += 2\n        \n        H2 = H * H\n        S2 = 2 * S\n        discriminant = H2 * H2 - 4 * S2 * S2\n        \n        if discriminant < 0:\n            results.append(\"-1\")\n            continue\n        \n        sqrt_discriminant = math.sqrt(discriminant)\n        \n        x1 = (H2 + sqrt_discriminant) / 2\n        x2 = (H2 - sqrt_discriminant) / 2\n        \n        found = False\n        \n        for x in [x1, x2]:\n            if x >= 0:\n                a = math.sqrt(x)\n                if a != 0:\n                    b = S2 / a\n                    if abs(a * a + b * b - H2) < 0.01:\n                        sides = sorted([a, b, H])\n                        results.append(f\"{sides[0]:.5f} {sides[1]:.5f} {sides[2]:.5f}\")\n                        found = True\n                        break\n        \n        if not found:\n            results.append(\"-1\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n# Call the function to execute the solution\nfind_triangle_sides()\n```\n\n### Explanation of Changes\n\n- **Function Call**: Added a call to `find_triangle_sides()` at the end of the script to ensure the function is executed.\n- **Input/Output**: Verified that the input is read correctly and the output is formatted as expected. The logic for solving the quadratic equation and checking the triangle conditions remains unchanged.",
    "no_parent": false,
    "dependency_used": false
}