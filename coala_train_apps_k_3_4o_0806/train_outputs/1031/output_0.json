{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\nNone\n\nTests failed:\n Input: ['4', '5 6', '6 10', '258303 89837245228', '616153 77878145466'] Expected output: [{'5.00000', '3.00000', '4.00000'}, {'-1'}, {'-1'}, {'546189.769984', '285168.817674', '616153.000000'}] # Execution output: []\nNo output detected. You might want to check the reading from / writing to standard IO.\nA common mistake is to put the IO inside a function, but the function is not called.\n",
    "code": "\nimport sys\nimport math\n\ndef find_triangle_sides():\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        H = int(data[index])\n        S = int(data[index + 1])\n        index += 2\n        \n        H2 = H * H\n        S2 = 2 * S\n        discriminant = H2 * H2 - 4 * S2 * S2\n        \n        if discriminant < 0:\n            results.append(\"-1\")\n            continue\n        \n        sqrt_discriminant = math.sqrt(discriminant)\n        \n        x1 = (H2 + sqrt_discriminant) / 2\n        x2 = (H2 - sqrt_discriminant) / 2\n        \n        found = False\n        \n        for x in [x1, x2]:\n            if x >= 0:\n                a = math.sqrt(x)\n                if a != 0:\n                    b = S2 / a\n                    if abs(a * a + b * b - H2) < 0.01:\n                        sides = sorted([a, b, H])\n                        results.append(f\"{sides[0]:.5f} {sides[1]:.5f} {sides[2]:.5f}\")\n                        found = True\n                        break\n        \n        if not found:\n            results.append(\"-1\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n",
    "full_code": "\nimport sys\nimport math\n\ndef find_triangle_sides():\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        H = int(data[index])\n        S = int(data[index + 1])\n        index += 2\n        \n        H2 = H * H\n        S2 = 2 * S\n        discriminant = H2 * H2 - 4 * S2 * S2\n        \n        if discriminant < 0:\n            results.append(\"-1\")\n            continue\n        \n        sqrt_discriminant = math.sqrt(discriminant)\n        \n        x1 = (H2 + sqrt_discriminant) / 2\n        x2 = (H2 - sqrt_discriminant) / 2\n        \n        found = False\n        \n        for x in [x1, x2]:\n            if x >= 0:\n                a = math.sqrt(x)\n                if a != 0:\n                    b = S2 / a\n                    if abs(a * a + b * b - H2) < 0.01:\n                        sides = sorted([a, b, H])\n                        results.append(f\"{sides[0]:.5f} {sides[1]:.5f} {sides[2]:.5f}\")\n                        found = True\n                        break\n        \n        if not found:\n            results.append(\"-1\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n",
    "reward": false,
    "program_code": "\nimport sys\nimport math\n\ndef find_triangle_sides():\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        H = int(data[index])\n        S = int(data[index + 1])\n        index += 2\n        \n        H2 = H * H\n        S2 = 2 * S\n        discriminant = H2 * H2 - 4 * S2 * S2\n        \n        if discriminant < 0:\n            results.append(\"-1\")\n            continue\n        \n        sqrt_discriminant = math.sqrt(discriminant)\n        \n        x1 = (H2 + sqrt_discriminant) / 2\n        x2 = (H2 - sqrt_discriminant) / 2\n        \n        found = False\n        \n        for x in [x1, x2]:\n            if x >= 0:\n                a = math.sqrt(x)\n                if a != 0:\n                    b = S2 / a\n                    if abs(a * a + b * b - H2) < 0.01:\n                        sides = sorted([a, b, H])\n                        results.append(f\"{sides[0]:.5f} {sides[1]:.5f} {sides[2]:.5f}\")\n                        found = True\n                        break\n        \n        if not found:\n            results.append(\"-1\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n",
    "program_name": "find_triangle_sides",
    "dependencies": [],
    "raw_msg": "### Problem Restatement\n\nWe need to determine if a right-angled triangle can be formed with a given hypotenuse length `H` and area `S`. If possible, we should output the lengths of the sides of the triangle in non-decreasing order. If not, we should output `-1`.\n\n### Conceptual Solution\n\n1. **Understanding the Triangle Properties**:\n   - For a right-angled triangle with sides `a`, `b`, and hypotenuse `c`, the Pythagorean theorem states: `a^2 + b^2 = c^2`.\n   - The area `S` of the triangle is given by: `S = (1/2) * a * b`.\n\n2. **Formulating the Problem**:\n   - We are given `H` (hypotenuse) and `S` (area).\n   - We need to find `a` and `b` such that:\n     - `a^2 + b^2 = H^2`\n     - `a * b = 2 * S`\n\n3. **Solving the Equations**:\n   - From `a * b = 2 * S`, express `b` in terms of `a`: `b = (2 * S) / a`.\n   - Substitute `b` in the Pythagorean theorem: `a^2 + ((2 * S) / a)^2 = H^2`.\n   - This simplifies to a quadratic equation in terms of `a^2`.\n\n4. **Quadratic Equation**:\n   - Let `x = a^2`. The equation becomes: `x^2 - H^2 * x + (2 * S)^2 = 0`.\n   - Solve this quadratic equation for `x` using the quadratic formula: `x = (H^2 \u00b1 sqrt(H^4 - 4 * (2 * S)^2)) / 2`.\n\n5. **Checking Validity**:\n   - Ensure the discriminant `H^4 - 4 * (2 * S)^2` is non-negative for real solutions.\n   - Calculate `a` and `b` from the valid `x` and check if they satisfy the original conditions.\n\n6. **Output**:\n   - If valid `a` and `b` are found, output them along with `H` in non-decreasing order.\n   - If no valid solution exists, output `-1`.\n\n### Pseudocode\n\n```\nfunction find_triangle_sides(T, test_cases):\n    for each (H, S) in test_cases:\n        calculate discriminant = H^4 - 4 * (2 * S)^2\n        if discriminant < 0:\n            output -1\n        else:\n            x1 = (H^2 + sqrt(discriminant)) / 2\n            x2 = (H^2 - sqrt(discriminant)) / 2\n            if x1 >= 0:\n                a = sqrt(x1)\n                b = (2 * S) / a\n                if a^2 + b^2 == H^2:\n                    output sorted(a, b, H)\n            if x2 >= 0:\n                a = sqrt(x2)\n                b = (2 * S) / a\n                if a^2 + b^2 == H^2:\n                    output sorted(a, b, H)\n            if no valid (a, b) found:\n                output -1\n```\n\n### Final Python Code\n\n```python\nimport sys\nimport math\n\ndef find_triangle_sides():\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        H = int(data[index])\n        S = int(data[index + 1])\n        index += 2\n        \n        H2 = H * H\n        S2 = 2 * S\n        discriminant = H2 * H2 - 4 * S2 * S2\n        \n        if discriminant < 0:\n            results.append(\"-1\")\n            continue\n        \n        sqrt_discriminant = math.sqrt(discriminant)\n        \n        x1 = (H2 + sqrt_discriminant) / 2\n        x2 = (H2 - sqrt_discriminant) / 2\n        \n        found = False\n        \n        for x in [x1, x2]:\n            if x >= 0:\n                a = math.sqrt(x)\n                if a != 0:\n                    b = S2 / a\n                    if abs(a * a + b * b - H2) < 0.01:\n                        sides = sorted([a, b, H])\n                        results.append(f\"{sides[0]:.5f} {sides[1]:.5f} {sides[2]:.5f}\")\n                        found = True\n                        break\n        \n        if not found:\n            results.append(\"-1\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n```",
    "no_parent": false,
    "dependency_used": false
}