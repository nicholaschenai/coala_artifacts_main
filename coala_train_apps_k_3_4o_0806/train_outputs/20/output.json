{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: 4\n3 0\n5 1 2\n7 3 5\n10 -1 0\n2 12\n5 7 10\n10 16 20\n3 -100\n100 0 0\n100 -50 50\n200 100 100\n1 100\n99 -100 0\n Output: YES\nNO\nYES\nNO\n\n\nTests failed:\nNone",
    "code": "\ndef can_satisfy_all_customers(test_cases):\n    results = []\n    for test_case in test_cases:\n        n, m = test_case[0]\n        customers = test_case[1]\n        \n        current_time = 0\n        min_temp = max_temp = m\n        \n        possible = True\n        for t_i, l_i, h_i in customers:\n            time_diff = t_i - current_time\n            min_temp -= time_diff\n            max_temp += time_diff\n            \n            min_temp = max(min_temp, l_i)\n            max_temp = min(max_temp, h_i)\n            \n            if min_temp > max_temp:\n                possible = False\n                break\n            \n            current_time = t_i\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    q = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(q):\n        n, m = map(int, data[index:index + 2])\n        index += 2\n        customers = []\n        for _ in range(n):\n            t_i, l_i, h_i = map(int, data[index:index + 3])\n            index += 3\n            customers.append((t_i, l_i, h_i))\n        test_cases.append(((n, m), customers))\n    \n    can_satisfy_all_customers(test_cases)\n\nif __name__ == \"__main__\":\n    main()\n",
    "full_code": "\ndef can_satisfy_all_customers(test_cases):\n    results = []\n    for test_case in test_cases:\n        n, m = test_case[0]\n        customers = test_case[1]\n        \n        current_time = 0\n        min_temp = max_temp = m\n        \n        possible = True\n        for t_i, l_i, h_i in customers:\n            time_diff = t_i - current_time\n            min_temp -= time_diff\n            max_temp += time_diff\n            \n            min_temp = max(min_temp, l_i)\n            max_temp = min(max_temp, h_i)\n            \n            if min_temp > max_temp:\n                possible = False\n                break\n            \n            current_time = t_i\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    q = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(q):\n        n, m = map(int, data[index:index + 2])\n        index += 2\n        customers = []\n        for _ in range(n):\n            t_i, l_i, h_i = map(int, data[index:index + 3])\n            index += 3\n            customers.append((t_i, l_i, h_i))\n        test_cases.append(((n, m), customers))\n    \n    can_satisfy_all_customers(test_cases)\n\nif __name__ == \"__main__\":\n    main()\n",
    "reward": true,
    "program_code": "\ndef can_satisfy_all_customers(test_cases):\n    results = []\n    for test_case in test_cases:\n        n, m = test_case[0]\n        customers = test_case[1]\n        \n        current_time = 0\n        min_temp = max_temp = m\n        \n        possible = True\n        for t_i, l_i, h_i in customers:\n            time_diff = t_i - current_time\n            min_temp -= time_diff\n            max_temp += time_diff\n            \n            min_temp = max(min_temp, l_i)\n            max_temp = min(max_temp, h_i)\n            \n            if min_temp > max_temp:\n                possible = False\n                break\n            \n            current_time = t_i\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    q = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(q):\n        n, m = map(int, data[index:index + 2])\n        index += 2\n        customers = []\n        for _ in range(n):\n            t_i, l_i, h_i = map(int, data[index:index + 3])\n            index += 3\n            customers.append((t_i, l_i, h_i))\n        test_cases.append(((n, m), customers))\n    \n    can_satisfy_all_customers(test_cases)\n\nif __name__ == \"__main__\":\n    main()\n",
    "program_name": "main",
    "dependencies": [],
    "raw_msg": "### Problem Restatement\n\nGildong owns a restaurant and wants to satisfy all customers by adjusting the restaurant's temperature to their preferred range at the time they visit. The air conditioner can heat, cool, or remain off, and it starts off. Given the initial temperature and each customer's visit time and preferred temperature range, determine if it's possible to satisfy all customers.\n\n### Conceptual Solution\n\n1. **Initial Setup**: Start with the initial temperature and time at 0.\n2. **Iterate Over Customers**: For each customer, calculate the time difference from the previous customer (or from time 0 for the first customer).\n3. **Temperature Range Calculation**:\n   - Calculate the possible temperature range at the current customer's visit time by considering the maximum and minimum temperature changes possible within the time difference.\n   - Update the possible temperature range to ensure it overlaps with the customer's preferred range.\n4. **Feasibility Check**: If at any point the possible temperature range does not overlap with the customer's preferred range, it's impossible to satisfy all customers.\n5. **Output**: If all customers can be satisfied, output \"YES\", otherwise \"NO\".\n\n### Pseudocode\n\n```\nfunction can_satisfy_all_customers(test_cases):\n    for each test_case in test_cases:\n        read n, m\n        current_time = 0\n        min_temp = max_temp = m\n        \n        for each customer (t_i, l_i, h_i):\n            time_diff = t_i - current_time\n            min_temp -= time_diff\n            max_temp += time_diff\n            \n            min_temp = max(min_temp, l_i)\n            max_temp = min(max_temp, h_i)\n            \n            if min_temp > max_temp:\n                print \"NO\"\n                break\n            current_time = t_i\n        else:\n            print \"YES\"\n```\n\n### Final Python Code\n\n```python\ndef can_satisfy_all_customers(test_cases):\n    results = []\n    for test_case in test_cases:\n        n, m = test_case[0]\n        customers = test_case[1]\n        \n        current_time = 0\n        min_temp = max_temp = m\n        \n        possible = True\n        for t_i, l_i, h_i in customers:\n            time_diff = t_i - current_time\n            min_temp -= time_diff\n            max_temp += time_diff\n            \n            min_temp = max(min_temp, l_i)\n            max_temp = min(max_temp, h_i)\n            \n            if min_temp > max_temp:\n                possible = False\n                break\n            \n            current_time = t_i\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    q = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(q):\n        n, m = map(int, data[index:index + 2])\n        index += 2\n        customers = []\n        for _ in range(n):\n            t_i, l_i, h_i = map(int, data[index:index + 3])\n            index += 3\n            customers.append((t_i, l_i, h_i))\n        test_cases.append(((n, m), customers))\n    \n    can_satisfy_all_customers(test_cases)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n\n- **Initial Temperature Range**: Start with the initial temperature as both the minimum and maximum possible temperature.\n- **Time Difference**: For each customer, calculate the time difference from the last customer to determine how much the temperature can change.\n- **Adjust Temperature Range**: Update the possible temperature range based on the time difference and ensure it fits within the customer's preferred range.\n- **Check Feasibility**: If the possible temperature range does not overlap with the customer's preferred range, output \"NO\". Otherwise, continue to the next customer.\n- **Output Results**: After processing all customers, output \"YES\" if all can be satisfied, otherwise \"NO\".",
    "no_parent": false,
    "dependency_used": false
}