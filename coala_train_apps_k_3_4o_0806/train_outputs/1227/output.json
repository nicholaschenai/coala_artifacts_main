{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['2', 'blue yellow green orange black green', 'green yellow green orange black green'] Output: NO\nYES\n\nTests failed:\nNone",
    "code": "\ndef check_adjacent_sides(test_cases):\n    for test_case in test_cases:\n        # Split the test case into individual colors\n        colors = test_case.split()\n        \n        # Check all possible sets of three adjacent sides\n        if (colors[0] == colors[2] == colors[4] or  # Front, Left, Top\n            colors[0] == colors[3] == colors[4] or  # Front, Right, Top\n            colors[1] == colors[2] == colors[5] or  # Back, Left, Bottom\n            colors[1] == colors[3] == colors[5] or  # Back, Right, Bottom\n            colors[2] == colors[4] == colors[1] or  # Left, Top, Back\n            colors[3] == colors[4] == colors[1] or  # Right, Top, Back\n            colors[2] == colors[5] == colors[0] or  # Left, Bottom, Front\n            colors[3] == colors[5] == colors[0]):   # Right, Bottom, Front\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().strip().split('\\n')\n\n# First line is the number of test cases\nT = int(data[0])\n\n# Remaining lines are the test cases\ntest_cases = data[1:T+1]\n\n# Call the function with the test cases\ncheck_adjacent_sides(test_cases)\n",
    "full_code": "\ndef check_adjacent_sides(test_cases):\n    for test_case in test_cases:\n        # Split the test case into individual colors\n        colors = test_case.split()\n        \n        # Check all possible sets of three adjacent sides\n        if (colors[0] == colors[2] == colors[4] or  # Front, Left, Top\n            colors[0] == colors[3] == colors[4] or  # Front, Right, Top\n            colors[1] == colors[2] == colors[5] or  # Back, Left, Bottom\n            colors[1] == colors[3] == colors[5] or  # Back, Right, Bottom\n            colors[2] == colors[4] == colors[1] or  # Left, Top, Back\n            colors[3] == colors[4] == colors[1] or  # Right, Top, Back\n            colors[2] == colors[5] == colors[0] or  # Left, Bottom, Front\n            colors[3] == colors[5] == colors[0]):   # Right, Bottom, Front\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().strip().split('\\n')\n\n# First line is the number of test cases\nT = int(data[0])\n\n# Remaining lines are the test cases\ntest_cases = data[1:T+1]\n\n# Call the function with the test cases\ncheck_adjacent_sides(test_cases)\n",
    "reward": true,
    "program_code": "\ndef check_adjacent_sides(test_cases):\n    for test_case in test_cases:\n        # Split the test case into individual colors\n        colors = test_case.split()\n        \n        # Check all possible sets of three adjacent sides\n        if (colors[0] == colors[2] == colors[4] or  # Front, Left, Top\n            colors[0] == colors[3] == colors[4] or  # Front, Right, Top\n            colors[1] == colors[2] == colors[5] or  # Back, Left, Bottom\n            colors[1] == colors[3] == colors[5] or  # Back, Right, Bottom\n            colors[2] == colors[4] == colors[1] or  # Left, Top, Back\n            colors[3] == colors[4] == colors[1] or  # Right, Top, Back\n            colors[2] == colors[5] == colors[0] or  # Left, Bottom, Front\n            colors[3] == colors[5] == colors[0]):   # Right, Bottom, Front\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().strip().split('\\n')\n\n# First line is the number of test cases\nT = int(data[0])\n\n# Remaining lines are the test cases\ntest_cases = data[1:T+1]\n\n# Call the function with the test cases\ncheck_adjacent_sides(test_cases)\n",
    "program_name": "check_adjacent_sides",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English:**\n\n   We have a cube with six sides, each painted in one of six possible colors: black, blue, red, green, yellow, or orange. For multiple test cases, we need to determine if there are three sides of the cube that are adjacent to each other and painted the same color. The sides are given in the order: front, back, left, right, top, and bottom.\n\n2. **Conceptualize a solution in plain English:**\n\n   To solve this problem, we need to check specific sets of three sides that are adjacent on a cube. The possible sets of three adjacent sides are:\n   - Front, Left, Top\n   - Front, Right, Top\n   - Back, Left, Bottom\n   - Back, Right, Bottom\n   - Left, Top, Back\n   - Right, Top, Back\n   - Left, Bottom, Front\n   - Right, Bottom, Front\n\n   For each test case, we will check these sets to see if any of them have the same color on all three sides. If any set does, we output \"YES\"; otherwise, we output \"NO\".\n\n3. **Write a pseudocode solution:**\n\n   ```\n   function check_adjacent_sides(test_cases):\n       for each test_case in test_cases:\n           colors = test_case.split()\n           if (colors[0] == colors[2] == colors[4] or\n               colors[0] == colors[3] == colors[4] or\n               colors[1] == colors[2] == colors[5] or\n               colors[1] == colors[3] == colors[5] or\n               colors[2] == colors[4] == colors[1] or\n               colors[3] == colors[4] == colors[1] or\n               colors[2] == colors[5] == colors[0] or\n               colors[3] == colors[5] == colors[0]):\n               print(\"YES\")\n           else:\n               print(\"NO\")\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n\n```python\ndef check_adjacent_sides(test_cases):\n    for test_case in test_cases:\n        # Split the test case into individual colors\n        colors = test_case.split()\n        \n        # Check all possible sets of three adjacent sides\n        if (colors[0] == colors[2] == colors[4] or  # Front, Left, Top\n            colors[0] == colors[3] == colors[4] or  # Front, Right, Top\n            colors[1] == colors[2] == colors[5] or  # Back, Left, Bottom\n            colors[1] == colors[3] == colors[5] or  # Back, Right, Bottom\n            colors[2] == colors[4] == colors[1] or  # Left, Top, Back\n            colors[3] == colors[4] == colors[1] or  # Right, Top, Back\n            colors[2] == colors[5] == colors[0] or  # Left, Bottom, Front\n            colors[3] == colors[5] == colors[0]):   # Right, Bottom, Front\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().strip().split('\\n')\n\n# First line is the number of test cases\nT = int(data[0])\n\n# Remaining lines are the test cases\ntest_cases = data[1:T+1]\n\n# Call the function with the test cases\ncheck_adjacent_sides(test_cases)\n```\n\nThis code reads the input, processes each test case, and checks if any of the specified sets of three adjacent sides are painted the same color. It then prints \"YES\" or \"NO\" based on the result.",
    "no_parent": false,
    "dependency_used": false
}