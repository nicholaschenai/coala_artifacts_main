{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['2', 'i do not have any fancy quotes', 'when nothing goes right go left'] Output: Real Fancy\nregularly fancy\n\nTests failed:\nNone",
    "code": "\ndef classify_quotes(T, quotes):\n    for quote in quotes:\n        # Split the quote into words\n        words = quote.split()\n        # Check if \"not\" is a standalone word in the list\n        if \"not\" in words:\n            print(\"Real Fancy\")\n        else:\n            print(\"regularly fancy\")\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    T = int(data[0])  # Read the number of test cases\n    quotes = data[1:T+1]  # Read each quote\n    \n    classify_quotes(T, quotes)\n\nif __name__ == \"__main__\":\n    main()\n",
    "full_code": "\ndef classify_quotes(T, quotes):\n    for quote in quotes:\n        # Split the quote into words\n        words = quote.split()\n        # Check if \"not\" is a standalone word in the list\n        if \"not\" in words:\n            print(\"Real Fancy\")\n        else:\n            print(\"regularly fancy\")\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    T = int(data[0])  # Read the number of test cases\n    quotes = data[1:T+1]  # Read each quote\n    \n    classify_quotes(T, quotes)\n\nif __name__ == \"__main__\":\n    main()\n",
    "reward": true,
    "program_code": "\ndef classify_quotes(T, quotes):\n    for quote in quotes:\n        # Split the quote into words\n        words = quote.split()\n        # Check if \"not\" is a standalone word in the list\n        if \"not\" in words:\n            print(\"Real Fancy\")\n        else:\n            print(\"regularly fancy\")\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    T = int(data[0])  # Read the number of test cases\n    quotes = data[1:T+1]  # Read each quote\n    \n    classify_quotes(T, quotes)\n\nif __name__ == \"__main__\":\n    main()\n",
    "program_name": "main",
    "dependencies": [],
    "raw_msg": "## Problem Restatement\n\nWe need to classify quotes based on whether they contain the word \"not\" as a standalone word. If a quote contains \"not\" as a separate word, it is classified as \"Real Fancy\". Otherwise, it is classified as \"regularly fancy\". We are given multiple quotes and need to determine the classification for each.\n\n## Conceptual Solution\n\n1. **Input Parsing**: Read the number of test cases, T. For each test case, read the quote string S.\n2. **Word Detection**: For each quote, split the string into words and check if \"not\" is present as a standalone word.\n3. **Classification**: If \"not\" is found, classify the quote as \"Real Fancy\". Otherwise, classify it as \"regularly fancy\".\n4. **Output**: For each quote, output the classification result.\n\n## Pseudocode\n\n```\nfunction classify_quotes(T, quotes):\n    for each quote in quotes:\n        split the quote into words\n        if \"not\" is in the list of words:\n            print \"Real Fancy\"\n        else:\n            print \"regularly fancy\"\n\nfunction main():\n    read integer T\n    initialize an empty list quotes\n    for i from 1 to T:\n        read a quote and append to quotes\n    classify_quotes(T, quotes)\n```\n\n## Final Python Code\n\n```python\ndef classify_quotes(T, quotes):\n    for quote in quotes:\n        # Split the quote into words\n        words = quote.split()\n        # Check if \"not\" is a standalone word in the list\n        if \"not\" in words:\n            print(\"Real Fancy\")\n        else:\n            print(\"regularly fancy\")\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    T = int(data[0])  # Read the number of test cases\n    quotes = data[1:T+1]  # Read each quote\n    \n    classify_quotes(T, quotes)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n\n- **Input Handling**: We read all input at once and split it into lines. The first line gives us the number of test cases, T. The subsequent lines contain the quotes.\n- **Word Splitting**: For each quote, we split the string into words using the `split()` method, which handles spaces and returns a list of words.\n- **Classification**: We check if \"not\" is in the list of words. If it is, we print \"Real Fancy\". Otherwise, we print \"regularly fancy\".\n- **Output**: The results are printed directly for each quote.",
    "no_parent": false,
    "dependency_used": false
}