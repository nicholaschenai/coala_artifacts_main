{
    "env_feedback": "Note: Inputs/outputs here are automatically extracted/truncated so formatting may be a bit off.\nTests passed:\n\n Input: ['1', '2 6'] Output: 3\n\nTests failed:\nNone",
    "code": "\ndef countDivisors(n):\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n        i += 1\n    return count\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        A = int(data[index])\n        B = int(data[index + 1])\n        index += 2\n        \n        diff = abs(A - B)\n        if diff == 0:\n            results.append(-1)\n        else:\n            results.append(countDivisors(diff))\n    \n    for result in results:\n        print(result)\n\n# Call the solve function to execute the logic\nsolve()\n",
    "full_code": "\ndef countDivisors(n):\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n        i += 1\n    return count\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        A = int(data[index])\n        B = int(data[index + 1])\n        index += 2\n        \n        diff = abs(A - B)\n        if diff == 0:\n            results.append(-1)\n        else:\n            results.append(countDivisors(diff))\n    \n    for result in results:\n        print(result)\n\n# Call the solve function to execute the logic\nsolve()\n",
    "reward": true,
    "program_code": "\ndef countDivisors(n):\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n        i += 1\n    return count\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        A = int(data[index])\n        B = int(data[index + 1])\n        index += 2\n        \n        diff = abs(A - B)\n        if diff == 0:\n            results.append(-1)\n        else:\n            results.append(countDivisors(diff))\n    \n    for result in results:\n        print(result)\n\n# Call the solve function to execute the logic\nsolve()\n",
    "program_name": "solve",
    "dependencies": [],
    "raw_msg": "```python\ndef countDivisors(n):\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n        i += 1\n    return count\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    T = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(T):\n        A = int(data[index])\n        B = int(data[index + 1])\n        index += 2\n        \n        diff = abs(A - B)\n        if diff == 0:\n            results.append(-1)\n        else:\n            results.append(countDivisors(diff))\n    \n    for result in results:\n        print(result)\n\n# Call the solve function to execute the logic\nsolve()\n```\n\n### Explanation\n\n- **Function `countDivisors(n)`**: This function calculates the number of divisors of a given number `n`. It iterates from `1` to `sqrt(n)` and checks if `i` is a divisor. If it is, it counts both `i` and `n/i` as divisors unless they are the same.\n\n- **Function `solve()`**: This function handles reading input, processing each test case, and printing the results.\n  - It reads all input data at once and splits it into a list of strings.\n  - It extracts the number of test cases `T`.\n  - For each test case, it reads the roll numbers `A` and `B`, calculates their absolute difference, and determines the number of divisors of this difference.\n  - If `A` equals `B`, it appends `-1` to the results list, indicating infinite solutions.\n  - Finally, it prints the results for each test case.\n\n- **Execution**: The `solve()` function is called at the end to ensure the logic is executed when the script runs. This setup is typical for competitive programming environments where the input is provided via standard input.",
    "no_parent": false,
    "dependency_used": false
}