{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\nTests failed:\nNone",
    "code": "\ndef larg_nnum(lst, n):\n    # Step 1: Sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n    # Step 2: Return the first n elements from the sorted list\n    return sorted_lst[:n]\n\n# The function is declared last as per the instructions.\n",
    "full_code": "\ndef larg_nnum(lst, n):\n    # Step 1: Sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n    # Step 2: Return the first n elements from the sorted list\n    return sorted_lst[:n]\n\n# The function is declared last as per the instructions.\n",
    "reward": true,
    "program_code": "\ndef larg_nnum(lst, n):\n    # Step 1: Sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n    # Step 2: Return the first n elements from the sorted list\n    return sorted_lst[:n]\n\n# The function is declared last as per the instructions.\n",
    "program_name": "larg_nnum",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   We need to create a function that takes a list of numbers and an integer `n`, and returns a new list containing the `n` largest numbers from the original list.\n\n2. **Conceptualize a solution first in plain English**: \n   To find the `n` largest numbers in a list, we can sort the list in descending order and then select the first `n` elements from this sorted list. This will give us the largest numbers. We can then return these numbers as a new list.\n\n3. **Write a pseudocode solution**:\n   ```\n   function larg_nnum(list, n):\n       sort the list in descending order\n       return the first n elements of the sorted list\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef larg_nnum(lst, n):\n    # Step 1: Sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n    # Step 2: Return the first n elements from the sorted list\n    return sorted_lst[:n]\n\n# The function is declared last as per the instructions.\n```",
    "no_parent": true,
    "dependency_used": false
}