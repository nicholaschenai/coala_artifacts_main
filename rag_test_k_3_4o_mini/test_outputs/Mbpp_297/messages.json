[
    {
        "role": "system",
        "content": "\nYou are an expert programmer tasked with solving the problem below.\n\nFollow the user's instructions to solve the problem.\nThe user can ask for analysis, code, or both.\n\n## Instructions\nWhen asked to output code,\n- Make sure to wrap your code in '```python' and '```' Markdown delimiters, \n- include exactly one block of code with the entire solution\n- No outside libraries are allowed. \n- Builtins are allowed.\n- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).\n- DO NOT write any assert statements / tests.\n\n## Problem\n[BEGIN PROBLEM]\nWrite a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.\n\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\n[END PROBLEM]\n"
    },
    {
        "role": "user",
        "content": "\n## Instructions\n\nReason through the problem and:\n1. Restate the problem in plain English\n2. Conceptualize a solution first in plain English\n3. Write a pseudocode solution\n4. Output the final Python 3 solution with your solution steps in comments.\n\nMake sure to wrap your code in '```python' and '```' Markdown delimiters, \nand include exactly one block of code with the entire solution.\n\nNo outside libraries are allowed.\nBuiltins are allowed.\n"
    },
    {
        "role": "assistant",
        "content": "1. **Restate the problem in plain English**: \n   We need to create a function that takes a list which may contain other lists (nested lists) and returns a single list with all the elements from the nested lists combined into one flat list.\n\n2. **Conceptualize a solution first in plain English**: \n   To flatten the list, we can iterate through each element of the input list. If an element is a list itself, we will need to go deeper into that list and extract its elements. If an element is not a list, we will simply add it to our result list. This process will continue recursively until all elements are extracted and combined into a single list.\n\n3. **Write a pseudocode solution**:\n   ```\n   function flatten_list(nested_list):\n       create an empty list called flat_list\n       for each element in nested_list:\n           if element is a list:\n               call flatten_list recursively on element and extend flat_list with the result\n           else:\n               append element to flat_list\n       return flat_list\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef flatten_list(nested_list):\n    # Create an empty list to hold the flattened result\n    flat_list = []\n    \n    # Iterate through each element in the provided nested list\n    for element in nested_list:\n        # Check if the current element is a list\n        if isinstance(element, list):\n            # If it is a list, recursively flatten it and extend the flat_list with the result\n            flat_list.extend(flatten_list(element))\n        else:\n            # If it is not a list, append the element to flat_list\n            flat_list.append(element)\n    \n    # Return the fully flattened list\n    return flat_list\n```"
    },
    {
        "role": "user",
        "content": "\nAlso, here are some of your memories.\nFeel free to use the given information to aid your problem solving process if necessary.\nDo not confuse the memories with the problem statement.\n\n## Memories\n\n[Textbook Reference Material]:\n    Chapter: Complete search\n    Section: Generating permutations\n    Part: 1/1\n    \\section{Generating permutations}\n\n    \\index{permutation}\n\n    Next we consider the problem of generating\n    all permutations of a set of $n$ elements.\n    For example, the permutations of $\\{0,1,2\\}$ are\n    $(0,1,2)$, $(0,2,1)$, $(1,0,2)$, $(1,2,0)$,\n    $(2,0,1)$ and $(2,1,0)$.\n    Again, there are two approaches:\n    we can either use recursion or go through the\n    permutations iteratively.\n\n    \\subsubsection{Method 1}\n\n    Like subsets, permutations can be generated\n    using recursion.\n    The following function \\texttt{search} goes\n    through the permutations of the set $\\{0,1,\\ldots,n-1\\}$.\n    The function builds a vector \\texttt{permutation}\n    that contains the permutation,\n    and the search begins when the function is\n    called without parameters.\n\n    \\begin{lstlisting}\n    void search() {\n        if (permutation.size() == n) {\n            // process permutation\n        } else {\n            for (int i = 0; i < n; i++) {\n                if (chosen[i]) continue;\n                chosen[i] = true;\n                permutation.push_back(i);\n                search();\n                chosen[i] = false;\n                permutation.pop_back();\n            }\n        }\n    }\n    \\end{lstlisting}\n\n    Each function call adds a new element to\n    \\texttt{permutation}.\n    The array \\texttt{chosen} indicates which\n    elements are already included in the permutation.\n    If the size of \\texttt{permutation} equals the size of the set,\n    a permutation has been generated.\n\n    \\subsubsection{Method 2}\n\n    \\index{next\\_permutation@\\texttt{next\\_permutation}}\n\n    Another method for generating permutations\n    is to begin with the permutation\n    $\\{0,1,\\ldots,n-1\\}$ and repeatedly\n    use a function that constructs the next permutation\n    in increasing order.\n    The C++ standard library contains the function\n    \\texttt{next\\_permutation} that can be used for this:\n\n    \\begin{lstlisting}\n    vector<int> permutation;\n    for (int i = 0; i < n; i++) {\n        permutation.push_back(i);\n    }\n    do {\n        // process permutation\n    } while (next_permutation(permutation.begin(),permutation.end()));\n    \\end{lstlisting}\n[/Textbook Reference Material]\n\n\n[Textbook Reference Material]:\n    Title: Generating all $K$-combinations\n    Part: 1/1\n    # Generating all $K$-combinations\n\n    In this article we will discuss the problem of generating all $K$-combinations.\n    Given the natural numbers $N$ and $K$, and considering a set of numbers from $1$ to $N$.\n    The task is to derive all **subsets of size $K$**.\n\n    ## Generate next lexicographical $K$-combination {data-toc-label=\"Generate next lexicographical K-combination\"}\n\n    First we will generate them in lexicographical order.\n    The algorithm for this is simple. The first combination will be ${1, 2, ..., K}$. Now let's see how\n    to find the combination that immediately follows this, lexicographically. To do so, we consider our\n    current combination, and find the rightmost element that has not yet reached its highest possible value. Once\n    finding this element, we increment it by $1$, and assign the lowest valid value to all subsequent\n    elements.\n\n    ```{.cpp file=next_combination}\n    bool next_combination(vector<int>& a, int n) {\n        int k = (int)a.size();\n        for (int i = k - 1; i >= 0; i--) {\n            if (a[i] < n - k + i + 1) {\n                a[i]++;\n                for (int j = i + 1; j < k; j++)\n                    a[j] = a[j - 1] + 1;\n                return true;\n            }\n        }\n        return false;\n    }\n    ```\n\n    ## Generate all $K$-combinations such that adjacent combinations differ by one element {data-toc-label=\"Generate all K-combinations such that adjacent combinations differ by one element\"}\n\n    This time we want to generate all $K$-combinations in such\n    an order, that adjacent combinations differ exactly by one element.\n\n    This can be solved using the [Gray Code](../algebra/gray-code.md):\n    If we assign a bitmask to each subset, then by generating and iterating over these bitmasks with Gray codes, we can obtain our answer.\n\n    The task of generating $K$-combinations can also be solved using Gray Codes in a different way:\n    Generate Gray Codes for the numbers from $0$ to $2^N - 1$ and leave only those codes containing $K$ $1$s.\n    The surprising fact is that in the resulting sequence of $K$ set bits, any two neighboring masks (including the\n    first and last mask - neighboring in a cyclic sense) - will differ exactly by two bits, which is our objective (remove\n    a number, add a number).\n\n    Let us prove this:\n\n    For the proof, we recall the fact that the sequence $G(N)$ (representing the $N$<sup>th</sup> Gray Code) can \n    be obtained as follows:\n\n    $$G(N) = 0G(N-1) \\cup 1G(N-1)^\\text{R}$$\n\n    That is, consider the Gray Code sequence for $N-1$, and prefix $0$ before every term. And consider the \n    reversed Gray Code sequence for $N-1$ and prefix a $1$ before every mask, and\n    concatenate these two sequences.\n\n    Now we may produce our proof.\n\n    First, we prove that the first and last masks differ exactly in two bits. To do this, it is sufficient to note\n    that the first mask of the sequence $G(N)$, will be of the form $N-K$ $0$s, followed by $K$ $1$s. As\n    the first bit is set as $0$, after which $(N-K-1)$ $0$s follow, after which $K$ set bits follow and the last mask will be of the form $1$, then $(N-K)$ $0$s, then $K-1$ $1$s.\n    Applying the principle of mathematical induction, and using the formula for $G(N)$, concludes the proof.\n\n    Now our task is to show that any two adjacent codes also differ exactly in two bits, we can do this by considering our recursive equation for the generation of Gray Codes. Let us assume the content of the two halves formed by $G(N-1)$ is true. Now we need to prove that the new consecutive pair formed at the junction (by the concatenation of these two halves) is also valid, i.e. they differ by exactly two bits.\n\n    This can be done, as we know the last mask of the first half and the first mask of the second half. The last mask of the first half would be $1$, then $(N-K-1)$ $0$s, then $K-1$ $1$s. And the first mask of the second half would be $0$, then $(N-K-2)$ $0$s would follow, and then $K$ $1$s. Thus, comparing the two masks, we find exactly two bits that differ.\n\n    The following is a naive implementation working by generating all $2^{n}$ possible subsets, and finding subsets of size\n    $K$.\n\n    ```{.cpp file=generate_all_combinations_naive}\n    int gray_code (int n) {\n        return n ^ (n >> 1);\n    }\n\n    int count_bits (int n) {\n        int res = 0;\n        for (; n; n >>= 1)\n            res += n & 1;\n        return res;\n    }\n\n    void all_combinations (int n, int k) {\n        for (int i = 0; i < (1 << n); i++) {\n            int cur = gray_code (i);\n            if (count_bits(cur) == k) {\n                for (int j = 0; j < n; j++) {\n                    if (cur & (1 << j))\n                        cout << j + 1;\n                }\n                cout << \"\\n\";\n            }\n        }\n    }\n    ```\n\n    It's worth mentioning that a more efficient implementation exists that only resorts to building valid combinations and thus\n    works in $O\\left(N \\cdot \\binom{N}{K}\\right)$ however it is recursive in nature and for smaller values of $N$ it probably has a larger constant\n    than the previous solution.\n\n    The implementation is derived from the formula:\n\n    $$G(N, K) = 0G(N-1, K) \\cup 1G(N-1, K-1)^\\text{R}$$\n\n    This formula is obtained by modifying the general equation to determine the Gray code, and works by selecting the\n    subsequence from appropriate elements.\n\n    Its implementation is as follows:\n\n    ```{.cpp file=generate_all_combinations_fast}\n    vector<int> ans;\n\n    void gen(int n, int k, int idx, bool rev) {\n        if (k > n || k < 0)\n            return;\n\n        if (!n) {\n            for (int i = 0; i < idx; ++i) {\n                if (ans[i])\n                    cout << i + 1;\n            }\n            cout << \"\\n\";\n            return;\n        }\n\n        ans[idx] = rev;\n        gen(n - 1, k - rev, idx + 1, false);\n        ans[idx] = !rev;\n        gen(n - 1, k - !rev, idx + 1, true);\n    }\n\n    void all_combinations(int n, int k) {\n        ans.resize(n);\n        gen(n, k, 0, false);\n    }\n    ```\n[/Textbook Reference Material]\n\n\n[Textbook Reference Material]:\n    Title: Search for connected components in a graph\n    Part: 1/1\n    # Search for connected components in a graph\n\n    Given an undirected graph $G$ with $n$ nodes and $m$ edges. We are required to find in it all the connected components, i.e, several groups of vertices such that within a group each vertex can be reached from another and no path exists between different groups.\n\n    ## An algorithm for solving the problem\n\n    * To solve the problem, we can use Depth First Search or Breadth First Search.\n\n    * In fact, we will be doing a series of rounds of DFS: The first round will start from first node and all the nodes in the first connected component will be traversed (found). Then we find the first unvisited node of the remaining nodes, and run Depth First Search on it, thus finding a second connected component. And so on, until all the nodes are visited.\n\n    * The total asymptotic running time of this algorithm is $O(n + m)$ : In fact, this algorithm will not run on the same vertex twice, which means that each edge will be seen exactly two times (at one end and at the other end).\n\n    ## Implementation\n\n    ``` cpp\n    int n;\n    vector<vector<int>> adj;\n    vector<bool> used;\n    vector<int> comp;\n\n    void dfs(int v) {\n        used[v] = true ;\n        comp.push_back(v);\n        for (int u : adj[v]) {\n            if (!used[u])\n                dfs(u);\n        }\n    }\n\n    void find_comps() {\n        fill(used.begin(), used.end(), 0);\n        for (int v = 0; v < n; ++v) {\n            if (!used[v]) {\n                comp.clear();\n                dfs(v);\n                cout << \"Component:\" ;\n                for (int u : comp)\n                    cout << ' ' << u;\n                cout << endl ;\n            }\n        }\n    }\n    ```\n\n    * The most important function that is used is `find_comps()` which finds and displays connected components of the graph.\n\n    * The graph is stored in adjacency list representation, i.e `adj[v]` contains a list of vertices that have edges from the vertex `v`.\n\n    * Vector `comp` contains a list of nodes in the current connected component.\n\n    ## Iterative implementation of the code \n\n    Deeply recursive functions are in general bad.\n    Every single recursive call will require a little bit of memory in the stack, and per default programs only have a limited amount of stack space.\n    So when you do a recursive DFS over a connected graph with millions of nodes, you might run into stack overflows.\n\n    It is always possible to translate a recursive program into an iterative program, by manually maintaining a stack data structure.\n    Since this data structure is allocated on the heap, no stack overflow will occur.\n\n    ```cpp\n    int n;\n    vector<vector<int>> adj;\n    vector<bool> used;\n    vector<int> comp;\n\n    void dfs(int v) {\n        stack<int> st;\n        st.push(v);\n    \n        while (!st.empty()) {\n            int curr = st.top();\n            st.pop();\n            if (!used[curr]) {\n                used[curr] = true;\n                comp.push_back(curr);\n                for (int i = adj[curr].size() - 1; i >= 0; i--) {\n                    st.push(adj[curr][i]);\n                }\n            }\n        }\n    }\n\n    void find_comps() {\n        fill(used.begin(), used.end(), 0);\n        for (int v = 0; v < n ; ++v) {\n            if (!used[v]) {\n                comp.clear();\n                dfs(v);\n                cout << \"Component:\" ;\n                for (int u : comp)\n                    cout << ' ' << u;\n                cout << endl ;\n            }\n        }\n    }\n    ```\n[/Textbook Reference Material]\n\n"
    },
    {
        "role": "assistant",
        "content": "1. **Restate the problem in plain English**: The task is to create a function that takes a nested list (which can contain integers and other lists) and returns a single flat list containing all the integers from the nested structure, in the same order they appear.\n\n2. **Conceptualize a solution first in plain English**: To flatten the nested list, we can use a recursive approach. The function will check each element of the list:\n   - If the element is an integer, it will be added to the result list.\n   - If the element is another list, the function will call itself with that list as the argument, effectively flattening it.\n   This way, we can handle lists of arbitrary depth.\n\n3. **Write a pseudocode solution**:\n   ```\n   function flatten_list(nested_list):\n       create an empty list result\n       for each element in nested_list:\n           if element is an integer:\n               append element to result\n           else if element is a list:\n               result.extend(flatten_list(element))\n       return result\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef flatten_list(nested_list):\n    # Create an empty list to hold the flattened result\n    result = []\n    \n    # Iterate through each element in the nested list\n    for element in nested_list:\n        # If the element is an integer, add it to the result\n        if isinstance(element, int):\n            result.append(element)\n        # If the element is a list, recursively flatten it and extend the result\n        elif isinstance(element, list):\n            result.extend(flatten_list(element))\n    \n    # Return the flattened list\n    return result\n```"
    },
    {
        "role": "user",
        "content": "\n[Environment Feedback]:\n    Note: Tests are automatically generated and can be wrong.\n\n    Tests passed:\n    assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\n    Tests failed:\n    None\n[/Environment Feedback]\n"
    }
]