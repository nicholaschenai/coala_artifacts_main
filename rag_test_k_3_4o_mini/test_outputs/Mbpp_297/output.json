{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\nTests failed:\nNone",
    "code": "\ndef flatten_list(nested_list):\n    # Create an empty list to hold the flattened result\n    result = []\n    \n    # Iterate through each element in the nested list\n    for element in nested_list:\n        # If the element is an integer, add it to the result\n        if isinstance(element, int):\n            result.append(element)\n        # If the element is a list, recursively flatten it and extend the result\n        elif isinstance(element, list):\n            result.extend(flatten_list(element))\n    \n    # Return the flattened list\n    return result\n",
    "full_code": "\ndef flatten_list(nested_list):\n    # Create an empty list to hold the flattened result\n    result = []\n    \n    # Iterate through each element in the nested list\n    for element in nested_list:\n        # If the element is an integer, add it to the result\n        if isinstance(element, int):\n            result.append(element)\n        # If the element is a list, recursively flatten it and extend the result\n        elif isinstance(element, list):\n            result.extend(flatten_list(element))\n    \n    # Return the flattened list\n    return result\n",
    "reward": true,
    "program_code": "\ndef flatten_list(nested_list):\n    # Create an empty list to hold the flattened result\n    result = []\n    \n    # Iterate through each element in the nested list\n    for element in nested_list:\n        # If the element is an integer, add it to the result\n        if isinstance(element, int):\n            result.append(element)\n        # If the element is a list, recursively flatten it and extend the result\n        elif isinstance(element, list):\n            result.extend(flatten_list(element))\n    \n    # Return the flattened list\n    return result\n",
    "program_name": "flatten_list",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: The task is to create a function that takes a nested list (which can contain integers and other lists) and returns a single flat list containing all the integers from the nested structure, in the same order they appear.\n\n2. **Conceptualize a solution first in plain English**: To flatten the nested list, we can use a recursive approach. The function will check each element of the list:\n   - If the element is an integer, it will be added to the result list.\n   - If the element is another list, the function will call itself with that list as the argument, effectively flattening it.\n   This way, we can handle lists of arbitrary depth.\n\n3. **Write a pseudocode solution**:\n   ```\n   function flatten_list(nested_list):\n       create an empty list result\n       for each element in nested_list:\n           if element is an integer:\n               append element to result\n           else if element is a list:\n               result.extend(flatten_list(element))\n       return result\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef flatten_list(nested_list):\n    # Create an empty list to hold the flattened result\n    result = []\n    \n    # Iterate through each element in the nested list\n    for element in nested_list:\n        # If the element is an integer, add it to the result\n        if isinstance(element, int):\n            result.append(element)\n        # If the element is a list, recursively flatten it and extend the result\n        elif isinstance(element, list):\n            result.extend(flatten_list(element))\n    \n    # Return the flattened list\n    return result\n```",
    "no_parent": true,
    "dependency_used": false
}