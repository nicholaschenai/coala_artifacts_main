INFO - [test iter]: 315/378

INFO - The task prompt is Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a function to check whether a given string is a decimal numbe...

INFO - Attempting task_id Mbpp/759
INFO - LM call n parse attempt 1 / 3

INFO - [Task id] Mbpp/759 [prompt] 
You are an expert programmer tasked with solving the problem below.

Follow the user's instructions to solve the problem.
The user can ask for analysis, code, or both.

## Instructions
When asked to output code,
- Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
- include exactly one block of code with the entire solution
- No outside libraries are allowed. 
- Builtins are allowed.
- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).
- DO NOT write any assert statements / tests.

## Problem
[BEGIN PROBLEM]
Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a function to check whether a given string is a decimal number with a precision of 2.
assert is_decimal('123.11')==True
"""

[END PROBLEM]

INFO - [Task id] Mbpp/759 [prompt] 
## Instructions

Reason through the problem and:
1. Restate the problem in plain English
2. Conceptualize a solution first in plain English
3. Write a pseudocode solution
4. Output the final Python 3 solution with your solution steps in comments.

Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
and include exactly one block of code with the entire solution.

No outside libraries are allowed.
Builtins are allowed.

INFO - [Task id] Mbpp/759 [generation text] 1. **Restate the problem in plain English:**
   We need to create a function that checks if a given string represents a decimal number with exactly two digits after the decimal point. The function should return `True` if the string meets this criterion and `False` otherwise.

2. **Conceptualize a solution first in plain English:**
   To determine if a string is a valid decimal number with two decimal places, we can:
   - Check if the string contains exactly one decimal point.
   - Ensure that there are exactly two digits following the decimal point.
   - Verify that the characters before the decimal point are digits (or can be empty if the number is less than 1).
   - Handle cases where the string might be negative by allowing a leading '-' sign.

3. **Write a pseudocode solution:**
   ```
   function is_decimal(s: string) -> bool:
       if s is empty:
           return False
       if s starts with '-' or '+' (optional):
           remove the sign
       split s by '.' into parts
       if length of parts is not 2:
           return False
       if length of parts[0] is not valid (not all digits):
           return False
       if length of parts[1] is not 2:
           return False
       if parts[1] is not valid (not all digits):
           return False
       return True
   ```

4. **Output the final Python 3 solution with your solution steps in comments:**
```python
def is_decimal(s: str) -> bool:
    # Check if the string is empty
    if not s:
        return False
    
    # Handle optional leading sign
    if s[0] in ('-', '+'):
        s = s[1:]  # Remove the sign for further checks
    
    # Split the string by the decimal point
    parts = s.split('.')
    
    # Check if there is exactly one decimal point
    if len(parts) != 2:
        return False
    
    # Check if the part before the decimal point is valid (digits only)
    if not parts[0].isdigit() and parts[0] != '':
        return False
    
    # Check if the part after the decimal point has exactly two digits
    if len(parts[1]) != 2 or not parts[1].isdigit():
        return False
    
    # If all checks passed, return True
    return True
```
INFO - [35m Rollout attempt 1/4[0m
INFO - [33m Retrieving 3 entries for db: semantic 
 [0m
INFO - Retrieved (score=0.5109):
Title: Primality tests
Part: 2/2
```

It's also possible to do the check with only 7 bases: 2, 325, 9375, 28178, 450775, 9780504 and 1795265022.
However, since these numbers (except 2) are not prime, you need to check additionally if the number you are checking is equal to any prime divisor of th...


INFO - Retrieved (score=0.5273):
Title: Primality tests
Part: 1/2
# Primality tests

This article describes multiple algorithms to determine if a number is prime or not.

## Trial division

By definition a prime number doesn't have any divisors other than $1$ and itself.
A composite number has at least one additional divisor, le...


INFO - Retrieved (score=0.5297):
Title: Linear Diophantine Equation
Part: 1/2
# Linear Diophantine Equation

A Linear Diophantine Equation (in two variables) is an equation of the general form:

$$ax + by = c$$

where $a$, $b$, $c$ are given integers, and $x$, $y$ are unknown integers.

In this article, we consider several class...


INFO - Retrieved (score=0.5109): 
[Textbook Reference Material]:
    Title: Primality tests
    Part: 2/2
    ```

    It's also possible to do the check with only 7 bases: 2, 325, 9375, 28178, 450775, 9780504 and 1795265022.
    However, since these numbers (except 2) are not prime, you need to check additionally if the number ...
INFO - Retrieved (score=0.5273): 
[Textbook Reference Material]:
    Title: Primality tests
    Part: 1/2
    # Primality tests

    This article describes multiple algorithms to determine if a number is prime or not.

    ## Trial division

    By definition a prime number doesn't have any divisors other than $1$ and itself.
  ...
INFO - Retrieved (score=0.5297): 
[Textbook Reference Material]:
    Title: Linear Diophantine Equation
    Part: 1/2
    # Linear Diophantine Equation

    A Linear Diophantine Equation (in two variables) is an equation of the general form:

    $$ax + by = c$$

    where $a$, $b$, $c$ are given integers, and $x$, $y$ are unkno...
INFO - LM call n parse attempt 1 / 3

INFO - [Task id] Mbpp/759 [prompt] 
You are an expert programmer tasked with solving the problem below.

Follow the user's instructions to solve the problem.
The user can ask for analysis, code, or both.

## Instructions
When asked to output code,
- Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
- include exactly one block of code with the entire solution
- No outside libraries are allowed. 
- Builtins are allowed.
- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).
- DO NOT write any assert statements / tests.

## Problem
[BEGIN PROBLEM]
Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a function to check whether a given string is a decimal number with a precision of 2.
assert is_decimal('123.11')==True
"""

[END PROBLEM]

INFO - [Task id] Mbpp/759 [prompt] 
## Instructions

Reason through the problem and:
1. Restate the problem in plain English
2. Conceptualize a solution first in plain English
3. Write a pseudocode solution
4. Output the final Python 3 solution with your solution steps in comments.

Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
and include exactly one block of code with the entire solution.

No outside libraries are allowed.
Builtins are allowed.

INFO - [Task id] Mbpp/759 [prompt] 
Also, here are some of your memories.
Feel free to use the given information to aid your problem solving process if necessary.
Do not confuse the memories with the problem statement.

## Memories

[Textbook Reference Material]:
    Title: Primality tests
    Part: 2/2
    ```

    It's also possible to do the check with only 7 bases: 2, 325, 9375, 28178, 450775, 9780504 and 1795265022.
    However, since these numbers (except 2) are not prime, you need to check additionally if the number you are checking is equal to any prime divisor of those bases: 2, 3, 5, 13, 19, 73, 193, 407521, 299210837.
[/Textbook Reference Material]


[Textbook Reference Material]:
    Title: Primality tests
    Part: 1/2
    # Primality tests

    This article describes multiple algorithms to determine if a number is prime or not.

    ## Trial division

    By definition a prime number doesn't have any divisors other than $1$ and itself.
    A composite number has at least one additional divisor, let's call it $d$.
    Naturally $\frac{n}{d}$ is also a divisor of $n$.
    It's easy to see, that either $d \le \sqrt{n}$ or $\frac{n}{d} \le \sqrt{n}$, therefore one of the divisors $d$ and $\frac{n}{d}$ is $\le \sqrt{n}$.
    We can use this information to check for primality.

    We try to find a non-trivial divisor, by checking if any of the numbers between $2$ and $\sqrt{n}$ is a divisor of $n$.
    If it is a divisor, than $n$ is definitely not prime, otherwise it is.

    ```cpp
    bool isPrime(int x) {
        for (int d = 2; d * d <= x; d++) {
            if (x % d == 0)
                return false;
        }
        return x >= 2;
    }
    ```

    This is the simplest form of a prime check.
    You can optimize this function quite a bit, for instance by only checking all odd numbers in the loop, since the only even prime number is 2.
    Multiple such optimizations are described in the article about [integer factorization](factorization.md).

    ## Fermat primality test

    This is a probabilistic test.

    Fermat's little theorem (see also [Euler's totient function](phi-function.md)) states, that for a prime number $p$ and a coprime integer $a$ the following equation holds:

    $$a^{p-1} \equiv 1 \bmod p$$

    In general this theorem doesn't hold for composite numbers.

    This can be used to create a primality test.
    We pick an integer $2 \le a \le p - 2$, and check if the equation holds or not.
    If it doesn't hold, e.g. $a^{p-1} \not\equiv 1 \bmod p$, we know that $p$ cannot be a prime number.
    In this case we call the base $a$ a *Fermat witness* for the compositeness of $p$.

    However it is also possible, that the equation holds for a composite number.
    So if the equation holds, we don't have a proof for primality.
    We only can say that $p$ is *probably prime*.
    If it turns out that the number is actually composite, we call the base $a$ a *Fermat liar*.

    By running the test for all possible bases $a$, we can actually prove that a number is prime.
    However this is not done in practice, since this is a lot more effort that just doing *trial division*.
    Instead the test will be repeated multiple times with random choices for $a$.
    If we find no witness for the compositeness, it is very likely that the number is in fact prime.

    ```cpp
    bool probablyPrimeFermat(int n, int iter=5) {
        if (n < 4)
            return n == 2 || n == 3;

        for (int i = 0; i < iter; i++) {
            int a = 2 + rand() % (n - 3);
            if (binpower(a, n - 1, n) != 1)
                return false;
        }
        return true;
    }
    ```

    We use [Binary Exponentiation](binary-exp.md) to efficiently compute the power $a^{p-1}$.

    There is one bad news though:
    there exist some composite numbers where $a^{n-1} \equiv 1 \bmod n$ holds for all $a$ coprime to $n$, for instance for the number $561 = 3 \cdot 11 \cdot 17$.
    Such numbers are called *Carmichael numbers*.
    The Fermat primality test can identify these numbers only, if we have immense luck and choose a base $a$ with $\gcd(a, n) \ne 1$.

    The Fermat test is still be used in practice, as it is very fast and Carmichael numbers are very rare.
    E.g. there only exist 646 such numbers below $10^9$.

    ## Miller-Rabin primality test

    The Miller-Rabin test extends the ideas from the Fermat test.

    For an odd number $n$, $n-1$ is even and we can factor out all powers of 2.
    We can write:

    $$n - 1 = 2^s \cdot d,~\text{with}~d~\text{odd}.$$

    This allows us to factorize the equation of Fermat's little theorem:

    $$\begin{array}{rl}
    a^{n-1} \equiv 1 \bmod n &\Longleftrightarrow a^{2^s d} - 1 \equiv 0 \bmod n \\\\
    &\Longleftrightarrow (a^{2^{s-1} d} + 1) (a^{2^{s-1} d} - 1) \equiv 0 \bmod n \\\\
    &\Longleftrightarrow (a^{2^{s-1} d} + 1) (a^{2^{s-2} d} + 1) (a^{2^{s-2} d} - 1) \equiv 0 \bmod n \\\\
    &\quad\vdots \\\\
    &\Longleftrightarrow (a^{2^{s-1} d} + 1) (a^{2^{s-2} d} + 1) \cdots (a^{d} + 1) (a^{d} - 1) \equiv 0 \bmod n \\\\
    \end{array}$$

    If $n$ is prime, then $n$ has to divide one of these factors.
    And in the Miller-Rabin primality test we check exactly that statement, which is a more stricter version of the statement of the Fermat test.
    For a base $2 \le a \le n-2$ we check if either

    $$a^d \equiv 1 \bmod n$$

    holds or

    $$a^{2^r d} \equiv -1 \bmod n$$

    holds for some $0 \le r \le s - 1$.

    If we found a base $a$ which doesn't satisfy any of the above equalities, than we found a *witness* for the compositeness of $n$.
    In this case we have proven that $n$ is not a prime number.

    Similar to the Fermat test, it is also possible that the set of equations is satisfied for a composite number.
    In that case the base $a$ is called a *strong liar*.
    If a base $a$ satisfies the equations (one of them), $n$ is only *strong probable prime*.
    However, there are no numbers like the Carmichael numbers, where all non-trivial bases lie.
    In fact it is possible to show, that at most $\frac{1}{4}$ of the bases can be strong liars.
    If $n$ is composite, we have a probability of $\ge 75\%$ that a random base will tell us that it is composite.
    By doing multiple iterations, choosing different random bases, we can tell with very high probability if the number is truly prime or if it is composite.

    Here is an implementation for 64 bit integer.

    ```cpp
    using u64 = uint64_t;
    using u128 = __uint128_t;

    u64 binpower(u64 base, u64 e, u64 mod) {
        u64 result = 1;
        base %= mod;
        while (e) {
            if (e & 1)
                result = (u128)result * base % mod;
            base = (u128)base * base % mod;
            e >>= 1;
        }
        return result;
    }

    bool check_composite(u64 n, u64 a, u64 d, int s) {
        u64 x = binpower(a, d, n);
        if (x == 1 || x == n - 1)
            return false;
        for (int r = 1; r < s; r++) {
            x = (u128)x * x % n;
            if (x == n - 1)
                return false;
        }
        return true;
    };

    bool MillerRabin(u64 n, int iter=5) { // returns true if n is probably prime, else returns false.
        if (n < 4)
            return n == 2 || n == 3;

        int s = 0;
        u64 d = n - 1;
        while ((d & 1) == 0) {
            d >>= 1;
            s++;
        }

        for (int i = 0; i < iter; i++) {
            int a = 2 + rand() % (n - 3);
            if (check_composite(n, a, d, s))
                return false;
        }
        return true;
    }
    ```

    Before the Miller-Rabin test you can test additionally if one of the first few prime numbers is a divisor.
    This can speed up the test by a lot, since most composite numbers have very small prime divisors.
    E.g. $88\%$ of all numbers have a prime factors smaller than $100$.

    ### Deterministic version

    Miller showed that it is possible to make the algorithm deterministic by only checking all bases $\le O((\ln n)^2)$.
    Bach later gave a concrete bound, it is only necessary to test all bases $a \le 2 \ln(n)^2$.

    This is still a pretty large number of bases.
    So people have invested quite a lot of computation power into finding lower bounds.
    It turns out, for testing a 32 bit integer it is only necessary to check the first 4 prime bases: 2, 3, 5 and 7.
    The smallest composite number that fails this test is $3,215,031,751 = 151 \cdot 751 \cdot 28351$.
    And for testing 64 bit integer it is enough to check the first 12 prime bases: 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, and 37.

    This results in the following deterministic implementation:

    ```cpp
    bool MillerRabin(u64 n) { // returns true if n is prime, else returns false.
        if (n < 2)
            return false;

        int r = 0;
        u64 d = n - 1;
        while ((d & 1) == 0) {
            d >>= 1;
            r++;
        }

        for (int a : {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37}) {
            if (n == a)
                return true;
            if (check_composite(n, a, d, r))
                return false;
        }
        return true;
    }
[/Textbook Reference Material]


[Textbook Reference Material]:
    Title: Linear Diophantine Equation
    Part: 1/2
    # Linear Diophantine Equation

    A Linear Diophantine Equation (in two variables) is an equation of the general form:

    $$ax + by = c$$

    where $a$, $b$, $c$ are given integers, and $x$, $y$ are unknown integers.

    In this article, we consider several classical problems on these equations:

    * finding one solution
    * finding all solutions
    * finding the number of solutions and the solutions themselves in a given interval
    * finding a solution with minimum value of $x + y$

    ## The degenerate case

    A degenerate case that need to be taken care of is when $a = b = 0$. It is easy to see that we either have no solutions or infinitely many solutions, depending on whether $c = 0$ or not. In the rest of this article, we will ignore this case.

    ## Analytic solution

    When $a \neq 0$ and $b \neq 0$, the equation $ax+by=c$ can be equivalently treated as either of the following:

    \begin{gather}
    ax \equiv c \pmod b,\newline
    by \equiv c \pmod a.
    \end{gather}

    Without loss of generality, assume that $b \neq 0$ and consider the first equation. When $a$ and $b$ are co-prime, the solution to it is given as

    $$x \equiv ca^{-1} \pmod b,$$

    where $a^{-1}$ is the [modular inverse](module-inverse.md) of $a$ modulo $b$.

    When $a$ and $b$ are not co-prime, values of $ax$ modulo $b$ for all integer $x$ are divisible by $g=\gcd(a, b)$, so the solution only exists when $c$ is divisible by $g$. In this case, one of solutions can be found by reducing the equation by $g$:

    $$(a/g) x \equiv (c/g) \pmod{b/g}.$$

    By the definition of $g$, the numbers $a/g$ and $b/g$ are co-prime, so the solution is given explicitly as

    $$\begin{cases}
    x \equiv (c/g)(a/g)^{-1}\pmod{b/g},\\
    y = \frac{c-ax}{b}.
    \end{cases}$$

    ## Algorithmic solution

    To find one solution of the Diophantine equation with 2 unknowns, you can use the [Extended Euclidean algorithm](extended-euclid-algorithm.md). First, assume that $a$ and $b$ are non-negative. When we apply Extended Euclidean algorithm for $a$ and $b$, we can find their greatest common divisor $g$ and 2 numbers $x_g$ and $y_g$ such that:

    $$a x_g + b y_g = g$$

    If $c$ is divisible by $g = \gcd(a, b)$, then the given Diophantine equation has a solution, otherwise it does not have any solution. The proof is straight-forward: a linear combination of two numbers is divisible by their common divisor.

    Now supposed that $c$ is divisible by $g$, then we have:

    $$a \cdot x_g \cdot \frac{c}{g} + b \cdot y_g \cdot \frac{c}{g} = c$$

    Therefore one of the solutions of the Diophantine equation is:

    $$x_0 = x_g \cdot \frac{c}{g},$$

    $$y_0 = y_g \cdot \frac{c}{g}.$$

    The above idea still works when $a$ or $b$ or both of them are negative. We only need to change the sign of $x_0$ and $y_0$ when necessary.

    Finally, we can implement this idea as follows (note that this code does not consider the case $a = b = 0$):

    ```{.cpp file=linear_diophantine_any}
    int gcd(int a, int b, int& x, int& y) {
        if (b == 0) {
            x = 1;
            y = 0;
            return a;
        }
        int x1, y1;
        int d = gcd(b, a % b, x1, y1);
        x = y1;
        y = x1 - y1 * (a / b);
        return d;
    }

    bool find_any_solution(int a, int b, int c, int &x0, int &y0, int &g) {
        g = gcd(abs(a), abs(b), x0, y0);
        if (c % g) {
            return false;
        }

        x0 *= c / g;
        y0 *= c / g;
        if (a < 0) x0 = -x0;
        if (b < 0) y0 = -y0;
        return true;
    }
    ```

    ## Getting all solutions

    From one solution $(x_0, y_0)$, we can obtain all the solutions of the given equation.

    Let $g = \gcd(a, b)$ and let $x_0, y_0$ be integers which satisfy the following:

    $$a \cdot x_0 + b \cdot y_0 = c$$

    Now, we should see that adding $b / g$ to $x_0$, and, at the same time subtracting $a / g$ from $y_0$ will not break the equality:

    $$a \cdot \left(x_0 + \frac{b}{g}\right) + b \cdot \left(y_0 - \frac{a}{g}\right) = a \cdot x_0 + b \cdot y_0 + a \cdot \frac{b}{g} - b \cdot \frac{a}{g} = c$$

    Obviously, this process can be repeated again, so all the numbers of the form:

    $$x = x_0 + k \cdot \frac{b}{g}$$

    $$y = y_0 - k \cdot \frac{a}{g}$$

    are solutions of the given Diophantine equation.

    Moreover, this is the set of all possible solutions of the given Diophantine equation.

    ## Finding the number of solutions and the solutions in a given interval

    From previous section, it should be clear that if we don't impose any restrictions on the solutions, there would be infinite number of them. So in this section, we add some restrictions on the interval of $x$ and $y$, and we will try to count and enumerate all the solutions.

    Let there be two intervals: $[min_x; max_x]$ and $[min_y; max_y]$ and let's say we only want to find the solutions in these two intervals.

    Note that if $a$ or $b$ is $0$, then the problem only has one solution. We don't consider this case here.

    First, we can find a solution which have minimum value of $x$, such that $x \ge min_x$. To do this, we first find any solution of the Diophantine equation. Then, we shift this solution to get $x \ge min_x$ (using what we know about the set of all solutions in previous section). This can be done in $O(1)$.
    Denote this minimum value of $x$ by $l_{x1}$.

    Similarly, we can find the maximum value of $x$ which satisfy $x \le max_x$. Denote this maximum value of $x$ by $r_{x1}$.

    Similarly, we can find the minimum value of $y$ $(y \ge min_y)$ and maximum values of $y$ $(y \le max_y)$. Denote the corresponding values of $x$ by $l_{x2}$ and $r_{x2}$.

    The final solution is all solutions with x in intersection of $[l_{x1}, r_{x1}]$ and $[l_{x2}, r_{x2}]$. Let denote this intersection by $[l_x, r_x]$.

    Following is the code implementing this idea.
    Notice that we divide $a$ and $b$ at the beginning by $g$.
    Since the equation $a x + b y = c$ is equivalent to the equation $\frac{a}{g} x + \frac{b}{g} y = \frac{c}{g}$, we can use this one instead and have $\gcd(\frac{a}{g}, \frac{b}{g}) = 1$, which simplifies the formulas.

    ```{.cpp file=linear_diophantine_all}
    void shift_solution(int & x, int & y, int a, int b, int cnt) {
        x += cnt * b;
        y -= cnt * a;
    }

    int find_all_solutions(int a, int b, int c, int minx, int maxx, int miny, int maxy) {
        int x, y, g;
        if (!find_any_solution(a, b, c, x, y, g))
            return 0;
        a /= g;
        b /= g;

        int sign_a = a > 0 ? +1 : -1;
        int sign_b = b > 0 ? +1 : -1;

        shift_solution(x, y, a, b, (minx - x) / b);
        if (x < minx)
            shift_solution(x, y, a, b, sign_b);
        if (x > maxx)
            return 0;
        int lx1 = x;

        shift_solution(x, y, a, b, (maxx - x) / b);
        if (x > maxx)
            shift_solution(x, y, a, b, -sign_b);
        int rx1 = x;

        shift_solution(x, y, a, b, -(miny - y) / a);
        if (y < miny)
            shift_solution(x, y, a, b, -sign_a);
        if (y > maxy)
            return 0;
        int lx2 = x;

        shift_solution(x, y, a, b, -(maxy - y) / a);
        if (y > maxy)
            shift_solution(x, y, a, b, sign_a);
        int rx2 = x;

        if (lx2 > rx2)
            swap(lx2, rx2);
        int lx = max(lx1, lx2);
        int rx = min(rx1, rx2);

        if (lx > rx)
            return 0;
        return (rx - lx) / abs(b) + 1;
    }
[/Textbook Reference Material]


INFO - [Task id] Mbpp/759 [generation text] 1. **Restate the problem in plain English**: The task is to create a function that checks if a given string represents a decimal number with exactly two digits after the decimal point. The function should return `True` if the string meets this criterion and `False` otherwise.

2. **Conceptualize a solution first in plain English**: To determine if a string is a decimal number with two decimal places, we can:
   - Check if the string contains exactly one decimal point.
   - Ensure that there are exactly two digits following the decimal point.
   - Verify that the characters before the decimal point are digits (or empty if the decimal point is at the start).
   - Handle cases where the string might start with a negative sign.

3. **Write a pseudocode solution**:
   ```
   function is_decimal(s):
       if s is empty:
           return False
       if s starts with '-' or '+':
           remove the sign
       split s by '.'
       if the length of the split parts is not 2:
           return False
       if the first part is not a valid integer (contains non-digit characters):
           return False
       if the second part does not have exactly 2 digits:
           return False
       return True
   ```

4. **Output the final Python 3 solution with your solution steps in comments**:
```python
def is_decimal(s: str) -> bool:
    # Check if the string is empty
    if not s:
        return False
    
    # Handle optional sign at the beginning
    if s[0] in ('-', '+'):
        s = s[1:]
    
    # Split the string by the decimal point
    parts = s.split('.')
    
    # Check if there is exactly one decimal point
    if len(parts) != 2:
        return False
    
    # Check if the first part is a valid integer (digits only)
    if not parts[0].isdigit():
        return False
    
    # Check if the second part has exactly 2 digits
    if len(parts[1]) != 2 or not parts[1].isdigit():
        return False
    
    # If all checks passed, return True
    return True
```
INFO - program_code:
 
def is_decimal(s: str) -> bool:
    # Check if the string is empty
    if not s:
        return False
    
    # Handle optional sign at the beginning
    if s[0] in ('-', '+'):
        s = s[1:]
    
    # Split the string by the decimal point
    parts = s.split('.')
    
    # Check if there is exactly one decimal point
    if len(parts) != 2:
        return False
    
    # Check if the first part is a valid integer (digits only)
    if not parts[0].isdigit():
        return False
    
    # Check if the second part has exactly 2 digits
    if len(parts[1]) != 2 or not parts[1].isdigit():
        return False
    
    # If all checks passed, return True
    return True


INFO - program_name:
 is_decimal

INFO - dependencies:
 []

INFO - raw_msg:
 1. **Restate the problem in plain English**: The task is to create a function that checks if a given string represents a decimal number with exactly two digits after the decimal point. The function should return `True` if the string meets this criterion and `False` otherwise.

2. **Conceptualize a solution first in plain English**: To determine if a string is a decimal number with two decimal places, we can:
   - Check if the string contains exactly one decimal point.
   - Ensure that there are exactly two digits following the decimal point.
   - Verify that the characters before the decimal point are digits (or empty if the decimal point is at the start).
   - Handle cases where the string might start with a negative sign.

3. **Write a pseudocode solution**:
   ```
   function is_decimal(s):
       if s is empty:
           return False
       if s starts with '-' or '+':
           remove the sign
       split s by '.'
       if the length of the split parts is not 2:
           return False
       if the first part is not a valid integer (contains non-digit characters):
           return False
       if the second part does not have exactly 2 digits:
           return False
       return True
   ```

4. **Output the final Python 3 solution with your solution steps in comments**:
```python
def is_decimal(s: str) -> bool:
    # Check if the string is empty
    if not s:
        return False
    
    # Handle optional sign at the beginning
    if s[0] in ('-', '+'):
        s = s[1:]
    
    # Split the string by the decimal point
    parts = s.split('.')
    
    # Check if there is exactly one decimal point
    if len(parts) != 2:
        return False
    
    # Check if the first part is a valid integer (digits only)
    if not parts[0].isdigit():
        return False
    
    # Check if the second part has exactly 2 digits
    if len(parts[1]) != 2 or not parts[1].isdigit():
        return False
    
    # If all checks passed, return True
    return True
```

INFO - no_parent:
 True

INFO - full code to be executed: 
 
def is_decimal(s: str) -> bool:
    # Check if the string is empty
    if not s:
        return False
    
    # Handle optional sign at the beginning
    if s[0] in ('-', '+'):
        s = s[1:]
    
    # Split the string by the decimal point
    parts = s.split('.')
    
    # Check if there is exactly one decimal point
    if len(parts) != 2:
        return False
    
    # Check if the first part is a valid integer (digits only)
    if not parts[0].isdigit():
        return False
    
    # Check if the second part has exactly 2 digits
    if len(parts[1]) != 2 or not parts[1].isdigit():
        return False
    
    # If all checks passed, return True
    return True


INFO - obs: Note: Tests are automatically generated and can be wrong.

Tests passed:
assert is_decimal('123.11')==True

Tests failed:
None
reward: True
done: None
info: {'individual_results': (True,)}
INFO - acc:299/315 = 94.92%
