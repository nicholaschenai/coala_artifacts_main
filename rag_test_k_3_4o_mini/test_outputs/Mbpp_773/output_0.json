{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nNone\n\nTests failed:\nassert occurance_substring('python programming, python language','python')==('python', 0, 6) # output: ('python', 0, 5)",
    "code": "\ndef occurance_substring(main_string: str, substring: str) -> tuple or None:\n    # Get the length of the substring\n    length_of_substring = len(substring)\n    # Get the length of the main string\n    length_of_main_string = len(main_string)\n    \n    # Iterate through the main string\n    for i in range(length_of_main_string - length_of_substring + 1):\n        # Check if the substring matches the part of the main string\n        if main_string[i:i + length_of_substring] == substring:\n            # Return the substring and its starting and ending indices\n            return (substring, i, i + length_of_substring - 1)\n    \n    # Return None if the substring is not found\n    return None\n",
    "full_code": "\ndef occurance_substring(main_string: str, substring: str) -> tuple or None:\n    # Get the length of the substring\n    length_of_substring = len(substring)\n    # Get the length of the main string\n    length_of_main_string = len(main_string)\n    \n    # Iterate through the main string\n    for i in range(length_of_main_string - length_of_substring + 1):\n        # Check if the substring matches the part of the main string\n        if main_string[i:i + length_of_substring] == substring:\n            # Return the substring and its starting and ending indices\n            return (substring, i, i + length_of_substring - 1)\n    \n    # Return None if the substring is not found\n    return None\n",
    "reward": false,
    "program_code": "\ndef occurance_substring(main_string: str, substring: str) -> tuple or None:\n    # Get the length of the substring\n    length_of_substring = len(substring)\n    # Get the length of the main string\n    length_of_main_string = len(main_string)\n    \n    # Iterate through the main string\n    for i in range(length_of_main_string - length_of_substring + 1):\n        # Check if the substring matches the part of the main string\n        if main_string[i:i + length_of_substring] == substring:\n            # Return the substring and its starting and ending indices\n            return (substring, i, i + length_of_substring - 1)\n    \n    # Return None if the substring is not found\n    return None\n",
    "program_name": "occurance_substring",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   The task is to create a function that finds the first occurrence of a specific substring within a given string. If the substring is found, the function should return the substring along with its starting and ending indices. If the substring is not found, the function should return `None`.\n\n2. **Conceptualize a solution first in plain English**: \n   To solve this problem, we can iterate through the main string and check for the presence of the substring at each position. We will compare the characters of the substring with the characters in the main string. If we find a match, we will return the substring along with its starting and ending indices. If we reach the end of the main string without finding the substring, we will return `None`.\n\n3. **Write a pseudocode solution**:\n   ```\n   function occurance_substring(main_string, substring):\n       length_of_substring = length of substring\n       length_of_main_string = length of main_string\n       \n       for i from 0 to length_of_main_string - length_of_substring:\n           if main_string[i:i + length_of_substring] == substring:\n               return (substring, i, i + length_of_substring - 1)\n       \n       return None\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef occurance_substring(main_string: str, substring: str) -> tuple or None:\n    # Get the length of the substring\n    length_of_substring = len(substring)\n    # Get the length of the main string\n    length_of_main_string = len(main_string)\n    \n    # Iterate through the main string\n    for i in range(length_of_main_string - length_of_substring + 1):\n        # Check if the substring matches the part of the main string\n        if main_string[i:i + length_of_substring] == substring:\n            # Return the substring and its starting and ending indices\n            return (substring, i, i + length_of_substring - 1)\n    \n    # Return None if the substring is not found\n    return None\n```",
    "no_parent": true,
    "dependency_used": false
}