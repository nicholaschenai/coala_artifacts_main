{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nNone\n\nTests failed:\nassert find_solution(2, 3, 7) == (2, 1) # output: (-7, 7)",
    "code": "\ndef extended_euclidean(a, b):\n    # Base case of the recursion\n    if b == 0:\n        return (1, 0)  # Return coefficients for a and b\n    else:\n        # Recursive call\n        x1, y1 = extended_euclidean(b, a % b)\n        # Update coefficients\n        return (y1, x1 - (a // b) * y1)\n\ndef gcd(x: int, y: int) -> int:\n    # Calculate the greatest common divisor using the Euclidean algorithm\n    while y != 0:\n        (x, y) = (y, x % y)\n    return x\n\ndef find_solution(a: int, b: int, n: int) -> tuple[int, int] | None:\n    # Calculate the greatest common divisor of a and b\n    g = gcd(a, b)\n    # Check if n is divisible by g\n    if n % g != 0:\n        return None  # No solution exists\n    \n    # Find one solution using Extended Euclidean Algorithm\n    x0, y0 = extended_euclidean(a, b)\n    # Scale the solution to satisfy ax + by = n\n    x0 *= n // g\n    y0 *= n // g\n    \n    return (x0, y0)  # Return the solution as a tuple\n",
    "full_code": "\ndef extended_euclidean(a, b):\n    # Base case of the recursion\n    if b == 0:\n        return (1, 0)  # Return coefficients for a and b\n    else:\n        # Recursive call\n        x1, y1 = extended_euclidean(b, a % b)\n        # Update coefficients\n        return (y1, x1 - (a // b) * y1)\n\ndef gcd(x: int, y: int) -> int:\n    # Calculate the greatest common divisor using the Euclidean algorithm\n    while y != 0:\n        (x, y) = (y, x % y)\n    return x\n\ndef find_solution(a: int, b: int, n: int) -> tuple[int, int] | None:\n    # Calculate the greatest common divisor of a and b\n    g = gcd(a, b)\n    # Check if n is divisible by g\n    if n % g != 0:\n        return None  # No solution exists\n    \n    # Find one solution using Extended Euclidean Algorithm\n    x0, y0 = extended_euclidean(a, b)\n    # Scale the solution to satisfy ax + by = n\n    x0 *= n // g\n    y0 *= n // g\n    \n    return (x0, y0)  # Return the solution as a tuple\n",
    "reward": false,
    "program_code": "\ndef extended_euclidean(a, b):\n    # Base case of the recursion\n    if b == 0:\n        return (1, 0)  # Return coefficients for a and b\n    else:\n        # Recursive call\n        x1, y1 = extended_euclidean(b, a % b)\n        # Update coefficients\n        return (y1, x1 - (a // b) * y1)\n\ndef gcd(x: int, y: int) -> int:\n    # Calculate the greatest common divisor using the Euclidean algorithm\n    while y != 0:\n        (x, y) = (y, x % y)\n    return x\n\ndef find_solution(a: int, b: int, n: int) -> tuple[int, int] | None:\n    # Calculate the greatest common divisor of a and b\n    g = gcd(a, b)\n    # Check if n is divisible by g\n    if n % g != 0:\n        return None  # No solution exists\n    \n    # Find one solution using Extended Euclidean Algorithm\n    x0, y0 = extended_euclidean(a, b)\n    # Scale the solution to satisfy ax + by = n\n    x0 *= n // g\n    y0 *= n // g\n    \n    return (x0, y0)  # Return the solution as a tuple\n",
    "program_name": "find_solution",
    "dependencies": [],
    "raw_msg": "```python\ndef extended_euclidean(a, b):\n    # Base case of the recursion\n    if b == 0:\n        return (1, 0)  # Return coefficients for a and b\n    else:\n        # Recursive call\n        x1, y1 = extended_euclidean(b, a % b)\n        # Update coefficients\n        return (y1, x1 - (a // b) * y1)\n\ndef gcd(x: int, y: int) -> int:\n    # Calculate the greatest common divisor using the Euclidean algorithm\n    while y != 0:\n        (x, y) = (y, x % y)\n    return x\n\ndef find_solution(a: int, b: int, n: int) -> tuple[int, int] | None:\n    # Calculate the greatest common divisor of a and b\n    g = gcd(a, b)\n    # Check if n is divisible by g\n    if n % g != 0:\n        return None  # No solution exists\n    \n    # Find one solution using Extended Euclidean Algorithm\n    x0, y0 = extended_euclidean(a, b)\n    # Scale the solution to satisfy ax + by = n\n    x0 *= n // g\n    y0 *= n // g\n    \n    return (x0, y0)  # Return the solution as a tuple\n```",
    "no_parent": true,
    "dependency_used": false
}