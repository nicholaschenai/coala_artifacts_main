{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert get_pairs_count([1,1,1,1],2) == 6\n\nTests failed:\nNone",
    "code": "\ndef get_pairs_count(numbers, target_sum):\n    # Initialize a counter for the number of pairs\n    count = 0\n    # Loop through each number in the list\n    for i in range(len(numbers)):\n        # Loop through the numbers that come after the current number\n        for j in range(i + 1, len(numbers)):\n            # Check if the sum of the current pair equals the target sum\n            if numbers[i] + numbers[j] == target_sum:\n                # If it does, increment the count\n                count += 1\n    # Return the total count of pairs found\n    return count\n",
    "full_code": "\ndef get_pairs_count(numbers, target_sum):\n    # Initialize a counter for the number of pairs\n    count = 0\n    # Loop through each number in the list\n    for i in range(len(numbers)):\n        # Loop through the numbers that come after the current number\n        for j in range(i + 1, len(numbers)):\n            # Check if the sum of the current pair equals the target sum\n            if numbers[i] + numbers[j] == target_sum:\n                # If it does, increment the count\n                count += 1\n    # Return the total count of pairs found\n    return count\n",
    "reward": true,
    "program_code": "\ndef get_pairs_count(numbers, target_sum):\n    # Initialize a counter for the number of pairs\n    count = 0\n    # Loop through each number in the list\n    for i in range(len(numbers)):\n        # Loop through the numbers that come after the current number\n        for j in range(i + 1, len(numbers)):\n            # Check if the sum of the current pair equals the target sum\n            if numbers[i] + numbers[j] == target_sum:\n                # If it does, increment the count\n                count += 1\n    # Return the total count of pairs found\n    return count\n",
    "program_name": "get_pairs_count",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: We need to create a function that counts how many pairs of numbers in a given list add up to a specified sum. For example, if the list is `[1, 1, 1, 1]` and the sum is `2`, the function should return `6` because there are six pairs of `1`s that can be formed.\n\n2. **Conceptualize a solution first in plain English**: To solve this problem, we can use a nested loop to check each possible pair of numbers in the list. For each pair, we will check if their sum equals the specified sum. If it does, we will increment a counter. However, we need to be careful not to count the same pair multiple times. We can achieve this by ensuring that we only consider pairs where the first index is less than the second index.\n\n3. **Write a pseudocode solution**:\n   ```\n   function get_pairs_count(numbers, target_sum):\n       initialize count to 0\n       for i from 0 to length of numbers - 1:\n           for j from i + 1 to length of numbers:\n               if numbers[i] + numbers[j] == target_sum:\n                   increment count\n       return count\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef get_pairs_count(numbers, target_sum):\n    # Initialize a counter for the number of pairs\n    count = 0\n    # Loop through each number in the list\n    for i in range(len(numbers)):\n        # Loop through the numbers that come after the current number\n        for j in range(i + 1, len(numbers)):\n            # Check if the sum of the current pair equals the target sum\n            if numbers[i] + numbers[j] == target_sum:\n                # If it does, increment the count\n                count += 1\n    # Return the total count of pairs found\n    return count\n```",
    "no_parent": true,
    "dependency_used": false
}