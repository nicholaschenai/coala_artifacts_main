{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\nTests failed:\nNone",
    "code": "\ndef find_first_index(arr, element):\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < element:\n            left = mid + 1\n        else:\n            right = mid\n    return left if left < len(arr) and arr[left] == element else -1\n\ndef find_last_index(arr, element):\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= element:\n            left = mid + 1\n        else:\n            right = mid\n    return left - 1 if left > 0 and arr[left - 1] == element else -1\n\ndef is_majority(arr, n, element):\n    # Check if the array is empty\n    if n == 0:\n        return False\n    \n    # Find the first index of the element\n    first_index = find_first_index(arr, element)\n    # If the element is not found, return False\n    if first_index == -1:\n        return False\n    \n    # Find the last index of the element\n    last_index = find_last_index(arr, element)\n    # Calculate the count of the element\n    count = last_index - first_index + 1\n    \n    # Check if the count is greater than n/2\n    return count > n / 2\n",
    "full_code": "\ndef find_first_index(arr, element):\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < element:\n            left = mid + 1\n        else:\n            right = mid\n    return left if left < len(arr) and arr[left] == element else -1\n\ndef find_last_index(arr, element):\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= element:\n            left = mid + 1\n        else:\n            right = mid\n    return left - 1 if left > 0 and arr[left - 1] == element else -1\n\ndef is_majority(arr, n, element):\n    # Check if the array is empty\n    if n == 0:\n        return False\n    \n    # Find the first index of the element\n    first_index = find_first_index(arr, element)\n    # If the element is not found, return False\n    if first_index == -1:\n        return False\n    \n    # Find the last index of the element\n    last_index = find_last_index(arr, element)\n    # Calculate the count of the element\n    count = last_index - first_index + 1\n    \n    # Check if the count is greater than n/2\n    return count > n / 2\n",
    "reward": true,
    "program_code": "\ndef find_first_index(arr, element):\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < element:\n            left = mid + 1\n        else:\n            right = mid\n    return left if left < len(arr) and arr[left] == element else -1\n\ndef find_last_index(arr, element):\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= element:\n            left = mid + 1\n        else:\n            right = mid\n    return left - 1 if left > 0 and arr[left - 1] == element else -1\n\ndef is_majority(arr, n, element):\n    # Check if the array is empty\n    if n == 0:\n        return False\n    \n    # Find the first index of the element\n    first_index = find_first_index(arr, element)\n    # If the element is not found, return False\n    if first_index == -1:\n        return False\n    \n    # Find the last index of the element\n    last_index = find_last_index(arr, element)\n    # Calculate the count of the element\n    count = last_index - first_index + 1\n    \n    # Check if the count is greater than n/2\n    return count > n / 2\n",
    "program_name": "is_majority",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   We need to create a function that checks if a given element appears more than half the time in a sorted array. This element is referred to as the \"majority element.\" If it does, the function should return `True`; otherwise, it should return `False`.\n\n2. **Conceptualize a solution first in plain English**: \n   Since the array is sorted, we can efficiently find the first and last occurrence of the element in question. If the count of this element (which can be calculated as the difference between the indices of its last and first occurrence) exceeds half the length of the array, we can conclude that it is the majority element.\n\n3. **Write a pseudocode solution**:\n   ```\n   function is_majority(arr, n, element):\n       if n == 0:\n           return False\n       \n       first_index = find_first_index(arr, element)\n       if first_index == -1:\n           return False\n       \n       last_index = find_last_index(arr, element)\n       count = last_index - first_index + 1\n       \n       return count > n / 2\n\n   function find_first_index(arr, element):\n       // Implement binary search to find the first occurrence of element\n\n   function find_last_index(arr, element):\n       // Implement binary search to find the last occurrence of element\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef find_first_index(arr, element):\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < element:\n            left = mid + 1\n        else:\n            right = mid\n    return left if left < len(arr) and arr[left] == element else -1\n\ndef find_last_index(arr, element):\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= element:\n            left = mid + 1\n        else:\n            right = mid\n    return left - 1 if left > 0 and arr[left - 1] == element else -1\n\ndef is_majority(arr, n, element):\n    # Check if the array is empty\n    if n == 0:\n        return False\n    \n    # Find the first index of the element\n    first_index = find_first_index(arr, element)\n    # If the element is not found, return False\n    if first_index == -1:\n        return False\n    \n    # Find the last index of the element\n    last_index = find_last_index(arr, element)\n    # Calculate the count of the element\n    count = last_index - first_index + 1\n    \n    # Check if the count is greater than n/2\n    return count > n / 2\n```",
    "no_parent": true,
    "dependency_used": false
}