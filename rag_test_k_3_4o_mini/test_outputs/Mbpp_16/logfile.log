INFO - [test iter]: 38/378

INFO - The task prompt is Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a function to that returns true if the input string contains ...

INFO - Attempting task_id Mbpp/16
INFO - LM call n parse attempt 1 / 3

INFO - [Task id] Mbpp/16 [prompt] 
You are an expert programmer tasked with solving the problem below.

Follow the user's instructions to solve the problem.
The user can ask for analysis, code, or both.

## Instructions
When asked to output code,
- Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
- include exactly one block of code with the entire solution
- No outside libraries are allowed. 
- Builtins are allowed.
- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).
- DO NOT write any assert statements / tests.

## Problem
[BEGIN PROBLEM]
Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.
assert text_lowercase_underscore("aab_cbbbc")==(True)
"""

[END PROBLEM]

INFO - [Task id] Mbpp/16 [prompt] 
## Instructions

Reason through the problem and:
1. Restate the problem in plain English
2. Conceptualize a solution first in plain English
3. Write a pseudocode solution
4. Output the final Python 3 solution with your solution steps in comments.

Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
and include exactly one block of code with the entire solution.

No outside libraries are allowed.
Builtins are allowed.

INFO - [Task id] Mbpp/16 [generation text] 1. **Restate the problem in plain English:**
   We need to create a function that checks if a given string consists of sequences of lowercase letters that are separated by underscores. The function should return `True` if the string meets this condition and `False` otherwise.

2. **Conceptualize a solution first in plain English:**
   To solve this problem, we can use a regular expression pattern to match the desired format of the string. The pattern should allow for one or more lowercase letters followed by an optional underscore, and this can repeat. If the entire string matches this pattern, we return `True`; otherwise, we return `False`.

3. **Write a pseudocode solution:**
   - Define a function `text_lowercase_underscore` that takes a string as input.
   - Use a regular expression to check if the string consists of lowercase letters and underscores.
   - If the string matches the pattern, return `True`.
   - If it does not match, return `False`.

4. **Output the final Python 3 solution with your solution steps in comments:**

```python
import re

# Function to check if the input string contains sequences of lowercase letters joined with an underscore
def text_lowercase_underscore(s: str) -> bool:
    # Define the regex pattern for lowercase letters and underscores
    pattern = r'^[a-z]+(_[a-z]+)*$'
    
    # Use the fullmatch method to check if the entire string matches the pattern
    return re.fullmatch(pattern, s) is not None
```
INFO - [35m Rollout attempt 1/4[0m
INFO - [33m Retrieving 3 entries for db: semantic 
 [0m
INFO - Retrieved (score=0.5363):
Title: Aho-Corasick algorithm
Part: 1/3
# Aho-Corasick algorithm

The Aho-Corasick algorithm allows us to quickly search for multiple patterns in a text.
The set of pattern strings is also called a _dictionary_.
We will denote the total length of its constituent strings by $m$ and the size of the...


INFO - Retrieved (score=0.5363):
Title: Balanced bracket sequences
Part: 1/2
# Balanced bracket sequences

A **balanced bracket sequence** is a string consisting of only brackets, such that this sequence, when inserted certain numbers and mathematical operations, gives a valid mathematical expression.
Formally you can define bal...


INFO - Retrieved (score=0.5387):
Title: Finding repetitions
Part: 1/2
# Finding repetitions

Given a string $s$ of length $n$.

A **repetition** is two occurrences of a string in a row.
In other words a repetition can be described by a pair of indices $i < j$ such that the substring $s[i \dots j]$ consists of two identical strin...


INFO - Retrieved (score=0.5363): 
[Textbook Reference Material]:
    Title: Aho-Corasick algorithm
    Part: 1/3
    # Aho-Corasick algorithm

    The Aho-Corasick algorithm allows us to quickly search for multiple patterns in a text.
    The set of pattern strings is also called a _dictionary_.
    We will denote the total leng...
INFO - Retrieved (score=0.5363): 
[Textbook Reference Material]:
    Title: Balanced bracket sequences
    Part: 1/2
    # Balanced bracket sequences

    A **balanced bracket sequence** is a string consisting of only brackets, such that this sequence, when inserted certain numbers and mathematical operations, gives a valid math...
INFO - Retrieved (score=0.5387): 
[Textbook Reference Material]:
    Title: Finding repetitions
    Part: 1/2
    # Finding repetitions

    Given a string $s$ of length $n$.

    A **repetition** is two occurrences of a string in a row.
    In other words a repetition can be described by a pair of indices $i < j$ such that the ...
INFO - LM call n parse attempt 1 / 3

INFO - [Task id] Mbpp/16 [prompt] 
You are an expert programmer tasked with solving the problem below.

Follow the user's instructions to solve the problem.
The user can ask for analysis, code, or both.

## Instructions
When asked to output code,
- Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
- include exactly one block of code with the entire solution
- No outside libraries are allowed. 
- Builtins are allowed.
- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).
- DO NOT write any assert statements / tests.

## Problem
[BEGIN PROBLEM]
Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.
assert text_lowercase_underscore("aab_cbbbc")==(True)
"""

[END PROBLEM]

INFO - [Task id] Mbpp/16 [prompt] 
## Instructions

Reason through the problem and:
1. Restate the problem in plain English
2. Conceptualize a solution first in plain English
3. Write a pseudocode solution
4. Output the final Python 3 solution with your solution steps in comments.

Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
and include exactly one block of code with the entire solution.

No outside libraries are allowed.
Builtins are allowed.

INFO - [Task id] Mbpp/16 [prompt] 
Also, here are some of your memories.
Feel free to use the given information to aid your problem solving process if necessary.
Do not confuse the memories with the problem statement.

## Memories

[Textbook Reference Material]:
    Title: Aho-Corasick algorithm
    Part: 1/3
    # Aho-Corasick algorithm

    The Aho-Corasick algorithm allows us to quickly search for multiple patterns in a text.
    The set of pattern strings is also called a _dictionary_.
    We will denote the total length of its constituent strings by $m$ and the size of the alphabet by $k$.
    The algorithm constructs a finite state automaton based on a trie in $O(m k)$ time and then uses it to process the text.

    The algorithm was proposed by Alfred Aho and Margaret Corasick in 1975.

    ## Construction of the trie

    <center>
    <img src="https://upload.wikimedia.org/wikipedia/commons/e/e2/Trie.svg" width="400px">
    <br>
    <i>A trie based on words "Java", "Rad", "Rand", "Rau", "Raum" and "Rose".</i>
    <br>
    <i>The <a href="https://commons.wikimedia.org/wiki/File:Trie.svg">image</a> by [nd](https://de.wikipedia.org/wiki/Benutzer:Nd) is distributed under <a href="https://creativecommons.org/licenses/by-sa/3.0/deed.en">CC BY-SA 3.0</a> license.</i>
    </center>

    Formally, a trie is a rooted tree, where each edge of the tree is labeled with some letter
    and outgoing edges of a vertex have distinct labels.

    We will identify each vertex in the trie with the string formed by the labels on the path from the root to that vertex.

    Each vertex will also have a flag $\text{output}$ which will be set
    if the vertex corresponds to a pattern in the dictionary.

    Accordingly, a trie for a set of strings is a trie such that each $\text{output}$ vertex corresponds to one string from the set, and conversely, each string of the set corresponds to one $\text{output}$ vertex.

    We now describe how to construct a trie for a given set of strings in linear time with respect to their total length.

    We introduce a structure for the vertices of the tree:
    ```{.cpp file=aho_corasick_trie_definition}
    const int K = 26;

    struct Vertex {
        int next[K];
        bool output = false;

        Vertex() {
            fill(begin(next), end(next), -1);
        }
    };

    vector<Vertex> trie(1);
    ```

    Here, we store the trie as an array of $\text{Vertex}$.
    Each $\text{Vertex}$ contains the flag $\text{output}$ and the edges in the form of an array $\text{next}[]$, where $\text{next}[i]$ is the index of the vertex that we reach by following the character $i$, or $-1$ if there is no such edge.
    Initially, the trie consists of only one vertex - the root - with the index $0$.

    Now we implement a function that will add a string $s$ to the trie.
    The implementation is simple:
    we start at the root node, and as long as there are edges corresponding to the characters of $s$ we follow them.
    If there is no edge for one character, we generate a new vertex and connect it with an edge.
    At the end of the process we mark the last vertex with the flag $\text{output}$.

    ```{.cpp file=aho_corasick_trie_add}
    void add_string(string const& s) {
        int v = 0;
        for (char ch : s) {
            int c = ch - 'a';
            if (trie[v].next[c] == -1) {
                trie[v].next[c] = trie.size();
                trie.emplace_back();
            }
            v = trie[v].next[c];
        }
        trie[v].output = true;
    }
[/Textbook Reference Material]


[Textbook Reference Material]:
    Title: Balanced bracket sequences
    Part: 1/2
    # Balanced bracket sequences

    A **balanced bracket sequence** is a string consisting of only brackets, such that this sequence, when inserted certain numbers and mathematical operations, gives a valid mathematical expression.
    Formally you can define balanced bracket sequence with:

    - $e$ (the empty string) is a balanced bracket sequence.
    - if $s$ is a balanced bracket sequence, then so is $(s)$.
    - if $s$ and $t$ are balanced bracket sequences, then so is $s t$.

    For instance $(())()$ is a balanced bracket sequence, but $())($ is not.

    Of course you can define other bracket sequences also with multiple bracket types in a similar fashion.

    In this article we discuss some classic problems involving balanced bracket sequences (for simplicity we will only call them sequences): validation, number of sequences, finding the lexicographical next sequence, generating all sequences of a certain size, finding the index of sequence, and generating the $k$-th sequences.
    We will also discuss two variations for the problems, the simpler version when only one type of brackets is allowed, and the harder case when there are multiple types.

    ## Balance validation

    We want to check if a given string is balanced or not.

    At first suppose there is only one type of bracket.
    For this case there exists a very simple algorithm.
    Let $\text{depth}$ be the current number of open brackets.
    Initially $\text{depth} = 0$.
    We iterate over all character of the string, if the current bracket character is an opening bracket, then we increment $\text{depth}$, otherwise we decrement it.
    If at any time the variable $\text{depth}$ gets negative, or at the end it is different from $0$, then the string is not a balanced sequence.
    Otherwise it is.

    If there are several bracket types involved, then the algorithm needs to be changes.
    Instead of a counter $\text{depth}$ we create a stack, in which we will store all opening brackets that we meet.
    If the current bracket character is an opening one, we put it onto the stack.
    If it is a closing one, then we check if the stack is non-empty, and if the top element of the stack is of the same type as the current closing bracket.
    If both conditions are fulfilled, then we remove the opening bracket from the stack.
    If at any time one of the conditions is not fulfilled, or at the end the stack is not empty, then the string is not balanced.
    Otherwise it is.

    ## Number of balanced sequences

    ### Formula

    The number of balanced bracket sequences with only one bracket type can be calculated using the [Catalan numbers](catalan-numbers.md).
    The number of balanced bracket sequences of length $2n$ ($n$ pairs of brackets) is:

    $$\frac{1}{n+1} \binom{2n}{n}$$

    If we allow $k$ types of brackets, then each pair be of any of the $k$ types (independently of the others), thus the number of balanced bracket sequences is:

    $$\frac{1}{n+1} \binom{2n}{n} k^n$$

    ### Dynamic programming

    On the other hand these numbers can be computed using **dynamic programming**.
    Let $d[n]$ be the number of regular bracket sequences with $n$ pairs of bracket.
    Note that in the first position there is always an opening bracket.
    And somewhere later is the corresponding closing bracket of the pair.
    It is clear that inside this pair there is a balanced bracket sequence, and similarly after this pair there is a balanced bracket sequence.
    So to compute $d[n]$, we will look at how many balanced sequences of $i$ pairs of brackets are inside this first bracket pair, and how many balanced sequences with $n-1-i$ pairs are after this pair.
    Consequently the formula has the form:

    $$d[n] = \sum_{i=0}^{n-1} d[i] \cdot d[n-1-i]$$

    The initial value for this recurrence is $d[0] = 1$.

    ## Finding the lexicographical next balanced sequence

    Here we only consider the case with one valid bracket type.

    Given a balanced sequence, we have to find the next (in lexicographical order) balanced sequence.

    It should be obvious, that we have to find the rightmost opening bracket, which we can replace by a closing bracket without violation the condition, that there are more closing brackets than opening brackets up to this position.
    After replacing this position, we can fill the remaining part of the string with the lexicographically minimal one: i.e. first with as much opening brackets as possible, and then fill up the remaining positions with closing brackets.
    In other words we try to leave a long as possible prefix unchanged, and the suffix gets replaced by the lexicographically minimal one.

    To find this position, we can iterate over the character from right to left, and maintain the balance $\text{depth}$ of open and closing brackets.
    When we meet an opening brackets, we will decrement $\text{depth}$, and when we meet a closing bracket, we increase it.
    If we are at some point meet an opening bracket, and the balance after processing this symbol is positive, then we have found the rightmost position that we can change.
    We change the symbol, compute the number of opening and closing brackets that we have to add to the right side, and arrange them in the lexicographically minimal way.

    If we find do suitable position, then this sequence is already the maximal possible one, and there is no answer.

    ```{.cpp file=next_balanced_brackets_sequence}
    bool next_balanced_sequence(string & s) {
        int n = s.size();
        int depth = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (s[i] == '(')
                depth--;
            else
                depth++;

            if (s[i] == '(' && depth > 0) {
                depth--;
                int open = (n - i - 1 - depth) / 2;
                int close = n - i - 1 - open;
                string next = s.substr(0, i) + ')' + string(open, '(') + string(close, ')');
                s.swap(next);
                return true;
            }
        }
        return false;
    }
[/Textbook Reference Material]


[Textbook Reference Material]:
    Title: Finding repetitions
    Part: 1/2
    # Finding repetitions

    Given a string $s$ of length $n$.

    A **repetition** is two occurrences of a string in a row.
    In other words a repetition can be described by a pair of indices $i < j$ such that the substring $s[i \dots j]$ consists of two identical strings written after each other.

    The challenge is to **find all repetitions** in a given string $s$.
    Or a simplified task: find **any** repetition or find the **longest** repetition.

    The algorithm described here was published in 1982 by Main and Lorentz.

    ## Example

    Consider the repetitions in the following example string:

    $$acababaee$$

    The string contains the following three repetitions:

    - $s[2 \dots 5] = abab$
    - $s[3 \dots 6] = baba$
    - $s[7 \dots 7] = ee$

    Another example:

    $$abaaba$$

    Here there are only two repetitions

    - $s[0 \dots 5] = abaaba$
    - $s[2 \dots 3] = aa$

    ## Number of repetitions

    In general there can be up to $O(n^2)$ repetitions in a string of length $n$.
    An obvious example is a string consisting of $n$ times the same letter, in this case any substring of even length is a repetition.
    In general any periodic string with a short period will contain a lot of repetitions.

    On the other hand this fact does not prevent computing the number of repetitions in $O(n \log n)$ time, because the algorithm can give the repetitions in compressed form, in groups of several pieces at once.

    There is even the concept, that describes groups of periodic substrings with tuples of size four.
    It has been proven that we the number of such groups is at most linear with respect to the string length.

    Also, here are some more interesting results related to the number of repetitions:

      - The number of primitive repetitions (those whose halves are not repetitions) is at most $O(n \log n)$.
      - If we encode repetitions with tuples of numbers (called Crochemore triples) $(i,~ p,~ r)$ (where $i$ is the position of the beginning, $p$ the length of the repeating substring, and $r$ the number of repetitions), then all repetitions can be described with $O(n \log n)$ such triples.
      - Fibonacci strings, defined as 
    
        \[\begin{align}
        t_0 &= a, \\\\
        t_1 &= b, \\\\
        t_i &= t_{i-1} + t_{i-2},
        \end{align}\]
    
        are "strongly" periodic.
        The number of repetitions in the Fibonacci string $f_i$, even in the compressed with Crochemore triples, is $O(f_n \log f_n)$.
        The number of primitive repetitions is also $O(f_n \log f_n)$.

    ## Main-Lorentz algorithm

    The idea behind the Main-Lorentz algorithm is **divide-and-conquer**.

    It splits the initial string into halves, and computes the number of repetitions that lie completely in each halve by two recursive calls.
    Then comes the difficult part.
    The algorithm finds all repetitions starting in the first half and ending in the second half (which we will call **crossing repetitions**).
    This is the essential part of the Main-Lorentz algorithm, and we will discuss it in detail here.

    The complexity of divide-and-conquer algorithms is well researched.
    The [master theorem](https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms)) says, that we will end up with an $O(n \log n)$ algorithm, if we can compute the crossing repetitions in $O(n)$ time.

    ### Search for crossing repetitions

    So we want to find all such repetitions that start in the first half of the string, let's call it $u$, and end in the second half, let's call it $v$:

    $$s = u + v$$

    Their lengths are approximately equal to the length of $s$ divided by two.

    Consider an arbitrary repetition and look at the middle character (more precisely the first character of the second half of the repetition).
    I.e. if the repetition is a substring $s[i \dots j]$, then the middle character is $(i + j + 1) / 2$.

    We call a repetition **left** or **right** depending on which string this character is located - in the string $u$ or in the string $v$.
    In other words a string is called left, if the majority of it lies in $u$, otherwise we call it right.

    We will now discuss how to find **all left repetitions**.
    Finding all right repetitions can be done in the same way.

    Let us denote the length of the left repetition by $2l$ (i.e. each half of the repetition has length $l$).
    Consider the first character of the repetition falling into the string $v$ (it is at position $|u|$ in the string $s$).
    It coincides with the character $l$ positions before it, let's denote this position $cntr$.

    We will fixate this position $cntr$, and **look for all repetitions at this position** $cntr$.

    For example:

    $$c ~ \underset{cntr}{a} ~ c ~ | ~ a ~ d ~ a$$

    The vertical lines divides the two halves.
    Here we fixated the position $cntr = 1$, and at this position we find the repetition $caca$.

    It is clear, that if we fixate the position $cntr$, we simultaneously fixate the length of the possible repetitions: $l = |u| - cntr$.
    Once we know how to find these repetitions, we will iterate over all possible values for $cntr$ from $0$ to $|u|-1$, and find all left crossover repetitions of length $l = |u|,~ |u|-1,~ \dots, 1$.

    ### Criterion for left crossing repetitions

    Now, how can we find all such repetitions for a fixated $cntr$?
    Keep in mind that there still can be multiple such repetitions.

    Let's again look at a visualization, this time for the repetition $abcabc$:

    $$\overbrace{a}^{l_1} ~ \overbrace{\underset{cntr}{b} ~ c}^{l_2} ~ \overbrace{a}^{l_1} ~ | ~ \overbrace{b ~ c}^{l_2}$$

    Here we denoted the lengths of the two pieces of the repetition with $l_1$ and $l_2$:
    $l_1$ is the length of the repetition up to the position $cntr-1$, and $l_2$ is the length of the repetition from $cntr$ to the end of the half of the repetition.
    We have $2l = l_1 + l_2 + l_1 + l_2$ as the total length of the repetition.

    Let us generate **necessary and sufficient** conditions for such a repetition at position $cntr$ of length $2l = 2(l_1 + l_2) = 2(|u| - cntr)$:

    - Let $k_1$ be the largest number such that the first $k_1$ characters before the position $cntr$ coincide with the last $k_1$ characters in the string $u$:
  
    $$
    u[cntr - k_1 \dots cntr - 1] = u[|u| - k_1 \dots |u| - 1]
    $$
  
    - Let $k_2$ be the largest number such that the $k_2$ characters starting at position $cntr$ coincide with the first $k_2$ characters in the string $v$:

    $$  
      u[cntr \dots cntr + k_2 - 1] = v[0 \dots k_2 - 1]
    $$
  
    - Then we have a repetition exactly for any pair $(l_1,~ l_2)$ with

    $$
      \begin{align}
      l_1 &\le k_1, \\\\
      l_2 &\le k_2. \\\\
      \end{align}
    $$

    To summarize:

    - We fixate a specific position $cntr$.
    - All repetition which we will find now have length $2l = 2(|u| - cntr)$.
      There might be multiple such repetitions, they depend on the lengths $l_1$ and $l_2 = l - l_1$.
    - We find $k_1$ and $k_2$ as described above.
    - Then all suitable repetitions are the ones for which the lengths of the pieces $l_1$ and $l_2$ satisfy the conditions:

    $$
      \begin{align}
      l_1 + l_2 &= l = |u| - cntr \\\\
      l_1 &\le k_1, \\\\
      l_2 &\le k_2. \\\\
      \end{align}
    $$

    Therefore the only remaining part is how we can compute the values $k_1$ and $k_2$ quickly for every position $cntr$.
    Luckily we can compute them in $O(1)$ using the [Z-function](../string/z-function.md):

    - To can find the value $k_1$ for each position by calculating the Z-function for the string $\overline{u}$ (i.e. the reversed string $u$).
      Then the value $k_1$ for a particular $cntr$ will be equal to the corresponding value of the array of the Z-function.
    - To precompute all values $k_2$, we calculate the Z-function for the string $v + \# + u$ (i.e. the string $u$ concatenated with the separator character $\#$ and the string $v$).
      Again we just need to look up the corresponding value in the Z-function to get the $k_2$ value.

    So this is enough to find all left crossing repetitions.

    ### Right crossing repetitions

    For computing the right crossing repetitions we act similarly:
    we define the center $cntr$ as the character corresponding to the last character in the string $u$.
[/Textbook Reference Material]


INFO - [Task id] Mbpp/16 [generation text] 1. **Restatement of the Problem**: 
   We need to create a function that checks if a given string consists of sequences of lowercase letters that are separated by underscores. The function should return `True` if the string meets this condition and `False` otherwise.

2. **Conceptualizing a Solution**: 
   To solve this problem, we can iterate through each character of the string and check the following conditions:
   - The string should only contain lowercase letters and underscores.
   - There should not be consecutive underscores.
   - The string should not start or end with an underscore.
   If all these conditions are satisfied, we return `True`; otherwise, we return `False`.

3. **Pseudocode Solution**:
   ```
   function text_lowercase_underscore(s):
       if s is empty:
           return False
       if s starts with '_' or ends with '_':
           return False
       for each character in s:
           if character is not a lowercase letter and character is not '_':
               return False
           if character is '_' and the previous character is '_':
               return False
       return True
   ```

4. **Final Python 3 Solution**:
```python
def is_valid_char(c):
    return c.islower() or c == '_'

def text_lowercase_underscore(s: str) -> bool:
    if not s:  # Check if the string is empty
        return False
    if s[0] == '_' or s[-1] == '_':  # Check if it starts or ends with an underscore
        return False
    prev_char = ''
    for char in s:
        if not is_valid_char(char):  # Check for valid characters
            return False
        if char == '_' and prev_char == '_':  # Check for consecutive underscores
            return False
        prev_char = char
    return True
```
INFO - program_code:
 
def is_valid_char(c):
    return c.islower() or c == '_'

def text_lowercase_underscore(s: str) -> bool:
    if not s:  # Check if the string is empty
        return False
    if s[0] == '_' or s[-1] == '_':  # Check if it starts or ends with an underscore
        return False
    prev_char = ''
    for char in s:
        if not is_valid_char(char):  # Check for valid characters
            return False
        if char == '_' and prev_char == '_':  # Check for consecutive underscores
            return False
        prev_char = char
    return True


INFO - program_name:
 text_lowercase_underscore

INFO - dependencies:
 []

INFO - raw_msg:
 1. **Restatement of the Problem**: 
   We need to create a function that checks if a given string consists of sequences of lowercase letters that are separated by underscores. The function should return `True` if the string meets this condition and `False` otherwise.

2. **Conceptualizing a Solution**: 
   To solve this problem, we can iterate through each character of the string and check the following conditions:
   - The string should only contain lowercase letters and underscores.
   - There should not be consecutive underscores.
   - The string should not start or end with an underscore.
   If all these conditions are satisfied, we return `True`; otherwise, we return `False`.

3. **Pseudocode Solution**:
   ```
   function text_lowercase_underscore(s):
       if s is empty:
           return False
       if s starts with '_' or ends with '_':
           return False
       for each character in s:
           if character is not a lowercase letter and character is not '_':
               return False
           if character is '_' and the previous character is '_':
               return False
       return True
   ```

4. **Final Python 3 Solution**:
```python
def is_valid_char(c):
    return c.islower() or c == '_'

def text_lowercase_underscore(s: str) -> bool:
    if not s:  # Check if the string is empty
        return False
    if s[0] == '_' or s[-1] == '_':  # Check if it starts or ends with an underscore
        return False
    prev_char = ''
    for char in s:
        if not is_valid_char(char):  # Check for valid characters
            return False
        if char == '_' and prev_char == '_':  # Check for consecutive underscores
            return False
        prev_char = char
    return True
```

INFO - no_parent:
 True

INFO - full code to be executed: 
 
def is_valid_char(c):
    return c.islower() or c == '_'

def text_lowercase_underscore(s: str) -> bool:
    if not s:  # Check if the string is empty
        return False
    if s[0] == '_' or s[-1] == '_':  # Check if it starts or ends with an underscore
        return False
    prev_char = ''
    for char in s:
        if not is_valid_char(char):  # Check for valid characters
            return False
        if char == '_' and prev_char == '_':  # Check for consecutive underscores
            return False
        prev_char = char
    return True


INFO - obs: Note: Tests are automatically generated and can be wrong.

Tests passed:
assert text_lowercase_underscore("aab_cbbbc")==(True)

Tests failed:
None
reward: True
done: None
info: {'individual_results': (True,)}
INFO - acc:37/38 = 97.37%
