[
    {
        "role": "system",
        "content": "\nYou are an expert programmer tasked with solving the problem below.\n\nFollow the user's instructions to solve the problem.\nThe user can ask for analysis, code, or both.\n\n## Instructions\nWhen asked to output code,\n- Make sure to wrap your code in '```python' and '```' Markdown delimiters, \n- include exactly one block of code with the entire solution\n- No outside libraries are allowed. \n- Builtins are allowed.\n- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).\n- DO NOT write any assert statements / tests.\n\n## Problem\n[BEGIN PROBLEM]\nWrite a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.\n\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"\n\n[END PROBLEM]\n"
    },
    {
        "role": "user",
        "content": "\n## Instructions\n\nReason through the problem and:\n1. Restate the problem in plain English\n2. Conceptualize a solution first in plain English\n3. Write a pseudocode solution\n4. Output the final Python 3 solution with your solution steps in comments.\n\nMake sure to wrap your code in '```python' and '```' Markdown delimiters, \nand include exactly one block of code with the entire solution.\n\nNo outside libraries are allowed.\nBuiltins are allowed.\n"
    },
    {
        "role": "assistant",
        "content": "1. **Restate the problem in plain English:**\n   We need to find a path through a square matrix that starts at the top-left corner and ends at the bottom-right corner. The path can only move right or down. The goal is to calculate the maximum average cost of the cells visited along this path.\n\n2. **Conceptualize a solution first in plain English:**\n   To solve this problem, we can use dynamic programming. We will create a 2D list (or matrix) to store the maximum total cost and the number of cells visited to reach each cell in the matrix. Starting from the top-left corner, we will iterate through the matrix, updating our 2D list with the maximum costs and the corresponding number of cells for each possible path. Finally, we will calculate the average for the path that ends at the bottom-right corner and return that value.\n\n3. **Write a pseudocode solution:**\n   ```\n   function maxAverageOfPath(matrix):\n       get the size of the matrix N\n       create a 2D list dp to store tuples (total_cost, num_cells)\n       initialize dp[0][0] with (matrix[0][0], 1)\n       \n       for each cell in the matrix:\n           if moving down is possible:\n               update dp[i][j] with the maximum cost and number of cells\n           if moving right is possible:\n               update dp[i][j] with the maximum cost and number of cells\n       \n       get the total cost and number of cells from dp[N-1][N-1]\n       return total_cost / num_cells\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments:**\n```python\ndef maxAverageOfPath(matrix):\n    N = len(matrix)  # Get the size of the matrix\n    dp = [[(0, 0) for _ in range(N)] for _ in range(N)]  # Create a 2D list for (total_cost, num_cells)\n    \n    dp[0][0] = (matrix[0][0], 1)  # Initialize the starting point\n\n    # Fill the dp table\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue  # Skip the starting cell\n            current_cost = matrix[i][j]\n            max_cost, num_cells = 0, 0\n            \n            # Check from the top cell\n            if i > 0:\n                top_cost, top_cells = dp[i-1][j]\n                if top_cost > max_cost:\n                    max_cost, num_cells = top_cost, top_cells\n            \n            # Check from the left cell\n            if j > 0:\n                left_cost, left_cells = dp[i][j-1]\n                if left_cost > max_cost:\n                    max_cost, num_cells = left_cost, left_cells\n            \n            # Update the dp table with the maximum cost and number of cells\n            dp[i][j] = (max_cost + current_cost, num_cells + 1)\n\n    # Get the total cost and number of cells from the bottom-right corner\n    total_cost, num_cells = dp[N-1][N-1]\n    return total_cost / num_cells  # Return the average\n```"
    },
    {
        "role": "user",
        "content": "\nAlso, here are some of your memories.\nFeel free to use the given information to aid your problem solving process if necessary.\nDo not confuse the memories with the problem statement.\n\n## Memories\n\n[Textbook Reference Material]:\n    Chapter: Dynamic programming\n    Section: Paths in a grid\n    Part: 1/1\n    \\section{Paths in a grid}\n\n    Our next problem is to find a path\n    from the upper-left corner to\n    the lower-right corner\n    of an $n \\times n$ grid, such that\n    we only move down and right.\n    Each square contains a positive integer,\n    and the path should be constructed so\n    that the sum of the values along\n    the path is as large as possible.\n\n    The following picture shows an optimal\n    path in a grid:\n    \\begin{center}\n    \\begin{tikzpicture}[scale=.65]\n      \\begin{scope}\n        \\fill [color=lightgray] (0, 9) rectangle (1, 8);\n        \\fill [color=lightgray] (0, 8) rectangle (1, 7);\n        \\fill [color=lightgray] (1, 8) rectangle (2, 7);\n        \\fill [color=lightgray] (1, 7) rectangle (2, 6);\n        \\fill [color=lightgray] (2, 7) rectangle (3, 6);\n        \\fill [color=lightgray] (3, 7) rectangle (4, 6);\n        \\fill [color=lightgray] (4, 7) rectangle (5, 6);\n        \\fill [color=lightgray] (4, 6) rectangle (5, 5);\n        \\fill [color=lightgray] (4, 5) rectangle (5, 4);\n        \\draw (0, 4) grid (5, 9);\n        \\node at (0.5,8.5) {3};\n        \\node at (1.5,8.5) {7};\n        \\node at (2.5,8.5) {9};\n        \\node at (3.5,8.5) {2};\n        \\node at (4.5,8.5) {7};\n        \\node at (0.5,7.5) {9};\n        \\node at (1.5,7.5) {8};\n        \\node at (2.5,7.5) {3};\n        \\node at (3.5,7.5) {5};\n        \\node at (4.5,7.5) {5};\n        \\node at (0.5,6.5) {1};\n        \\node at (1.5,6.5) {7};\n        \\node at (2.5,6.5) {9};\n        \\node at (3.5,6.5) {8};\n        \\node at (4.5,6.5) {5};\n        \\node at (0.5,5.5) {3};\n        \\node at (1.5,5.5) {8};\n        \\node at (2.5,5.5) {6};\n        \\node at (3.5,5.5) {4};\n        \\node at (4.5,5.5) {10};\n        \\node at (0.5,4.5) {6};\n        \\node at (1.5,4.5) {3};\n        \\node at (2.5,4.5) {9};\n        \\node at (3.5,4.5) {7};\n        \\node at (4.5,4.5) {8};\n      \\end{scope}\n    \\end{tikzpicture}\n    \\end{center}\n    The sum of the values on the path is 67,\n    and this is the largest possible sum on a path\n    from the\n    upper-left corner to the lower-right corner.\n\n    Assume that the rows and columns of the\n    grid are numbered from 1 to $n$,\n    and $\\texttt{value}[y][x]$ equals the value\n    of square $(y,x)$.\n    Let $\\texttt{sum}(y,x)$ denote the maximum\n    sum on a path from the upper-left corner\n    to square $(y,x)$.\n    Now $\\texttt{sum}(n,n)$ tells us\n    the maximum sum\n    from the upper-left corner to\n    the lower-right corner.\n    For example, in the above grid,\n    $\\texttt{sum}(5,5)=67$.\n\n    We can recursively calculate the sums\n    as follows:\n    \\[ \\texttt{sum}(y,x) = \\max(\\texttt{sum}(y,x-1),\\texttt{sum}(y-1,x))+\\texttt{value}[y][x]\\]\n\n\n    The recursive formula is based on the observation\n    that a path that ends at square $(y,x)$\n    can come either from square $(y,x-1)$\n    or square $(y-1,x)$:\n    \\begin{center}\n    \\begin{tikzpicture}[scale=.65]\n      \\begin{scope}\n        \\fill [color=lightgray] (3, 7) rectangle (4, 6);\n        \\draw (0, 4) grid (5, 9);\n    \n        \\node at (2.5,6.5) {$\\rightarrow$};\n        \\node at (3.5,7.5) {$\\downarrow$};\n    \n      \\end{scope}\n    \\end{tikzpicture}\n    \\end{center}\n\n    Thus, we select the direction that maximizes\n    the sum.\n    We assume that $\\texttt{sum}(y,x)=0$\n    if $y=0$ or $x=0$ (because no such paths exist),\n    so the recursive formula also works when $y=1$ or $x=1$.\n\n    Since the function \\texttt{sum} has two parameters,\n    the dynamic programming array also has two dimensions.\n    For example, we can use an array\n    \\begin{lstlisting}\n    int sum[N][N];\n    \\end{lstlisting}\n    and calculate the sums as follows:\n    \\begin{lstlisting}\n    for (int y = 1; y <= n; y++) {\n        for (int x = 1; x <= n; x++) {\n            sum[y][x] = max(sum[y][x-1],sum[y-1][x])+value[y][x];\n        }\n    }\n    \\end{lstlisting}\n    The time complexity of the algorithm is $O(n^2)$.\n[/Textbook Reference Material]\n\n\n[Textbook Reference Material]:\n    Title: Dynamic Programming on Broken Profile. Problem \"Parquet\"\n    Part: 1/1\n    # Dynamic Programming on Broken Profile. Problem \"Parquet\"\n\n    Common problems solved using DP on broken profile include:\n\n    - finding number of ways to fully fill an area (e.g. chessboard/grid) with some figures (e.g. dominoes)\n    - finding a way to fill an area with minimum number of figures\n    - finding a partial fill with minimum number of unfilled space (or cells, in case of grid)\n    - finding a partial fill with the minimum number of figures, such that no more figures can be added\n\n    ## Problem \"Parquet\"\n\n    **Problem description.** Given a grid of size $N \\times M$. Find number of ways to fill the grid with figures of size $2 \\times 1$ (no cell should be left unfilled, and figures should not overlap each other).\n\n    Let the DP state be: $dp[i, mask]$, where $i = 1, \\ldots N$ and $mask = 0, \\ldots 2^M - 1$.\n\n    $i$ represents number of rows in the current grid, and $mask$ is the state of last row of current grid. If $j$-th bit of $mask$ is $0$ then the corresponding cell is filled, otherwise it is unfilled.\n\n    Clearly, the answer to the problem will be $dp[N, 0]$.\n\n    We will be building the DP state by iterating over each $i = 1, \\cdots N$ and each $mask = 0, \\ldots 2^M - 1$, and for each $mask$ we will be only transitioning forward, that is, we will be _adding_ figures to the current grid.\n\n    ### Implementation\n\n    ```cpp\n    int n, m;\n    vector < vector<long long> > dp;\n\n\n    void calc (int x = 0, int y = 0, int mask = 0, int next_mask = 0)\n    {\n    \tif (x == n)\n    \t\treturn;\n    \tif (y >= m)\n    \t\tdp[x+1][next_mask] += dp[x][mask];\n    \telse\n    \t{\n    \t\tint my_mask = 1 << y;\n    \t\tif (mask & my_mask)\n    \t\t\tcalc (x, y+1, mask, next_mask);\n    \t\telse\n    \t\t{\n    \t\t\tcalc (x, y+1, mask, next_mask | my_mask);\n    \t\t\tif (y+1 < m && ! (mask & my_mask) && ! (mask & (my_mask << 1)))\n    \t\t\t\tcalc (x, y+2, mask, next_mask);\n    \t\t}\n    \t}\n    }\n\n\n    int main()\n    {\n    \tcin >> n >> m;\n\n    \tdp.resize (n+1, vector<long long> (1<<m));\n    \tdp[0][0] = 1;\n    \tfor (int x=0; x<n; ++x)\n    \t\tfor (int mask=0; mask<(1<<m); ++mask)\n    \t\t\tcalc (x, 0, mask, 0);\n\n    \tcout << dp[n][0];\n\n    }\n    ```\n[/Textbook Reference Material]\n\n\n[Textbook Reference Material]:\n    Title: Finding the largest zero submatrix\n    Part: 1/1\n    # Finding the largest zero submatrix\n\n    You are given a matrix with `n` rows and `m` columns. Find the largest submatrix consisting of only zeros (a submatrix is a rectangular area of the matrix).\n\n    ## Algorithm\n\n    Elements of the matrix will be `a[i][j]`, where `i = 0...n - 1`, `j = 0... m - 1`. For simplicity, we will consider all non-zero elements equal to 1.\n\n    ### Step 1: Auxiliary dynamic\n\n    First, we calculate the following auxiliary matrix: `d[i][j]`, nearest row that has a 1 above `a[i][j]`. Formally speaking, `d[i][j]` is the largest row number (from `0` to `i - 1`), in which there is a element equal to `1` in the `j`-th column. \n    While iterating from top-left to bottom-right, when we stand in row `i`, we know the values from the previous row, so, it is enough to update just the elements with value `1`. We can save the values in a simple array `d[i]`, `i = 1...m - 1`, because in the further algorithm we will process the matrix one row at a time and only need the values of the current row.\n\n    ```cpp\n    vector<int> d(m, -1);\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < m; ++j) {\n            if (a[i][j] == 1) {\n                d[j] = i;\n            }\n        }\n    }\n    ```\n\n    ### Step 2: Problem solving\n\n    We can solve the problem in $O(n m^2)$ iterating through rows, considering every possible left and right columns for a submatrix. The bottom of the rectangle will be the current row, and using `d[i][j]` we can find the top row. However, it is possible to go further and significantly improve the complexity of the solution.\n\n    It is clear that the desired zero submatrix is bounded on all four sides by some ones, which prevent it from increasing in size and improving the answer. Therefore,  we will not miss the answer if we act as follows: for every cell `j` in row `i` (the bottom row of a potential zero submatrix) we will have `d[i][j]` as the top row of the current zero submatrix. It now remains to determine the optimal left and right boundaries of the zero submatrix, i.e. maximally push this submatrix to the left and right of the `j`-th column. \n\n    What does it mean to push the maximum to the left? It means to find an index `k1` for which `d[i][k1] > d[i][j]`, and at the same time `k1` - the closest one to the left of the index `j`. It is clear that then `k1 + 1` gives the number of the left column of the required zero submatrix. If there is no such index at all, then put `k1` = `-1`(this means that we were able to extend the current zero submatrix to the left all the way to the border of matrix `a`).\n\n    Symmetrically, you can define an index `k2` for the right border: this is the closest index to the right of `j` such that `d[i][k2] > d[i][j]` (or `m`, if there is no such index).\n\n    So, the indices `k1` and `k2`, if we learn to search for them effectively, will give us all the necessary information about the current zero submatrix. In particular, its area will be equal to `(i - d[i][j]) * (k2 - k1 - 1)`.\n\n    How to look for these indexes `k1` and `k2` effectively with fixed `i` and `j`? We can do that in $O(1)$ on average.\n\n    To achieve such complexity, you can use the stack as follows. Let's first learn how to search for an index `k1`, and save its value for each index `j` within the current row `i` in matrix `d1[i][j]`. To do this, we will look through all the columns `j` from left to right, and we will store in the stack only those columns that have `d[][]` strictly greater than `d[i][j]`. It is clear that when moving from a column `j` to the next column, it is necessary to update the content of the stack. When there is an inappropriate element at the top of the stack (i.e. `d[][] <= d[i][j]`) pop it. It is easy to understand that it is enough to remove from the stack only from its top, and from none of its other places (because the stack will contain an increasing `d` sequence of columns).\n\n    The value `d1[i][j]` for each `j` will be equal to the value lying at that moment on top of the stack.\n\n    The dynamics `d2[i][j]` for finding the indices `k2` is considered similar, only you need to view the columns from right to left.\n\n    It is clear that since there are exactly `m` pieces added to the stack on each line, there could not be more deletions either, the sum of complexities will be linear, so the final complexity of the algorithm is $O(nm)$.\n\n    It should also be noted that this algorithm consumes $O(m)$ memory (not counting the input data - the matrix `a[][]`).\n\n    ### Implementation\n\n    ```cpp\n    int zero_matrix(vector<vector<int>> a) {\n        int n = a.size();\n        int m = a[0].size();\n\n        int ans = 0;\n        vector<int> d(m, -1), d1(m), d2(m);\n        stack<int> st;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                if (a[i][j] == 1)\n                    d[j] = i;\n            }\n\n            for (int j = 0; j < m; ++j) {\n                while (!st.empty() && d[st.top()] <= d[j])\n                    st.pop();\n                d1[j] = st.empty() ? -1 : st.top();\n                st.push(j);\n            }\n            while (!st.empty())\n                st.pop();\n\n            for (int j = m - 1; j >= 0; --j) {\n                while (!st.empty() && d[st.top()] <= d[j])\n                    st.pop();\n                d2[j] = st.empty() ? m : st.top();\n                st.push(j);\n            }\n            while (!st.empty())\n                st.pop();\n\n            for (int j = 0; j < m; ++j)\n                ans = max(ans, (i - d[j]) * (d2[j] - d1[j] - 1));\n        }\n        return ans;\n    }\n    ```\n[/Textbook Reference Material]\n\n"
    },
    {
        "role": "assistant",
        "content": "1. **Restate the problem in plain English**: \n   We need to find a path in a square matrix that starts from the top-left corner and ends at the bottom-right corner. The path can only move right or down. Each cell in the matrix has a cost associated with it, and we want to find the path that gives the maximum average cost. The average is calculated by dividing the total cost of the path by the number of cells in that path.\n\n2. **Conceptualize a solution first in plain English**: \n   To solve this problem, we can use dynamic programming. We will create a 2D array to store the maximum sum of costs to reach each cell in the matrix. We will iterate through the matrix, and for each cell, we will calculate the maximum sum of costs by considering the cells above and to the left. Once we have the maximum sum to reach the bottom-right corner, we can calculate the average by dividing this sum by the total number of cells in the path.\n\n3. **Write a pseudocode solution**:\n   ```\n   function maxAverageOfPath(matrix):\n       n = length of matrix\n       create a 2D array dp of size n x n initialized to 0\n       \n       dp[0][0] = matrix[0][0]  // starting point\n       \n       // Fill the first row\n       for j from 1 to n-1:\n           dp[0][j] = dp[0][j-1] + matrix[0][j]\n       \n       // Fill the first column\n       for i from 1 to n-1:\n           dp[i][0] = dp[i-1][0] + matrix[i][0]\n       \n       // Fill the rest of the dp array\n       for i from 1 to n-1:\n           for j from 1 to n-1:\n               dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n       \n       max_sum = dp[n-1][n-1]\n       number_of_cells = n + n - 1  // total cells in the path\n       return max_sum / number_of_cells\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef maxAverageOfPath(matrix):\n    n = len(matrix)  # Get the size of the matrix\n    dp = [[0] * n for _ in range(n)]  # Create a 2D array for dynamic programming\n\n    dp[0][0] = matrix[0][0]  # Starting point\n\n    # Fill the first row\n    for j in range(1, n):\n        dp[0][j] = dp[0][j - 1] + matrix[0][j]\n\n    # Fill the first column\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + matrix[i][0]\n\n    # Fill the rest of the dp array\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j]\n\n    max_sum = dp[n - 1][n - 1]  # Maximum sum to reach the bottom-right corner\n    number_of_cells = n + n - 1  # Total cells in the path\n    return max_sum / number_of_cells  # Return the maximum average\n```"
    },
    {
        "role": "user",
        "content": "\n[Environment Feedback]:\n    Note: Tests are automatically generated and can be wrong.\n\n    Tests passed:\n    assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\n    Tests failed:\n    None\n[/Environment Feedback]\n"
    }
]