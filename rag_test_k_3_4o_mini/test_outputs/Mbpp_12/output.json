{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\nTests failed:\nNone",
    "code": "\ndef sort_matrix(matrix):\n    # Create a list of tuples where each tuple contains the sum of the row and the row itself\n    row_sums = [(sum(row), row) for row in matrix]\n    \n    # Sort the list of tuples based on the first element (the sum of the row)\n    row_sums.sort(key=lambda x: x[0])\n    \n    # Extract the sorted rows from the sorted list of tuples\n    sorted_matrix = [row for _, row in row_sums]\n    \n    # Return the sorted matrix\n    return sorted_matrix\n",
    "full_code": "\ndef sort_matrix(matrix):\n    # Create a list of tuples where each tuple contains the sum of the row and the row itself\n    row_sums = [(sum(row), row) for row in matrix]\n    \n    # Sort the list of tuples based on the first element (the sum of the row)\n    row_sums.sort(key=lambda x: x[0])\n    \n    # Extract the sorted rows from the sorted list of tuples\n    sorted_matrix = [row for _, row in row_sums]\n    \n    # Return the sorted matrix\n    return sorted_matrix\n",
    "reward": true,
    "program_code": "\ndef sort_matrix(matrix):\n    # Create a list of tuples where each tuple contains the sum of the row and the row itself\n    row_sums = [(sum(row), row) for row in matrix]\n    \n    # Sort the list of tuples based on the first element (the sum of the row)\n    row_sums.sort(key=lambda x: x[0])\n    \n    # Extract the sorted rows from the sorted list of tuples\n    sorted_matrix = [row for _, row in row_sums]\n    \n    # Return the sorted matrix\n    return sorted_matrix\n",
    "program_name": "sort_matrix",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   The task is to create a function that takes a matrix (a list of lists) as input and sorts the rows of this matrix based on the sum of the elements in each row. The rows should be arranged in ascending order according to these sums.\n\n2. **Conceptualize a solution first in plain English**: \n   To solve this problem, we need to:\n   - Calculate the sum of each row in the matrix.\n   - Pair each row with its corresponding sum.\n   - Sort these pairs based on the sums.\n   - Extract the sorted rows from the sorted pairs to form the final sorted matrix.\n\n3. **Write a pseudocode solution**:\n   ```\n   function sort_matrix(matrix):\n       create a list of tuples (sum_of_row, row) for each row in matrix\n       sort the list of tuples based on the sum_of_row\n       extract the sorted rows from the sorted list of tuples\n       return the list of sorted rows\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef sort_matrix(matrix):\n    # Create a list of tuples where each tuple contains the sum of the row and the row itself\n    row_sums = [(sum(row), row) for row in matrix]\n    \n    # Sort the list of tuples based on the first element (the sum of the row)\n    row_sums.sort(key=lambda x: x[0])\n    \n    # Extract the sorted rows from the sorted list of tuples\n    sorted_matrix = [row for _, row in row_sums]\n    \n    # Return the sorted matrix\n    return sorted_matrix\n```",
    "no_parent": true,
    "dependency_used": false
}