{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert big_diff([1,2,3,4]) == 3\n\nTests failed:\nNone",
    "code": "\ndef big_diff(numbers):\n    # Check if the list is empty\n    if not numbers:\n        return 0  # Return 0 for an empty list (though not specified, it's a safe guard)\n    \n    # Initialize max_value and min_value with the first element of the list\n    max_value = numbers[0]\n    min_value = numbers[0]\n    \n    # Iterate through the list to find the maximum and minimum values\n    for number in numbers:\n        if number > max_value:\n            max_value = number  # Update max_value if current number is greater\n        if number < min_value:\n            min_value = number  # Update min_value if current number is smaller\n    \n    # Calculate the difference between max and min values\n    return max_value - min_value  # Return the difference\n\n",
    "full_code": "\ndef big_diff(numbers):\n    # Check if the list is empty\n    if not numbers:\n        return 0  # Return 0 for an empty list (though not specified, it's a safe guard)\n    \n    # Initialize max_value and min_value with the first element of the list\n    max_value = numbers[0]\n    min_value = numbers[0]\n    \n    # Iterate through the list to find the maximum and minimum values\n    for number in numbers:\n        if number > max_value:\n            max_value = number  # Update max_value if current number is greater\n        if number < min_value:\n            min_value = number  # Update min_value if current number is smaller\n    \n    # Calculate the difference between max and min values\n    return max_value - min_value  # Return the difference\n\n",
    "reward": true,
    "program_code": "\ndef big_diff(numbers):\n    # Check if the list is empty\n    if not numbers:\n        return 0  # Return 0 for an empty list (though not specified, it's a safe guard)\n    \n    # Initialize max_value and min_value with the first element of the list\n    max_value = numbers[0]\n    min_value = numbers[0]\n    \n    # Iterate through the list to find the maximum and minimum values\n    for number in numbers:\n        if number > max_value:\n            max_value = number  # Update max_value if current number is greater\n        if number < min_value:\n            min_value = number  # Update min_value if current number is smaller\n    \n    # Calculate the difference between max and min values\n    return max_value - min_value  # Return the difference\n\n",
    "program_name": "big_diff",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: The task is to create a function that takes a list of numbers and calculates the difference between the largest and smallest numbers in that list.\n\n2. **Conceptualize a solution first in plain English**: To solve this problem, we need to find the maximum and minimum values in the list. Once we have these two values, we can simply subtract the minimum from the maximum to get the desired difference.\n\n3. **Write a pseudocode solution**:\n   ```\n   function big_diff(numbers):\n       if numbers is empty:\n           return 0\n       max_value = find maximum in numbers\n       min_value = find minimum in numbers\n       return max_value - min_value\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef big_diff(numbers):\n    # Check if the list is empty\n    if not numbers:\n        return 0  # Return 0 for an empty list (though not specified, it's a safe guard)\n    \n    # Initialize max_value and min_value with the first element of the list\n    max_value = numbers[0]\n    min_value = numbers[0]\n    \n    # Iterate through the list to find the maximum and minimum values\n    for number in numbers:\n        if number > max_value:\n            max_value = number  # Update max_value if current number is greater\n        if number < min_value:\n            min_value = number  # Update min_value if current number is smaller\n    \n    # Calculate the difference between max and min values\n    return max_value - min_value  # Return the difference\n\n```",
    "no_parent": true,
    "dependency_used": false
}