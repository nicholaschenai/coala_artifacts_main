{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\nTests failed:\nNone",
    "code": "\ndef list_split(input_list, n):\n    # Create an empty list to hold the resulting sublists\n    result = []\n    \n    # Iterate through each element in the input list\n    for i in range(len(input_list)):\n        # Determine which sublist to place the current element in\n        index = i % n\n        \n        # If the index is greater than or equal to the length of result,\n        # append a new empty sublist to result\n        if index >= len(result):\n            result.append([])\n        \n        # Append the current element to the appropriate sublist\n        result[index].append(input_list[i])\n    \n    # Return the list of sublists\n    return result\n",
    "full_code": "\ndef list_split(input_list, n):\n    # Create an empty list to hold the resulting sublists\n    result = []\n    \n    # Iterate through each element in the input list\n    for i in range(len(input_list)):\n        # Determine which sublist to place the current element in\n        index = i % n\n        \n        # If the index is greater than or equal to the length of result,\n        # append a new empty sublist to result\n        if index >= len(result):\n            result.append([])\n        \n        # Append the current element to the appropriate sublist\n        result[index].append(input_list[i])\n    \n    # Return the list of sublists\n    return result\n",
    "reward": true,
    "program_code": "\ndef list_split(input_list, n):\n    # Create an empty list to hold the resulting sublists\n    result = []\n    \n    # Iterate through each element in the input list\n    for i in range(len(input_list)):\n        # Determine which sublist to place the current element in\n        index = i % n\n        \n        # If the index is greater than or equal to the length of result,\n        # append a new empty sublist to result\n        if index >= len(result):\n            result.append([])\n        \n        # Append the current element to the appropriate sublist\n        result[index].append(input_list[i])\n    \n    # Return the list of sublists\n    return result\n",
    "program_name": "list_split",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   The task is to create a function that takes a list and an integer `n`, and splits the list into sublists where each sublist contains every `n`-th element from the original list. The function should return a list of these sublists.\n\n2. **Conceptualize a solution first in plain English**: \n   To solve this problem, we can iterate through the original list and collect elements into separate sublists based on their index. For every index `i`, we can determine which sublist it belongs to by calculating `i % n`. This way, elements that are spaced `n` apart will be grouped together in the same sublist.\n\n3. **Write a pseudocode solution**:\n   ```\n   function list_split(input_list, n):\n       create an empty list called result\n       for i from 0 to length of input_list - 1:\n           determine the index of the sublist as i % n\n           if the index is greater than or equal to the length of result:\n               append an empty list to result\n           append input_list[i] to result[index]\n       return result\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef list_split(input_list, n):\n    # Create an empty list to hold the resulting sublists\n    result = []\n    \n    # Iterate through each element in the input list\n    for i in range(len(input_list)):\n        # Determine which sublist to place the current element in\n        index = i % n\n        \n        # If the index is greater than or equal to the length of result,\n        # append a new empty sublist to result\n        if index >= len(result):\n            result.append([])\n        \n        # Append the current element to the appropriate sublist\n        result[index].append(input_list[i])\n    \n    # Return the list of sublists\n    return result\n```",
    "no_parent": true,
    "dependency_used": false
}