INFO - [test iter]: 306/378

INFO - The task prompt is Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a function to find tuples which have all elements divisible b...

INFO - Attempting task_id Mbpp/75
INFO - LM call n parse attempt 1 / 3

INFO - [Task id] Mbpp/75 [prompt] 
You are an expert programmer tasked with solving the problem below.

Follow the user's instructions to solve the problem.
The user can ask for analysis, code, or both.

## Instructions
When asked to output code,
- Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
- include exactly one block of code with the entire solution
- No outside libraries are allowed. 
- Builtins are allowed.
- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).
- DO NOT write any assert statements / tests.

## Problem
[BEGIN PROBLEM]
Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a function to find tuples which have all elements divisible by k from the given list of tuples.
assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]
"""

[END PROBLEM]

INFO - [Task id] Mbpp/75 [prompt] 
## Instructions

Reason through the problem and:
1. Restate the problem in plain English
2. Conceptualize a solution first in plain English
3. Write a pseudocode solution
4. Output the final Python 3 solution with your solution steps in comments.

Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
and include exactly one block of code with the entire solution.

No outside libraries are allowed.
Builtins are allowed.

INFO - [Task id] Mbpp/75 [generation text] 1. **Restate the problem in plain English**: 
   We need to create a function that takes a list of tuples and an integer `k`. The function should return a new list containing only those tuples where every element in the tuple is divisible by `k`.

2. **Conceptualize a solution first in plain English**: 
   To solve this problem, we will iterate through each tuple in the list. For each tuple, we will check if all its elements are divisible by `k`. If they are, we will add that tuple to a new list. Finally, we will return the new list containing only the tuples that meet the criteria.

3. **Write a pseudocode solution**:
   ```
   function find_tuples(tuples_list, k):
       create an empty list called result
       for each tuple in tuples_list:
           set a flag called all_divisible to True
           for each element in the tuple:
               if element is not divisible by k:
                   set all_divisible to False
                   break out of the loop
           if all_divisible is True:
               add the tuple to result
       return result
   ```

4. **Output the final Python 3 solution with your solution steps in comments**:
```python
def find_tuples(tuples_list, k):
    # Create an empty list to store the result
    result = []
    
    # Iterate through each tuple in the provided list
    for tup in tuples_list:
        # Assume all elements are divisible by k
        all_divisible = True
        
        # Check each element in the tuple
        for element in tup:
            # If any element is not divisible by k, set the flag to False
            if element % k != 0:
                all_divisible = False
                break  # No need to check further elements
        
        # If all elements were divisible, add the tuple to the result list
        if all_divisible:
            result.append(tup)
    
    # Return the list of tuples that meet the criteria
    return result
```
INFO - [35m Rollout attempt 1/4[0m
INFO - [33m Retrieving 3 entries for db: semantic 
 [0m
INFO - Retrieved (score=0.5303):
Title: Josephus Problem
Part: 1/1
# Josephus Problem

## Statement

We are given the natural numbers $n$ and $k$.
All natural numbers from $1$ to $n$ are written in a circle. 
First, count the $k$-th number starting from the first one and delete it.
Then $k$ numbers are counted starting from the ...


INFO - Retrieved (score=0.5437):
Title: The Inclusion-Exclusion Principle
Part: 3/5
```

Asymptotics of the solution is $O (\sqrt{n})$.

### The number of integers in a given interval which are multiple of at least one of the given numbers

Given $n$ numbers $a_i$ and number $r$. You want to count the number of integers in the i...


INFO - Retrieved (score=0.5539):
Title: Generating all $K$-combinations
Part: 1/1
# Generating all $K$-combinations

In this article we will discuss the problem of generating all $K$-combinations.
Given the natural numbers $N$ and $K$, and considering a set of numbers from $1$ to $N$.
The task is to derive all **subsets of size ...


INFO - Retrieved (score=0.5303): 
[Textbook Reference Material]:
    Title: Josephus Problem
    Part: 1/1
    # Josephus Problem

    ## Statement

    We are given the natural numbers $n$ and $k$.
    All natural numbers from $1$ to $n$ are written in a circle. 
    First, count the $k$-th number starting from the first one an...
INFO - Retrieved (score=0.5437): 
[Textbook Reference Material]:
    Title: The Inclusion-Exclusion Principle
    Part: 3/5
    ```

    Asymptotics of the solution is $O (\sqrt{n})$.

    ### The number of integers in a given interval which are multiple of at least one of the given numbers

    Given $n$ numbers $a_i$ and numbe...
INFO - Retrieved (score=0.5539): 
[Textbook Reference Material]:
    Title: Generating all $K$-combinations
    Part: 1/1
    # Generating all $K$-combinations

    In this article we will discuss the problem of generating all $K$-combinations.
    Given the natural numbers $N$ and $K$, and considering a set of numbers from $1$ ...
INFO - LM call n parse attempt 1 / 3

INFO - [Task id] Mbpp/75 [prompt] 
You are an expert programmer tasked with solving the problem below.

Follow the user's instructions to solve the problem.
The user can ask for analysis, code, or both.

## Instructions
When asked to output code,
- Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
- include exactly one block of code with the entire solution
- No outside libraries are allowed. 
- Builtins are allowed.
- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).
- DO NOT write any assert statements / tests.

## Problem
[BEGIN PROBLEM]
Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a function to find tuples which have all elements divisible by k from the given list of tuples.
assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]
"""

[END PROBLEM]

INFO - [Task id] Mbpp/75 [prompt] 
## Instructions

Reason through the problem and:
1. Restate the problem in plain English
2. Conceptualize a solution first in plain English
3. Write a pseudocode solution
4. Output the final Python 3 solution with your solution steps in comments.

Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
and include exactly one block of code with the entire solution.

No outside libraries are allowed.
Builtins are allowed.

INFO - [Task id] Mbpp/75 [prompt] 
Also, here are some of your memories.
Feel free to use the given information to aid your problem solving process if necessary.
Do not confuse the memories with the problem statement.

## Memories

[Textbook Reference Material]:
    Title: Josephus Problem
    Part: 1/1
    # Josephus Problem

    ## Statement

    We are given the natural numbers $n$ and $k$.
    All natural numbers from $1$ to $n$ are written in a circle. 
    First, count the $k$-th number starting from the first one and delete it.
    Then $k$ numbers are counted starting from the next one and the $k$-th one is removed again, and so on.
    The process stops when one number remains.
    It is required to find the last number.

    This task was set by **Flavius Josephus** in the 1st century (though in a somewhat narrower formulation: for $k = 2$).

    This problem can be solved by modeling the procedure.
    Brute force modeling will work $O(n^{2})$. Using a [Segment Tree](/data_structures/segment_tree.html), we can improve it to $O(n \log n)$.
    We want something better though.

    ## Modeling a $O(n)$ solution

    We will try to find a pattern expressing the answer for the problem $J_{n, k}$ through the solution of the previous problems.

    Using brute force modeling we can construct a table of values, for example, the following:

    $$\begin{array}{ccccccccccc}
    n\setminus k & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 \\
    1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 \\
    2 & 2 & 1 & 2 & 1 & 2 & 1 & 2 & 1 & 2 & 1 \\
    3 & 3 & 3 & 2 & 2 & 1 & 1 & 3 & 3 & 2 & 2 \\
    4 & 4 & 1 & 1 & 2 & 2 & 3 & 2 & 3 & 3 & 4 \\
    5 & 5 & 3 & 4 & 1 & 2 & 4 & 4 & 1 & 2 & 4 \\
    6 & 6 & 5 & 1 & 5 & 1 & 4 & 5 & 3 & 5 & 2 \\
    7 & 7 & 7 & 4 & 2 & 6 & 3 & 5 & 4 & 7 & 5 \\
    8 & 8 & 1 & 7 & 6 & 3 & 1 & 4 & 4 & 8 & 7 \\
    9 & 9 & 3 & 1 & 1 & 8 & 7 & 2 & 3 & 8 & 8 \\
    10 & 10 & 5 & 4 & 5 & 3 & 3 & 9 & 1 & 7 & 8 \\
    \end{array}$$

    And here we can clearly see the following **pattern**:

    $$J_{n,k} = \left( (J_{n-1,k} + k - 1) \bmod n \right) + 1$$

    $$J_{1,k} = 1$$

    Here, 1-indexing makes for a somewhat messy formula; if you instead number the positions from 0, you get a very elegant formula:

    $$J_{n,k} = (J_{n-1,k} + k) \bmod n$$

    So, we found a solution to the problem of Josephus, working in $O(n)$ operations.

    ## Implementation

    Simple **recursive implementation** (in 1-indexing)

    ```{.cpp file=josephus_rec}
    int josephus(int n, int k) {
        return n > 1 ? (josephus(n-1, k) + k - 1) % n + 1 : 1;
    }
    ```

    **Non-recursive form** :

    ```{.cpp file=josephus_iter}
    int josephus(int n, int k) {
        int res = 0;
        for (int i = 1; i <= n; ++i)
      	  res = (res + k) % i;
        return res + 1;
    }
    ```

    This formula can also be found analytically.
    Again here we assume 0-indexing.
    After we delete the first number, we have $n-1$ numbers left.
    When we repeat the procedure, we will start with the number that had originally the index $k \bmod n$.
    $J_{n-1, k}$ would be the answer for the remaining circle, if we start counting at $0$, but because we actually start with $k$ we have $J_{n, k} = (J_{n-1,k} + k) \ \bmod n$.

    ## Modeling a $O(k \log n)$ solution

    For relatively small $k$ we can come up with a better solution than the above recursive solution in $O(n)$.
    If $k$ is a lot smaller than $n$, then we can delete multiple numbers ($\lfloor \frac{n}{k} \rfloor$) in one run without looping over.
    Afterwards we have $n - \lfloor \frac{n}{k} \rfloor$ numbers left, and we start with the $(\lfloor \frac{n}{k} \rfloor \cdot k)$-th number.
    So we have to shift by that many.
    We can notice that $\lfloor \frac{n}{k} \rfloor \cdot k$ is simply $-n \bmod k$.
    And because we removed every $k$-th number, we have to add the number of numbers that we removed before the result index.
    Which we can compute by dividing the result index by $k - 1$.

    Also, we need to handle the case when $n$ becomes less than $k$. In this case, the above optimization would cause an infinite loop.

    **Implementation** (for convenience in 0-indexing):

    ```{.cpp file=josephus_fast0}
    int josephus(int n, int k) {
        if (n == 1)
            return 0;
        if (k == 1)
            return n-1;
        if (k > n)
            return (josephus(n-1, k) + k) % n;
        int cnt = n / k;
        int res = josephus(n - cnt, k);
        res -= n % k;
        if (res < 0)
            res += n;
        else
            res += res / (k - 1);
        return res;
    }
    ```

    Let us estimate the **complexity** of this algorithm. Immediately note that the case $n < k$ is analyzed by the old solution, which will work in this case for $O(k)$. Now consider the algorithm itself. In fact, after every iteration, instead of $n$ numbers, we are left with $n \left( 1 - \frac{1}{k} \right)$ numbers, so the total number of iterations $x$ of the algorithm can be found roughly from the following equation:

    $$ n \left(1 - \frac{1}{k} \right) ^ x = 1, $$

    on taking logarithm on both sides, we obtain:

    $$\ln n + x \ln \left(1 - \frac{1}{k} \right) = 0,$$ 
    $$x = - \frac{\ln n}{\ln \left(1 - \frac{1}{k} \right)},$$

    using the decomposition of the logarithm into Taylor series, we obtain an approximate estimate:

    $$x \approx k \ln n$$

    Thus, the complexity of the algorithm is actually $O (k \log n)$.

    ## Analytical solution for $k = 2$

    In this particular case (in which this task was set by Josephus Flavius) the problem is solved much easier.

    In the case of even $n$ we get that all even numbers will be crossed out, and then there will be a problem remaining for $\frac{n}{2}$, then the answer for $n$ will be obtained from the answer for $\frac{n}{2}$ by multiplying by two and subtracting one (by shifting positions):

    $$ J_{2n, 2} = 2 J_{n, 2} - 1 $$

    Similarly, in the case of an odd $n$, all even numbers will be crossed out, then the first number, and the problem for $\frac{n-1}{2}$ will remain, and taking into account the shift of positions, we obtain the second formula:

    $$J_{2n+1,2} = 2 J_{n, 2} + 1 $$

    We can use this recurrent dependency directly in our implementation. This pattern can be translated into another form: $J_{n, 2}$ represents a sequence of all odd numbers, "restarting" from one whenever $n$ turns out to be a power of two. This can be written as a single formula:

    $$J_{n, 2} = 1 + 2 \left(n-2^{\lfloor \log_2 n \rfloor} \right)$$

    ## Analytical solution for $k > 2$

    Despite the simple form of the problem and a large number of articles on this and related problems, a simple analytical representation of the solution of Josephus' problem has not yet been found. For small $k$, some formulas are derived, but apparently they are all difficult to apply in practice (for example, see Halbeisen, Hungerbuhler "The Josephus Problem" and Odlyzko, Wilf "Functional iteration and the Josephus problem").
[/Textbook Reference Material]


[Textbook Reference Material]:
    Title: The Inclusion-Exclusion Principle
    Part: 3/5
    ```

    Asymptotics of the solution is $O (\sqrt{n})$.

    ### The number of integers in a given interval which are multiple of at least one of the given numbers

    Given $n$ numbers $a_i$ and number $r$. You want to count the number of integers in the interval $[1; r]$ that are multiple of at least one of the $a_i$.

    The solution algorithm is almost identical to the one for previous task — construct the formula of inclusion-exclusion on the numbers $a_i$, i.e. each term in this formula is the number of numbers divisible by a given subset of numbers $a_i$ (in other words, divisible by their [least common multiple](../algebra/euclid-algorithm.md)).

    So we will now iterate over all $2^n$ subsets of integers $a_i$ with $O(n \log r)$ operations to find their least common multiple, adding or subtracting the number of multiples of it in the interval. Asymptotics is $O (2^n\cdot n\cdot \log r)$.

    ### The number of strings that satisfy a given pattern

    Consider $n$ patterns of strings of the same length, consisting only of letters ($a...z$) or question marks. You're also given a number $k$. A string matches a pattern if it has the same length as the pattern, and at each position, either the corresponding characters are equal or the character in the pattern is a question mark. The task is to count the number of strings that match exactly $k$ of the patterns (first problem) and at least $k$ of the patterns (second problem).

    Notice first that we can easily count the number of strings that satisfy at once all of the specified patterns. To do this, simply "cross" patterns: iterate though the positions ("slots") and look at a position over all patterns. If all patterns have a question mark in this position, the character can be any letter from $a$ to $z$. Otherwise, the character of this position is uniquely defined by the patterns that do not contain a question mark.

    Learn now to solve the first version of the problem: when the string must satisfy exactly $k$ of the patterns.

    To solve it, iterate and fix a specific subset $X$ from the set of patterns consisting of $k$ patterns. Then we have to count the number of strings that satisfy this set of patterns, and only matches it, that is, they don't match any other pattern. We will use the inclusion-exclusion principle in a slightly different manner: we sum on all supersets $Y$ (subsets from the original set of strings that contain $X$), and either add to the current answer or subtract it from the number of strings:

    $$ ans(X) = \sum_{Y \supseteq X} (-1)^{|Y|-k} \cdot f(Y) $$

    Where $f(Y)$ is the number of strings that match $Y$ (at least $Y$).

    (If you have a hard time figuring out this, you can try drawing Venn Diagrams.)

    If we sum up on all $ans(X)$, we will get the final answer:

    $$ ans = \sum_{X ~ : ~ |X| = k} ans(X) $$

    However, asymptotics of this solution is $O(3^k \cdot k)$. To improve it, notice that different $ans(X)$ computations very often share $Y$ sets.

    We will reverse the formula of inclusion-exclusion and sum in terms of $Y$ sets. Now it becomes clear that the same set $Y$ would be taken into account in the computation of $ans(X)$ of $\binom{|Y|}{k}$ sets with the same sign $(-1)^{|Y| - k}$.

    $$ ans = \sum_{Y ~ : ~ |Y| \ge k} (-1)^{|Y|-k} \cdot \binom{|Y|}{k} \cdot f(Y) $$

    Now our solution has asymptotics $O(2^k \cdot k)$.

    We will now solve the second version of the problem: find the number of strings that match **at least** $k$ of the patterns.

    Of course, we can just use the solution to the first version of the problem and add the answers for sets with size greater than $k$. However, you may notice that in this problem, a set |Y| is considered in the formula for all sets with size $\ge k$ which are contained in $Y$. That said, we can write the part of the expression that is being multiplied by $f(Y)$ as:


    $$ (-1)^{|Y|-k} \cdot \binom{|Y|}{k} + (-1)^{|Y|-k-1} \cdot \binom{|Y|}{k+1} + (-1)^{|Y|-k-2} \cdot \binom{|Y|}{k+2} + \cdots + (-1)^{|Y|-|Y|} \cdot \binom{|Y|}{|Y|} $$

    Looking at Graham's (Graham, Knuth, Patashnik. "Concrete mathematics" [1998] ), we see a well-known formula for [binomial coefficients](binomial-coefficients.md):

    $$ \sum_{k=0}^m (-1)^k \cdot \binom{n}{k} = (-1)^m \cdot \binom{n-1}{m} $$

    Applying it here, we find that the entire sum of binomial coefficients is minimized:

    $$ (-1)^{|Y|-k} \cdot \binom{|Y|-1}{|Y|-k} $$

    Thus, for this task, we also obtained a solution with the asymptotics $O(2^k \cdot k)$:

    $$ ans = \sum_{Y ~ : ~ |Y| \ge k} (-1)^{|Y|-k} \cdot \binom{|Y|-1}{|Y|-k} \cdot f(Y) $$

    ### The number of ways of going from a cell to another

    There is a field $n \times m$, and $k$ of its cells are impassable walls. A robot is initially at the cell $(1,1)$ (bottom left). The robot can only move right or up, and eventually it needs to get into the cell $(n,m)$, avoiding all obstacles. You need to count the number of ways he can do it.

    Assume that the sizes $n$ and $m$ are very large (say, $10^9$), and the number $k$ is small (around $100$).

    For now, sort the obstacles by their coordinate $x$, and in case of equality — coordinate $y$.

    Also just learn how to solve a problem without obstacles: i.e. learn how to count the number of ways to get from one cell to another. In one axis, we need to go through $x$ cells, and on the other, $y$ cells. From simple combinatorics, we get a formula using [binomial coefficients](binomial-coefficients.md):

    $$\binom{x+y}{x}$$

    Now to count the number of ways to get from one cell to another, avoiding all obstacles, you can use inclusion-exclusion to solve the inverse problem: count the number of ways to walk through the board stepping at a subset of obstacles (and subtract it from the total number of ways).

    When iterating over a subset of the obstacles that we'll step, to count the number of ways to do this simply multiply the number of all paths from starting cell to the first of the selected obstacles, a first obstacle to the second, and so on, and then add or subtract this number from the answer, in accordance with the standard formula of inclusion-exclusion.

    However, this will again be non-polynomial in complexity $O(2^k \cdot k)$.

    Here goes a polynomial solution:

    We will use dynamic programming. For convenience, push (1,1) to the beginning and (n,m) at the end of the obstacles array. Let's compute the numbers $d[i]$ — the number of ways to get from the starting point ($0-th$) to $i-th$, without stepping on any other obstacle (except for $i$, of course). We will compute this number for all the obstacle cells, and also for the ending one.

    Let's forget for a second the obstacles and just count the number of paths from cell $0$ to $i$. We need to consider some "bad" paths, the ones that pass through the obstacles, and subtract them from the total number of ways of going from $0$ to $i$.

    When considering an obstacle $t$ between $0$ and $i$ ($0 < t < i$), on which we can step, we see that the number of paths from $0$ to $i$ that pass through $t$ which have $t$ as the **first obstacle between start and $i$**. We can compute that as: $d[t]$ multiplied by the number of arbitrary paths from $t$ to $i$. We can count the number of "bad" ways summing this for all $t$ between $0$ and $i$.

    We can compute $d[i]$ in $O(k)$ for $O(k)$ obstacles, so this solution has complexity $O(k^2)$.

    ### The number of coprime quadruples

    You're given $n$ numbers: $a_1, a_2, \ldots, a_n$. You are required to count the number of ways to choose four numbers so that their combined greatest common divisor is equal to one.

    We will solve the inverse problem — compute the number of "bad" quadruples, i.e. quadruples in which all numbers are divisible by a number $d > 1$.

    We will use the inclusion-exclusion principle while summing over all possible groups of four numbers divisible by a divisor $d$.

    $$ans = \sum_{d \ge 2} (-1)^{deg(d)-1} \cdot f(d)$$
[/Textbook Reference Material]


[Textbook Reference Material]:
    Title: Generating all $K$-combinations
    Part: 1/1
    # Generating all $K$-combinations

    In this article we will discuss the problem of generating all $K$-combinations.
    Given the natural numbers $N$ and $K$, and considering a set of numbers from $1$ to $N$.
    The task is to derive all **subsets of size $K$**.

    ## Generate next lexicographical $K$-combination {data-toc-label="Generate next lexicographical K-combination"}

    First we will generate them in lexicographical order.
    The algorithm for this is simple. The first combination will be ${1, 2, ..., K}$. Now let's see how
    to find the combination that immediately follows this, lexicographically. To do so, we consider our
    current combination, and find the rightmost element that has not yet reached its highest possible value. Once
    finding this element, we increment it by $1$, and assign the lowest valid value to all subsequent
    elements.

    ```{.cpp file=next_combination}
    bool next_combination(vector<int>& a, int n) {
        int k = (int)a.size();
        for (int i = k - 1; i >= 0; i--) {
            if (a[i] < n - k + i + 1) {
                a[i]++;
                for (int j = i + 1; j < k; j++)
                    a[j] = a[j - 1] + 1;
                return true;
            }
        }
        return false;
    }
    ```

    ## Generate all $K$-combinations such that adjacent combinations differ by one element {data-toc-label="Generate all K-combinations such that adjacent combinations differ by one element"}

    This time we want to generate all $K$-combinations in such
    an order, that adjacent combinations differ exactly by one element.

    This can be solved using the [Gray Code](../algebra/gray-code.md):
    If we assign a bitmask to each subset, then by generating and iterating over these bitmasks with Gray codes, we can obtain our answer.

    The task of generating $K$-combinations can also be solved using Gray Codes in a different way:
    Generate Gray Codes for the numbers from $0$ to $2^N - 1$ and leave only those codes containing $K$ $1$s.
    The surprising fact is that in the resulting sequence of $K$ set bits, any two neighboring masks (including the
    first and last mask - neighboring in a cyclic sense) - will differ exactly by two bits, which is our objective (remove
    a number, add a number).

    Let us prove this:

    For the proof, we recall the fact that the sequence $G(N)$ (representing the $N$<sup>th</sup> Gray Code) can 
    be obtained as follows:

    $$G(N) = 0G(N-1) \cup 1G(N-1)^\text{R}$$

    That is, consider the Gray Code sequence for $N-1$, and prefix $0$ before every term. And consider the 
    reversed Gray Code sequence for $N-1$ and prefix a $1$ before every mask, and
    concatenate these two sequences.

    Now we may produce our proof.

    First, we prove that the first and last masks differ exactly in two bits. To do this, it is sufficient to note
    that the first mask of the sequence $G(N)$, will be of the form $N-K$ $0$s, followed by $K$ $1$s. As
    the first bit is set as $0$, after which $(N-K-1)$ $0$s follow, after which $K$ set bits follow and the last mask will be of the form $1$, then $(N-K)$ $0$s, then $K-1$ $1$s.
    Applying the principle of mathematical induction, and using the formula for $G(N)$, concludes the proof.

    Now our task is to show that any two adjacent codes also differ exactly in two bits, we can do this by considering our recursive equation for the generation of Gray Codes. Let us assume the content of the two halves formed by $G(N-1)$ is true. Now we need to prove that the new consecutive pair formed at the junction (by the concatenation of these two halves) is also valid, i.e. they differ by exactly two bits.

    This can be done, as we know the last mask of the first half and the first mask of the second half. The last mask of the first half would be $1$, then $(N-K-1)$ $0$s, then $K-1$ $1$s. And the first mask of the second half would be $0$, then $(N-K-2)$ $0$s would follow, and then $K$ $1$s. Thus, comparing the two masks, we find exactly two bits that differ.

    The following is a naive implementation working by generating all $2^{n}$ possible subsets, and finding subsets of size
    $K$.

    ```{.cpp file=generate_all_combinations_naive}
    int gray_code (int n) {
        return n ^ (n >> 1);
    }

    int count_bits (int n) {
        int res = 0;
        for (; n; n >>= 1)
            res += n & 1;
        return res;
    }

    void all_combinations (int n, int k) {
        for (int i = 0; i < (1 << n); i++) {
            int cur = gray_code (i);
            if (count_bits(cur) == k) {
                for (int j = 0; j < n; j++) {
                    if (cur & (1 << j))
                        cout << j + 1;
                }
                cout << "\n";
            }
        }
    }
    ```

    It's worth mentioning that a more efficient implementation exists that only resorts to building valid combinations and thus
    works in $O\left(N \cdot \binom{N}{K}\right)$ however it is recursive in nature and for smaller values of $N$ it probably has a larger constant
    than the previous solution.

    The implementation is derived from the formula:

    $$G(N, K) = 0G(N-1, K) \cup 1G(N-1, K-1)^\text{R}$$

    This formula is obtained by modifying the general equation to determine the Gray code, and works by selecting the
    subsequence from appropriate elements.

    Its implementation is as follows:

    ```{.cpp file=generate_all_combinations_fast}
    vector<int> ans;

    void gen(int n, int k, int idx, bool rev) {
        if (k > n || k < 0)
            return;

        if (!n) {
            for (int i = 0; i < idx; ++i) {
                if (ans[i])
                    cout << i + 1;
            }
            cout << "\n";
            return;
        }

        ans[idx] = rev;
        gen(n - 1, k - rev, idx + 1, false);
        ans[idx] = !rev;
        gen(n - 1, k - !rev, idx + 1, true);
    }

    void all_combinations(int n, int k) {
        ans.resize(n);
        gen(n, k, 0, false);
    }
    ```
[/Textbook Reference Material]


INFO - [Task id] Mbpp/75 [generation text] 1. **Restate the problem in plain English**: 
   We need to create a function that takes a list of tuples and an integer `k`. The function should return a list of those tuples where every element in the tuple is divisible by `k`.

2. **Conceptualize a solution first in plain English**: 
   To solve this problem, we will iterate through each tuple in the list. For each tuple, we will check if all its elements are divisible by `k`. If they are, we will add that tuple to our result list. Finally, we will return the list of tuples that meet the criteria.

3. **Write a pseudocode solution**:
   ```
   function find_tuples(tuples_list, k):
       result = empty list
       for each tuple in tuples_list:
           if all elements in tuple are divisible by k:
               add tuple to result
       return result
   ```

4. **Output the final Python 3 solution with your solution steps in comments**:
```python
def find_tuples(tuples_list, k):
    # Initialize an empty list to store the result
    result = []
    
    # Iterate through each tuple in the provided list
    for tup in tuples_list:
        # Check if all elements in the tuple are divisible by k
        if all(element % k == 0 for element in tup):
            # If true, add the tuple to the result list
            result.append(tup)
    
    # Return the list of tuples that have all elements divisible by k
    return result
```
INFO - program_code:
 
def find_tuples(tuples_list, k):
    # Initialize an empty list to store the result
    result = []
    
    # Iterate through each tuple in the provided list
    for tup in tuples_list:
        # Check if all elements in the tuple are divisible by k
        if all(element % k == 0 for element in tup):
            # If true, add the tuple to the result list
            result.append(tup)
    
    # Return the list of tuples that have all elements divisible by k
    return result


INFO - program_name:
 find_tuples

INFO - dependencies:
 []

INFO - raw_msg:
 1. **Restate the problem in plain English**: 
   We need to create a function that takes a list of tuples and an integer `k`. The function should return a list of those tuples where every element in the tuple is divisible by `k`.

2. **Conceptualize a solution first in plain English**: 
   To solve this problem, we will iterate through each tuple in the list. For each tuple, we will check if all its elements are divisible by `k`. If they are, we will add that tuple to our result list. Finally, we will return the list of tuples that meet the criteria.

3. **Write a pseudocode solution**:
   ```
   function find_tuples(tuples_list, k):
       result = empty list
       for each tuple in tuples_list:
           if all elements in tuple are divisible by k:
               add tuple to result
       return result
   ```

4. **Output the final Python 3 solution with your solution steps in comments**:
```python
def find_tuples(tuples_list, k):
    # Initialize an empty list to store the result
    result = []
    
    # Iterate through each tuple in the provided list
    for tup in tuples_list:
        # Check if all elements in the tuple are divisible by k
        if all(element % k == 0 for element in tup):
            # If true, add the tuple to the result list
            result.append(tup)
    
    # Return the list of tuples that have all elements divisible by k
    return result
```

INFO - no_parent:
 True

INFO - full code to be executed: 
 
def find_tuples(tuples_list, k):
    # Initialize an empty list to store the result
    result = []
    
    # Iterate through each tuple in the provided list
    for tup in tuples_list:
        # Check if all elements in the tuple are divisible by k
        if all(element % k == 0 for element in tup):
            # If true, add the tuple to the result list
            result.append(tup)
    
    # Return the list of tuples that have all elements divisible by k
    return result


INFO - obs: Note: Tests are automatically generated and can be wrong.

Tests passed:
assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]

Tests failed:
None
reward: True
done: None
info: {'individual_results': (True,)}
INFO - acc:290/306 = 94.77%
