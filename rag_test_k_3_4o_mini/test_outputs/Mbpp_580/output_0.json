{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\nTests failed:\nNone",
    "code": "\ndef extract_even(nested_tuple):\n    # Create an empty list to hold the result\n    result = []\n    \n    # Iterate through each element in the input tuple\n    for element in nested_tuple:\n        # Check if the element is an integer\n        if isinstance(element, int):\n            # If it is even, add it to the result list\n            if element % 2 == 0:\n                result.append(element)\n        # Check if the element is a tuple\n        elif isinstance(element, tuple):\n            # Recursively call extract_even on the tuple and add the result to the result list\n            result.append(extract_even(element))\n    \n    # Return a tuple created from the result list\n    return tuple(result)\n",
    "full_code": "\ndef extract_even(nested_tuple):\n    # Create an empty list to hold the result\n    result = []\n    \n    # Iterate through each element in the input tuple\n    for element in nested_tuple:\n        # Check if the element is an integer\n        if isinstance(element, int):\n            # If it is even, add it to the result list\n            if element % 2 == 0:\n                result.append(element)\n        # Check if the element is a tuple\n        elif isinstance(element, tuple):\n            # Recursively call extract_even on the tuple and add the result to the result list\n            result.append(extract_even(element))\n    \n    # Return a tuple created from the result list\n    return tuple(result)\n",
    "reward": true,
    "program_code": "\ndef extract_even(nested_tuple):\n    # Create an empty list to hold the result\n    result = []\n    \n    # Iterate through each element in the input tuple\n    for element in nested_tuple:\n        # Check if the element is an integer\n        if isinstance(element, int):\n            # If it is even, add it to the result list\n            if element % 2 == 0:\n                result.append(element)\n        # Check if the element is a tuple\n        elif isinstance(element, tuple):\n            # Recursively call extract_even on the tuple and add the result to the result list\n            result.append(extract_even(element))\n    \n    # Return a tuple created from the result list\n    return tuple(result)\n",
    "program_name": "extract_even",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: The task is to create a function that takes a nested tuple containing integers and removes all odd numbers from it, preserving the structure of the nested tuples. The output should be a new tuple that only contains even numbers and maintains the same nesting.\n\n2. **Conceptualize a solution first in plain English**: To solve this problem, we need to iterate through the elements of the input tuple. If an element is an integer, we check if it is even; if it is, we keep it. If it is odd, we discard it. If an element is another tuple, we need to apply the same logic recursively to that tuple. The final result should be a new tuple that reflects these changes.\n\n3. **Write a pseudocode solution**:\n   ```\n   function extract_even(nested_tuple):\n       create an empty list to hold the result\n       for each element in nested_tuple:\n           if the element is an integer:\n               if it is even:\n                   add it to the result list\n           else if the element is a tuple:\n               recursively call extract_even on the element and add the result to the result list\n       return a tuple created from the result list\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef extract_even(nested_tuple):\n    # Create an empty list to hold the result\n    result = []\n    \n    # Iterate through each element in the input tuple\n    for element in nested_tuple:\n        # Check if the element is an integer\n        if isinstance(element, int):\n            # If it is even, add it to the result list\n            if element % 2 == 0:\n                result.append(element)\n        # Check if the element is a tuple\n        elif isinstance(element, tuple):\n            # Recursively call extract_even on the tuple and add the result to the result list\n            result.append(extract_even(element))\n    \n    # Return a tuple created from the result list\n    return tuple(result)\n```",
    "no_parent": true,
    "dependency_used": false
}