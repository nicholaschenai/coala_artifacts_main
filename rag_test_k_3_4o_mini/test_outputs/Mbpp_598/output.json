{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert armstrong_number(153)==True\n\nTests failed:\nNone",
    "code": "\ndef armstrong_number(n: int) -> bool:\n    # Convert the number to a string to access each digit\n    digits = str(n)\n    # Count the number of digits\n    num_digits = len(digits)\n    # Initialize sum to 0\n    total = 0\n    # Iterate over each digit\n    for digit in digits:\n        # Convert digit back to integer and raise to the power of num_digits\n        total += int(digit) ** num_digits\n    # Check if the total equals the original number\n    return total == n\n",
    "full_code": "\ndef armstrong_number(n: int) -> bool:\n    # Convert the number to a string to access each digit\n    digits = str(n)\n    # Count the number of digits\n    num_digits = len(digits)\n    # Initialize sum to 0\n    total = 0\n    # Iterate over each digit\n    for digit in digits:\n        # Convert digit back to integer and raise to the power of num_digits\n        total += int(digit) ** num_digits\n    # Check if the total equals the original number\n    return total == n\n",
    "reward": true,
    "program_code": "\ndef armstrong_number(n: int) -> bool:\n    # Convert the number to a string to access each digit\n    digits = str(n)\n    # Count the number of digits\n    num_digits = len(digits)\n    # Initialize sum to 0\n    total = 0\n    # Iterate over each digit\n    for digit in digits:\n        # Convert digit back to integer and raise to the power of num_digits\n        total += int(digit) ** num_digits\n    # Check if the total equals the original number\n    return total == n\n",
    "program_name": "armstrong_number",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: The task is to create a function that determines if a given number is an Armstrong number. An Armstrong number (or narcissistic number) is a number that is equal to the sum of its own digits each raised to the power of the number of digits. For example, 153 is an Armstrong number because \\(1^3 + 5^3 + 3^3 = 153\\).\n\n2. **Conceptualize a solution first in plain English**: To check if a number is an Armstrong number, we need to:\n   - Convert the number to a string to easily access each digit.\n   - Count the number of digits in the number.\n   - Calculate the sum of each digit raised to the power of the total number of digits.\n   - Compare this sum to the original number. If they are equal, the number is an Armstrong number.\n\n3. **Write a pseudocode solution**:\n   ```\n   function armstrong_number(n):\n       convert n to string to get digits\n       count the number of digits\n       initialize sum to 0\n       for each digit in digits:\n           convert digit back to integer\n           add digit raised to the power of number of digits to sum\n       if sum equals n:\n           return True\n       else:\n           return False\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef armstrong_number(n: int) -> bool:\n    # Convert the number to a string to access each digit\n    digits = str(n)\n    # Count the number of digits\n    num_digits = len(digits)\n    # Initialize sum to 0\n    total = 0\n    # Iterate over each digit\n    for digit in digits:\n        # Convert digit back to integer and raise to the power of num_digits\n        total += int(digit) ** num_digits\n    # Check if the total equals the original number\n    return total == n\n```",
    "no_parent": true,
    "dependency_used": false
}