INFO - [test iter]: 193/378

INFO - The task prompt is Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a function to toggle the case of all characters in a string.
...

INFO - Attempting task_id Mbpp/557
INFO - LM call n parse attempt 1 / 3

INFO - [Task id] Mbpp/557 [prompt] 
You are an expert programmer tasked with solving the problem below.

Follow the user's instructions to solve the problem.
The user can ask for analysis, code, or both.

## Instructions
When asked to output code,
- Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
- include exactly one block of code with the entire solution
- No outside libraries are allowed. 
- Builtins are allowed.
- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).
- DO NOT write any assert statements / tests.

## Problem
[BEGIN PROBLEM]
Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a function to toggle the case of all characters in a string.
assert toggle_string("Python")==("pYTHON")
"""

[END PROBLEM]

INFO - [Task id] Mbpp/557 [prompt] 
## Instructions

Reason through the problem and:
1. Restate the problem in plain English
2. Conceptualize a solution first in plain English
3. Write a pseudocode solution
4. Output the final Python 3 solution with your solution steps in comments.

Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
and include exactly one block of code with the entire solution.

No outside libraries are allowed.
Builtins are allowed.

INFO - [Task id] Mbpp/557 [generation text] 1. **Restate the problem in plain English**: 
   We need to create a function that takes a string as input and changes each character's case. If a character is uppercase, it should be converted to lowercase, and if it is lowercase, it should be converted to uppercase.

2. **Conceptualize a solution first in plain English**: 
   We can iterate through each character in the string. For each character, we will check if it is uppercase or lowercase. If it is uppercase, we will convert it to lowercase, and if it is lowercase, we will convert it to uppercase. We will then collect all the modified characters and join them back into a single string to return the result.

3. **Write a pseudocode solution**:
   ```
   function toggle_string(input_string):
       create an empty list to hold the toggled characters
       for each character in input_string:
           if character is uppercase:
               convert it to lowercase and add to the list
           else if character is lowercase:
               convert it to uppercase and add to the list
           else:
               add the character as is to the list
       join the list into a single string
       return the new string
   ```

4. **Output the final Python 3 solution with your solution steps in comments**:
```python
def toggle_string(input_string: str) -> str:
    # Create an empty list to hold the toggled characters
    toggled_chars = []
    
    # Iterate through each character in the input string
    for char in input_string:
        # Check if the character is uppercase
        if char.isupper():
            # Convert it to lowercase and add to the list
            toggled_chars.append(char.lower())
        # Check if the character is lowercase
        elif char.islower():
            # Convert it to uppercase and add to the list
            toggled_chars.append(char.upper())
        else:
            # Add the character as is to the list (for non-alphabetic characters)
            toggled_chars.append(char)
    
    # Join the list into a single string
    return ''.join(toggled_chars)
```
INFO - [35m Rollout attempt 1/4[0m
INFO - [33m Retrieving 3 entries for db: semantic 
 [0m
INFO - Retrieved (score=0.6183):
Title: String Hashing
Part: 1/2
# String Hashing

Hashing algorithms are helpful in solving a lot of problems.

We want to solve the problem of comparing strings efficiently.
The brute force way of doing so is just to compare the letters of both strings, which has a time complexity of $O(\min(n_1...


INFO - Retrieved (score=0.6183):
Title: Prefix function. Knuthâ€“Morrisâ€“Pratt algorithm
Part: 3/4
```

Here for each value of the prefix function we first count how many times it occurs in the array $\pi$, and then compute the final answers:
if we know that the length prefix $i$ appears exactly $\text{ans}[i]$ times, then this num...


INFO - Retrieved (score=0.6333):
Title: Aho-Corasick algorithm
Part: 1/3
# Aho-Corasick algorithm

The Aho-Corasick algorithm allows us to quickly search for multiple patterns in a text.
The set of pattern strings is also called a _dictionary_.
We will denote the total length of its constituent strings by $m$ and the size of the...


INFO - Retrieved (score=0.6183): 
[Textbook Reference Material]:
    Title: String Hashing
    Part: 1/2
    # String Hashing

    Hashing algorithms are helpful in solving a lot of problems.

    We want to solve the problem of comparing strings efficiently.
    The brute force way of doing so is just to compare the letters of ...
INFO - Retrieved (score=0.6183): 
[Textbook Reference Material]:
    Title: Prefix function. Knuthâ€“Morrisâ€“Pratt algorithm
    Part: 3/4
    ```

    Here for each value of the prefix function we first count how many times it occurs in the array $\pi$, and then compute the final answers:
    if we know that the length prefix $i$ ...
INFO - Retrieved (score=0.6333): 
[Textbook Reference Material]:
    Title: Aho-Corasick algorithm
    Part: 1/3
    # Aho-Corasick algorithm

    The Aho-Corasick algorithm allows us to quickly search for multiple patterns in a text.
    The set of pattern strings is also called a _dictionary_.
    We will denote the total leng...
INFO - LM call n parse attempt 1 / 3

INFO - [Task id] Mbpp/557 [prompt] 
You are an expert programmer tasked with solving the problem below.

Follow the user's instructions to solve the problem.
The user can ask for analysis, code, or both.

## Instructions
When asked to output code,
- Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
- include exactly one block of code with the entire solution
- No outside libraries are allowed. 
- Builtins are allowed.
- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).
- DO NOT write any assert statements / tests.

## Problem
[BEGIN PROBLEM]
Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a function to toggle the case of all characters in a string.
assert toggle_string("Python")==("pYTHON")
"""

[END PROBLEM]

INFO - [Task id] Mbpp/557 [prompt] 
## Instructions

Reason through the problem and:
1. Restate the problem in plain English
2. Conceptualize a solution first in plain English
3. Write a pseudocode solution
4. Output the final Python 3 solution with your solution steps in comments.

Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
and include exactly one block of code with the entire solution.

No outside libraries are allowed.
Builtins are allowed.

INFO - [Task id] Mbpp/557 [prompt] 
Also, here are some of your memories.
Feel free to use the given information to aid your problem solving process if necessary.
Do not confuse the memories with the problem statement.

## Memories

[Textbook Reference Material]:
    Title: String Hashing
    Part: 1/2
    # String Hashing

    Hashing algorithms are helpful in solving a lot of problems.

    We want to solve the problem of comparing strings efficiently.
    The brute force way of doing so is just to compare the letters of both strings, which has a time complexity of $O(\min(n_1, n_2))$ if $n_1$ and $n_2$ are the sizes of the two strings.
    We want to do better.
    The idea behind the string hashing is the following: we map each string into an integer and compare those instead of the strings.
    Doing this allows us to reduce the execution time of the string comparison to $O(1)$.

    For the conversion, we need a so-called **hash function**.
    The goal of it is to convert a string into an integer, the so-called **hash** of the string.
    The following condition has to hold: if two strings $s$ and $t$ are equal ($s = t$), then also their hashes have to be equal ($\text{hash}(s) = \text{hash}(t)$).
    Otherwise, we will not be able to compare strings.

    Notice, the opposite direction doesn't have to hold.
    If the hashes are equal ($\text{hash}(s) = \text{hash}(t)$), then the strings do not necessarily have to be equal.
    E.g. a valid hash function would be simply $\text{hash}(s) = 0$ for each $s$.
    Now, this is just a stupid example, because this function will be completely useless, but it is a valid hash function.
    The reason why the opposite direction doesn't have to hold, is because there are exponentially many strings.
    If we only want this hash function to distinguish between all strings consisting of lowercase characters of length smaller than 15, then already the hash wouldn't fit into a 64-bit integer (e.g. unsigned long long) any more, because there are so many of them.
    And of course, we don't want to compare arbitrary long integers, because this will also have the complexity $O(n)$.

    So usually we want the hash function to map strings onto numbers of a fixed range $[0, m)$, then comparing strings is just a comparison of two integers with a fixed length.
    And of course, we want $\text{hash}(s) \neq \text{hash}(t)$ to be very likely if $s \neq t$.

    That's the important part that you have to keep in mind.
    Using hashing will not be 100% deterministically correct, because two complete different strings might have the same hash (the hashes collide).
    However, in a wide majority of tasks, this can be safely ignored as the probability of the hashes of two different strings colliding is still very small.
    And we will discuss some techniques in this article how to keep the probability of collisions very low.

    ## Calculation of the hash of a string

    The good and widely used way to define the hash of a string $s$ of length $n$ is

    $$\begin{align}
    \text{hash}(s) &= s[0] + s[1] \cdot p + s[2] \cdot p^2 + ... + s[n-1] \cdot p^{n-1} \mod m \\
    &= \sum_{i=0}^{n-1} s[i] \cdot p^i \mod m,
    \end{align}$$

    where $p$ and $m$ are some chosen, positive numbers.
    It is called a **polynomial rolling hash function**.

    It is reasonable to make $p$ a prime number roughly equal to the number of characters in the input alphabet.
    For example, if the input is composed of only lowercase letters of the English alphabet, $p = 31$ is a good choice.
    If the input may contain both uppercase and lowercase letters, then $p = 53$ is a possible choice.
    The code in this article will use $p = 31$.

    Obviously $m$ should be a large number since the probability of two random strings colliding is about $\approx \frac{1}{m}$.
    Sometimes $m = 2^{64}$ is chosen, since then the integer overflows of 64-bit integers work exactly like the modulo operation.
    However, there exists a method, which generates colliding strings (which work independently from the choice of $p$).
    So in practice, $m = 2^{64}$ is not recommended.
    A good choice for $m$ is some large prime number.
    The code in this article will just use $m = 10^9+9$.
    This is a large number, but still small enough so that we can perform multiplication of two values using 64-bit integers.

    Here is an example of calculating the hash of a string $s$, which contains only lowercase letters.
    We convert each character of $s$ to an integer.
    Here we use the conversion $a \rightarrow 1$, $b \rightarrow 2$, $\dots$, $z \rightarrow 26$.
    Converting $a \rightarrow 0$ is not a good idea, because then the hashes of the strings $a$, $aa$, $aaa$, $\dots$ all evaluate to $0$.

    ```{.cpp file=hashing_function}
    long long compute_hash(string const& s) {
        const int p = 31;
        const int m = 1e9 + 9;
        long long hash_value = 0;
        long long p_pow = 1;
        for (char c : s) {
            hash_value = (hash_value + (c - 'a' + 1) * p_pow) % m;
            p_pow = (p_pow * p) % m;
        }
        return hash_value;
    }
    ```

    Precomputing the powers of $p$ might give a performance boost.

    ## Example tasks

    ### Search for duplicate strings in an array of strings

    Problem: Given a list of $n$ strings $s_i$, each no longer than $m$ characters, find all the duplicate strings and divide them into groups.

    From the obvious algorithm involving sorting the strings, we would get a time complexity of $O(n m \log n)$ where the sorting requires $O(n \log n)$ comparisons and each comparison take $O(m)$ time.
    However, by using hashes, we reduce the comparison time to $O(1)$, giving us an algorithm that runs in $O(n m + n \log n)$ time.

    We calculate the hash for each string, sort the hashes together with the indices, and then group the indices by identical hashes.

    ```{.cpp file=hashing_group_identical_strings}
    vector<vector<int>> group_identical_strings(vector<string> const& s) {
        int n = s.size();
        vector<pair<long long, int>> hashes(n);
        for (int i = 0; i < n; i++)
            hashes[i] = {compute_hash(s[i]), i};

        sort(hashes.begin(), hashes.end());

        vector<vector<int>> groups;
        for (int i = 0; i < n; i++) {
            if (i == 0 || hashes[i].first != hashes[i-1].first)
                groups.emplace_back();
            groups.back().push_back(hashes[i].second);
        }
        return groups;
    }
[/Textbook Reference Material]


[Textbook Reference Material]:
    Title: Prefix function. Knuthâ€“Morrisâ€“Pratt algorithm
    Part: 3/4
    ```

    Here for each value of the prefix function we first count how many times it occurs in the array $\pi$, and then compute the final answers:
    if we know that the length prefix $i$ appears exactly $\text{ans}[i]$ times, then this number must be added to the number of occurrences of its longest suffix that is also a prefix.
    At the end we need to add $1$ to each result, since we also need to count the original prefixes also.

    Now let us consider the second problem.
    We apply the trick from Knuth-Morris-Pratt:
    we create the string $s + \# + t$ and compute its prefix function.
    The only differences to the first task is, that we are only interested in the prefix values that relate to the string $t$, i.e. $\pi[i]$ for $i \ge n + 1$.
    With those values we can perform the exact same computations as in the first task.

    ### The number of different substring in a string

    Given a string $s$ of length $n$.
    We want to compute the number of different substrings appearing in it.

    We will solve this problem iteratively.
    Namely we will learn, knowing the current number of different substrings, how to recompute this count by adding a character to the end.

    So let $k$ be the current number of different substrings in $s$, and we add the character $c$ to the end of $s$.
    Obviously some new substrings ending in $c$ will appear.
    We want to count these new substrings that didn't appear before.

    We take the string $t = s + c$ and reverse it.
    Now the task is transformed into computing how many prefixes there are that don't appear anywhere else.
    If we compute the maximal value of the prefix function $\pi_{\text{max}}$ of the reversed string $t$, then the longest prefix that appears in $s$ is $\pi_{\text{max}}$ long.
    Clearly also all prefixes of smaller length appear in it.

    Therefore the number of new substrings appearing when we add a new character $c$ is $|s| + 1 - \pi_{\text{max}}$.

    So for each character appended we can compute the number of new substrings in $O(n)$ times, which gives a time complexity of $O(n^2)$ in total.

    It is worth noting, that we can also compute the number of different substrings by appending the characters at the beginning, or by deleting characters from the beginning or the end.

    ### Compressing a string

    Given a string $s$ of length $n$.
    We want to find the shortest "compressed" representation of the string, i.e. we want to find a string $t$ of smallest length such that $s$ can be represented as a concatenation of one or more copies of $t$.

    It is clear, that we only need to find the length of $t$. Knowing the length, the answer to the problem will be the prefix of $s$ with this length.

    Let us compute the prefix function for $s$.
    Using the last value of it we define the value $k = n - \pi[n - 1]$.
    We will show, that if $k$ divides $n$, then $k$ will be the answer, otherwise there is no effective compression and the answer is $n$.

    Let $n$ be divisible by $k$.
    Then the string can be partitioned into blocks of the length $k$.
    By definition of the prefix function, the prefix of length $n - k$ will be equal with its suffix.
    But this means that the last block is equal to the block before.
    And the block before has to be equal to the block before it.
    And so on.
    As a result, it turns out that all blocks are equal, therefore we can compress the string $s$ to length $k$.

    Of course we still need to show that this is actually the optimum.
    Indeed, if there was a smaller compression than $k$, than the prefix function at the end would be greater than $n - k$.
    Therefore $k$ is really the answer.

    Now let us assume that $n$ is not divisible by $k$.
    We show that this implies that the length of the answer is $n$.
    We prove it by contradiction.
    Assuming there exists an answer, and the compression has length $p$ ($p$ divides $n$).
    Then the last value of the prefix function has to be greater than $n - p$, i.e. the suffix will partially cover the first block.
    Now consider the second block of the string.
    Since the prefix is equal with the suffix, and both the prefix and the suffix cover this block and their displacement relative to each other $k$ does not divide the block length $p$ (otherwise $k$ divides $n$), then all the characters of the block have to be identical.
    But then the string consists of only one character repeated over and over, hence we can compress it to a string of size $1$, which gives $k = 1$, and $k$ divides $n$.
    Contradiction.

    $$\overbrace{s_0 ~ s_1 ~ s_2 ~ s_3}^p ~ \overbrace{s_4 ~ s_5 ~ s_6 ~ s_7}^p$$

    $$s_0 ~ s_1 ~ s_2 ~ \underbrace{\overbrace{s_3 ~ s_4 ~ s_5 ~ s_6}^p ~ s_7}_{\pi[7] = 5}$$

    $$s_4 = s_3, ~ s_5 = s_4, ~ s_6 = s_5, ~ s_7 = s_6 ~ \Rightarrow ~ s_0 = s_1 = s_2 = s_3$$

    ### Building an automaton according to the prefix function

    Let's return to the concatenation to the two strings through a separator, i.e. for the strings $s$ and $t$ we compute the prefix function for the string $s + \# + t$.
    Obviously, since $\#$ is a separator, the value of the prefix function will never exceed $|s|$.
    It follows, that it is sufficient to only store the string $s + \#$ and the values of the prefix function for it, and we can compute the prefix function for all subsequent character on the fly:

    $$\underbrace{s_0 ~ s_1 ~ \dots ~ s_{n-1} ~ \#}_{\text{need to store}} ~ \underbrace{t_0 ~ t_1 ~ \dots ~ t_{m-1}}_{\text{do not need to store}}$$

    Indeed, in such a situation, knowing the next character $c \in t$ and the value of the prefix function of the previous position is enough information to compute the next value of the prefix function, without using any previous characters of the string $t$ and the value of the prefix function in them.

    In other words, we can construct an **automaton** (a finite state machine): the state in it is the current value of the prefix function, and the transition from one state to another will be performed via the next character.

    Thus, even without having the string $t$, we can construct such a transition table $(\text{old}_\pi, c) \rightarrow \text{new}_\pi$ using the same algorithm as for calculating the transition table:

    ```{.cpp file=prefix_automaton_slow}
    void compute_automaton(string s, vector<vector<int>>& aut) {
        s += '#';
        int n = s.size();
        vector<int> pi = prefix_function(s);
        aut.assign(n, vector<int>(26));
        for (int i = 0; i < n; i++) {
            for (int c = 0; c < 26; c++) {
                int j = i;
                while (j > 0 && 'a' + c != s[j])
                    j = pi[j-1];
                if ('a' + c == s[j])
                    j++;
                aut[i][c] = j;
            }
        }
    }
    ```

    However in this form the algorithm runs in $O(n^2 26)$ time for the lowercase letters of the alphabet.
    Note that we can apply dynamic programming and use the already calculated parts of the table.
    Whenever we go from the value $j$ to the value $\pi[j-1]$, we actually mean that the transition $(j, c)$ leads to the same state as the transition as $(\pi[j-1], c)$, and this answer is already accurately computed.

    ```{.cpp file=prefix_automaton_fast}
    void compute_automaton(string s, vector<vector<int>>& aut) {
        s += '#';
        int n = s.size();
        vector<int> pi = prefix_function(s);
        aut.assign(n, vector<int>(26));
        for (int i = 0; i < n; i++) {
            for (int c = 0; c < 26; c++) {
                if (i > 0 && 'a' + c != s[i])
                    aut[i][c] = aut[pi[i-1]][c];
                else
                    aut[i][c] = i + ('a' + c == s[i]);
            }
        }
    }
[/Textbook Reference Material]


[Textbook Reference Material]:
    Title: Aho-Corasick algorithm
    Part: 1/3
    # Aho-Corasick algorithm

    The Aho-Corasick algorithm allows us to quickly search for multiple patterns in a text.
    The set of pattern strings is also called a _dictionary_.
    We will denote the total length of its constituent strings by $m$ and the size of the alphabet by $k$.
    The algorithm constructs a finite state automaton based on a trie in $O(m k)$ time and then uses it to process the text.

    The algorithm was proposed by Alfred Aho and Margaret Corasick in 1975.

    ## Construction of the trie

    <center>
    <img src="https://upload.wikimedia.org/wikipedia/commons/e/e2/Trie.svg" width="400px">
    <br>
    <i>A trie based on words "Java", "Rad", "Rand", "Rau", "Raum" and "Rose".</i>
    <br>
    <i>The <a href="https://commons.wikimedia.org/wiki/File:Trie.svg">image</a> by [nd](https://de.wikipedia.org/wiki/Benutzer:Nd) is distributed under <a href="https://creativecommons.org/licenses/by-sa/3.0/deed.en">CC BY-SA 3.0</a> license.</i>
    </center>

    Formally, a trie is a rooted tree, where each edge of the tree is labeled with some letter
    and outgoing edges of a vertex have distinct labels.

    We will identify each vertex in the trie with the string formed by the labels on the path from the root to that vertex.

    Each vertex will also have a flag $\text{output}$ which will be set
    if the vertex corresponds to a pattern in the dictionary.

    Accordingly, a trie for a set of strings is a trie such that each $\text{output}$ vertex corresponds to one string from the set, and conversely, each string of the set corresponds to one $\text{output}$ vertex.

    We now describe how to construct a trie for a given set of strings in linear time with respect to their total length.

    We introduce a structure for the vertices of the tree:
    ```{.cpp file=aho_corasick_trie_definition}
    const int K = 26;

    struct Vertex {
        int next[K];
        bool output = false;

        Vertex() {
            fill(begin(next), end(next), -1);
        }
    };

    vector<Vertex> trie(1);
    ```

    Here, we store the trie as an array of $\text{Vertex}$.
    Each $\text{Vertex}$ contains the flag $\text{output}$ and the edges in the form of an array $\text{next}[]$, where $\text{next}[i]$ is the index of the vertex that we reach by following the character $i$, or $-1$ if there is no such edge.
    Initially, the trie consists of only one vertex - the root - with the index $0$.

    Now we implement a function that will add a string $s$ to the trie.
    The implementation is simple:
    we start at the root node, and as long as there are edges corresponding to the characters of $s$ we follow them.
    If there is no edge for one character, we generate a new vertex and connect it with an edge.
    At the end of the process we mark the last vertex with the flag $\text{output}$.

    ```{.cpp file=aho_corasick_trie_add}
    void add_string(string const& s) {
        int v = 0;
        for (char ch : s) {
            int c = ch - 'a';
            if (trie[v].next[c] == -1) {
                trie[v].next[c] = trie.size();
                trie.emplace_back();
            }
            v = trie[v].next[c];
        }
        trie[v].output = true;
    }
[/Textbook Reference Material]


INFO - [Task id] Mbpp/557 [generation text] 1. **Restate the problem in plain English**: The task is to create a function that takes a string as input and returns a new string where all the characters have their case toggled. This means that uppercase letters should become lowercase and vice versa.

2. **Conceptualize a solution first in plain English**: To solve this problem, we can iterate through each character in the input string. For each character, we will check if it is uppercase or lowercase. If it is uppercase, we will convert it to lowercase, and if it is lowercase, we will convert it to uppercase. We will then collect these converted characters into a new string and return it.

3. **Write a pseudocode solution**:
   ```
   function toggle_string(input_string):
       create an empty result string
       for each character in input_string:
           if character is uppercase:
               convert character to lowercase and add to result
           else if character is lowercase:
               convert character to uppercase and add to result
           else:
               add character as is to result
       return result
   ```

4. **Output the final Python 3 solution with your solution steps in comments**:
```python
def toggle_string(input_string: str) -> str:
    # Create an empty result string to store the toggled characters
    result = ""
    
    # Iterate through each character in the input string
    for char in input_string:
        # Check if the character is uppercase
        if char.isupper():
            # Convert to lowercase and add to result
            result += char.lower()
        # Check if the character is lowercase
        elif char.islower():
            # Convert to uppercase and add to result
            result += char.upper()
        else:
            # If it's neither, just add the character as is
            result += char
            
    # Return the final toggled string
    return result
```
INFO - program_code:
 
def toggle_string(input_string: str) -> str:
    # Create an empty result string to store the toggled characters
    result = ""
    
    # Iterate through each character in the input string
    for char in input_string:
        # Check if the character is uppercase
        if char.isupper():
            # Convert to lowercase and add to result
            result += char.lower()
        # Check if the character is lowercase
        elif char.islower():
            # Convert to uppercase and add to result
            result += char.upper()
        else:
            # If it's neither, just add the character as is
            result += char
            
    # Return the final toggled string
    return result


INFO - program_name:
 toggle_string

INFO - dependencies:
 []

INFO - raw_msg:
 1. **Restate the problem in plain English**: The task is to create a function that takes a string as input and returns a new string where all the characters have their case toggled. This means that uppercase letters should become lowercase and vice versa.

2. **Conceptualize a solution first in plain English**: To solve this problem, we can iterate through each character in the input string. For each character, we will check if it is uppercase or lowercase. If it is uppercase, we will convert it to lowercase, and if it is lowercase, we will convert it to uppercase. We will then collect these converted characters into a new string and return it.

3. **Write a pseudocode solution**:
   ```
   function toggle_string(input_string):
       create an empty result string
       for each character in input_string:
           if character is uppercase:
               convert character to lowercase and add to result
           else if character is lowercase:
               convert character to uppercase and add to result
           else:
               add character as is to result
       return result
   ```

4. **Output the final Python 3 solution with your solution steps in comments**:
```python
def toggle_string(input_string: str) -> str:
    # Create an empty result string to store the toggled characters
    result = ""
    
    # Iterate through each character in the input string
    for char in input_string:
        # Check if the character is uppercase
        if char.isupper():
            # Convert to lowercase and add to result
            result += char.lower()
        # Check if the character is lowercase
        elif char.islower():
            # Convert to uppercase and add to result
            result += char.upper()
        else:
            # If it's neither, just add the character as is
            result += char
            
    # Return the final toggled string
    return result
```

INFO - no_parent:
 True

INFO - full code to be executed: 
 
def toggle_string(input_string: str) -> str:
    # Create an empty result string to store the toggled characters
    result = ""
    
    # Iterate through each character in the input string
    for char in input_string:
        # Check if the character is uppercase
        if char.isupper():
            # Convert to lowercase and add to result
            result += char.lower()
        # Check if the character is lowercase
        elif char.islower():
            # Convert to uppercase and add to result
            result += char.upper()
        else:
            # If it's neither, just add the character as is
            result += char
            
    # Return the final toggled string
    return result


INFO - obs: Note: Tests are automatically generated and can be wrong.

Tests passed:
assert toggle_string("Python")==("pYTHON")

Tests failed:
None
reward: True
done: None
info: {'individual_results': (True,)}
INFO - acc:182/193 = 94.30%
