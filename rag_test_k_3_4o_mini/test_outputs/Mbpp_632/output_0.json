{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\nTests failed:\nNone",
    "code": "\ndef move_zero(lst):\n    # Create a list to hold non-zero elements\n    non_zero = []\n    # Count the number of zeros\n    zero_count = 0\n    \n    # Iterate through the original list\n    for num in lst:\n        if num != 0:\n            # If the number is not zero, add it to the non-zero list\n            non_zero.append(num)\n        else:\n            # If the number is zero, increment the zero count\n            zero_count += 1\n            \n    # Extend the non-zero list with the counted zeros\n    non_zero.extend([0] * zero_count)\n    \n    # Return the modified list with zeros at the end\n    return non_zero\n",
    "full_code": "\ndef move_zero(lst):\n    # Create a list to hold non-zero elements\n    non_zero = []\n    # Count the number of zeros\n    zero_count = 0\n    \n    # Iterate through the original list\n    for num in lst:\n        if num != 0:\n            # If the number is not zero, add it to the non-zero list\n            non_zero.append(num)\n        else:\n            # If the number is zero, increment the zero count\n            zero_count += 1\n            \n    # Extend the non-zero list with the counted zeros\n    non_zero.extend([0] * zero_count)\n    \n    # Return the modified list with zeros at the end\n    return non_zero\n",
    "reward": true,
    "program_code": "\ndef move_zero(lst):\n    # Create a list to hold non-zero elements\n    non_zero = []\n    # Count the number of zeros\n    zero_count = 0\n    \n    # Iterate through the original list\n    for num in lst:\n        if num != 0:\n            # If the number is not zero, add it to the non-zero list\n            non_zero.append(num)\n        else:\n            # If the number is zero, increment the zero count\n            zero_count += 1\n            \n    # Extend the non-zero list with the counted zeros\n    non_zero.extend([0] * zero_count)\n    \n    # Return the modified list with zeros at the end\n    return non_zero\n",
    "program_name": "move_zero",
    "dependencies": [],
    "raw_msg": "1. **Restatement of the Problem**: The task is to create a function that takes a list of integers and moves all occurrences of the number zero to the end of the list while maintaining the order of the non-zero elements.\n\n2. **Conceptualization of a Solution**: \n   - We can iterate through the list and collect all non-zero elements in a new list.\n   - After collecting the non-zero elements, we can append the appropriate number of zeros to the end of this new list.\n   - Finally, we return the new list which contains all non-zero elements followed by the zeros.\n\n3. **Pseudocode Solution**:\n   ```\n   function move_zero(lst):\n       create an empty list for non-zero elements\n       count the number of zeros\n       for each element in lst:\n           if the element is not zero:\n               add it to the non-zero list\n           else:\n               increment the zero count\n       append the zeros to the non-zero list based on the zero count\n       return the non-zero list\n   ```\n\n4. **Final Python 3 Solution**:\n```python\ndef move_zero(lst):\n    # Create a list to hold non-zero elements\n    non_zero = []\n    # Count the number of zeros\n    zero_count = 0\n    \n    # Iterate through the original list\n    for num in lst:\n        if num != 0:\n            # If the number is not zero, add it to the non-zero list\n            non_zero.append(num)\n        else:\n            # If the number is zero, increment the zero count\n            zero_count += 1\n            \n    # Extend the non-zero list with the counted zeros\n    non_zero.extend([0] * zero_count)\n    \n    # Return the modified list with zeros at the end\n    return non_zero\n```",
    "no_parent": true,
    "dependency_used": false
}