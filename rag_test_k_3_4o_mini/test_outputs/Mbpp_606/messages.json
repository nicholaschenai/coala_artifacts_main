[
    {
        "role": "system",
        "content": "\nYou are an expert programmer tasked with solving the problem below.\n\nFollow the user's instructions to solve the problem.\nThe user can ask for analysis, code, or both.\n\n## Instructions\nWhen asked to output code,\n- Make sure to wrap your code in '```python' and '```' Markdown delimiters, \n- include exactly one block of code with the entire solution\n- No outside libraries are allowed. \n- Builtins are allowed.\n- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).\n- DO NOT write any assert statements / tests.\n\n## Problem\n[BEGIN PROBLEM]\nWrite a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.\n\"\"\"\nWrite a function to convert degrees to radians.\nassert radian_degree(90)==1.5707963267948966\n\"\"\"\n\n[END PROBLEM]\n"
    },
    {
        "role": "user",
        "content": "\n## Instructions\n\nReason through the problem and:\n1. Restate the problem in plain English\n2. Conceptualize a solution first in plain English\n3. Write a pseudocode solution\n4. Output the final Python 3 solution with your solution steps in comments.\n\nMake sure to wrap your code in '```python' and '```' Markdown delimiters, \nand include exactly one block of code with the entire solution.\n\nNo outside libraries are allowed.\nBuiltins are allowed.\n"
    },
    {
        "role": "assistant",
        "content": "1. **Restate the problem in plain English**: \n   We need to create a function that converts an angle given in degrees to its equivalent in radians. The function should take a single input (the angle in degrees) and return the angle in radians.\n\n2. **Conceptualize a solution first in plain English**: \n   To convert degrees to radians, we can use the mathematical relationship that \u03c0 radians is equal to 180 degrees. Therefore, to convert degrees to radians, we can multiply the degree value by \u03c0 and then divide by 180. We can use the built-in constant `math.pi` for the value of \u03c0.\n\n3. **Write a pseudocode solution**:\n   ```\n   FUNCTION radian_degree(degrees):\n       SET pi = 3.141592653589793\n       SET radians = (degrees * pi) / 180\n       RETURN radians\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef radian_degree(degrees):\n    # Define the value of pi\n    pi = 3.141592653589793\n    # Convert degrees to radians using the formula\n    radians = (degrees * pi) / 180\n    # Return the calculated radians\n    return radians\n```"
    },
    {
        "role": "user",
        "content": "\nAlso, here are some of your memories.\nFeel free to use the given information to aid your problem solving process if necessary.\nDo not confuse the memories with the problem statement.\n\n## Memories\n\n[Textbook Reference Material]:\n    Chapter: Geometry\n    Section: Complex numbers\n    Part: 1/1\n    \\chapter{Geometry}\n\n    \\index{geometry}\n\n    In geometric problems, it is often challenging\n    to find a way to approach the problem so that\n    the solution to the problem can be conveniently implemented\n    and the number of special cases is small.\n\n    As an example, consider a problem where\n    we are given the vertices of a quadrilateral\n    (a polygon that has four vertices),\n    and our task is to calculate its area.\n    For example, a possible input for the problem is as follows:\n\n    \\begin{center}\n    \\begin{tikzpicture}[scale=0.45]\n\n    \\draw[fill] (6,2) circle [radius=0.1];\n    \\draw[fill] (5,6) circle [radius=0.1];\n    \\draw[fill] (2,5) circle [radius=0.1];\n    \\draw[fill] (1,1) circle [radius=0.1];\n    \\draw[thick] (6,2) -- (5,6) -- (2,5) -- (1,1) -- (6,2);\n    \\end{tikzpicture}\n    \\end{center}\n    One way to approach the problem is to divide\n    the quadrilateral into two triangles by a straight\n    line between two opposite vertices:\n    \\begin{center}\n    \\begin{tikzpicture}[scale=0.45]\n\n    \\draw[fill] (6,2) circle [radius=0.1];\n    \\draw[fill] (5,6) circle [radius=0.1];\n    \\draw[fill] (2,5) circle [radius=0.1];\n    \\draw[fill] (1,1) circle [radius=0.1];\n\n    \\draw[thick] (6,2) -- (5,6) -- (2,5) -- (1,1) -- (6,2);\n    \\draw[dashed,thick] (2,5) -- (6,2);\n    \\end{tikzpicture}\n    \\end{center}\n    After this, it suffices to sum the areas\n    of the triangles.\n    The area of a triangle can be calculated,\n    for example, using \\key{Heron's formula}\n    %\\footnote{Heron of Alexandria (c. 10--70) was a Greek mathematician.}\n    \\[ \\sqrt{s (s-a) (s-b) (s-c)},\\]\n    where $a$, $b$ and $c$ are the lengths\n    of the triangle's sides and\n    $s=(a+b+c)/2$.\n    \\index{Heron's formula}\n\n    This is a possible way to solve the problem,\n    but there is one pitfall:\n    how to divide the quadrilateral into triangles?\n    It turns out that sometimes we cannot just pick\n    two arbitrary opposite vertices.\n    For example, in the following situation,\n    the division line is \\emph{outside} the quadrilateral:\n    \\begin{center}\n    \\begin{tikzpicture}[scale=0.45]\n\n    \\draw[fill] (6,2) circle [radius=0.1];\n    \\draw[fill] (3,2) circle [radius=0.1];\n    \\draw[fill] (2,5) circle [radius=0.1];\n    \\draw[fill] (1,1) circle [radius=0.1];\n    \\draw[thick] (6,2) -- (3,2) -- (2,5) -- (1,1) -- (6,2);\n\n    \\draw[dashed,thick] (2,5) -- (6,2);\n    \\end{tikzpicture}\n    \\end{center}\n    However, another way to draw the line works:\n    \\begin{center}\n    \\begin{tikzpicture}[scale=0.45]\n\n    \\draw[fill] (6,2) circle [radius=0.1];\n    \\draw[fill] (3,2) circle [radius=0.1];\n    \\draw[fill] (2,5) circle [radius=0.1];\n    \\draw[fill] (1,1) circle [radius=0.1];\n    \\draw[thick] (6,2) -- (3,2) -- (2,5) -- (1,1) -- (6,2);\n\n    \\draw[dashed,thick] (3,2) -- (1,1);\n    \\end{tikzpicture}\n    \\end{center}\n    It is clear for a human which of the lines is the correct\n    choice, but the situation is difficult for a computer.\n                           \n    However, it turns out that we can solve the problem using\n    another method that is more convenient to a programmer.\n    Namely, there is a general formula\n    \\[x_1y_2-x_2y_1+x_2y_3-x_3y_2+x_3y_4-x_4y_3+x_4y_1-x_1y_4,\\]\n    that calculates the area of a quadrilateral\n    whose vertices are\n    $(x_1,y_1)$,\n    $(x_2,y_2)$,\n    $(x_3,y_3)$ and\n    $(x_4,y_4)$.\n    This formula is easy to implement, there are no special\n    cases, and we can even generalize the formula\n    to \\emph{all} polygons.\n\n    \\section{Complex numbers}\n\n    \\index{complex number}\n    \\index{point}\n    \\index{vector}\n\n    A \\key{complex number} is a number of the form $x+y i$,\n    where $i = \\sqrt{-1}$ is the \\key{imaginary unit}.\n    A geometric interpretation of a complex number is\n    that it represents a two-dimensional point $(x,y)$\n    or a vector from the origin to a point $(x,y)$.\n\n    For example, $4+2i$ corresponds to the\n    following point and vector:\n\n    \\begin{center}\n    \\begin{tikzpicture}[scale=0.45]\n\n    \\draw[->,thick] (-5,0)--(5,0);\n    \\draw[->,thick] (0,-5)--(0,5);\n\n    \\draw[fill] (4,2) circle [radius=0.1];\n    \\draw[->,thick] (0,0)--(4-0.1,2-0.1);\n\n    \\node at (4,2.8) {$(4,2)$};\n    \\end{tikzpicture}\n    \\end{center}\n\n    \\index{complex@\\texttt{complex}}\n\n    The C++ complex number class \\texttt{complex} is\n    useful when solving geometric problems.\n    Using the class we can represent points and vectors\n    as complex numbers, and the class contains tools\n    that are useful in geometry.\n\n    In the following code, \\texttt{C} is the type of\n    a coordinate and \\texttt{P} is the type of a point or a vector.\n    In addition, the code defines macros \\texttt{X} and \\texttt{Y}\n    that can be used to refer to x and y coordinates.\n\n    \\begin{lstlisting}\n    typedef long long C;\n    typedef complex<C> P;\n    #define X real()\n    #define Y imag()\n    \\end{lstlisting}\n\n    For example, the following code defines a point $p=(4,2)$\n    and prints its x and y coordinates:\n\n    \\begin{lstlisting}\n    P p = {4,2};\n    cout << p.X << \" \" << p.Y << \"\\n\"; // 4 2\n    \\end{lstlisting}\n\n    The following code defines vectors $v=(3,1)$ and $u=(2,2)$,\n    and after that calculates the sum $s=v+u$.\n\n    \\begin{lstlisting}\n    P v = {3,1};\n    P u = {2,2};\n    P s = v+u;\n    cout << s.X << \" \" << s.Y << \"\\n\"; // 5 3\n    \\end{lstlisting}\n\n    In practice,\n    an appropriate coordinate type is usually\n    \\texttt{long long} (integer) or \\texttt{long double}\n    (real number).\n    It is a good idea to use integer whenever possible,\n    because calculations with integers are exact.\n    If real numbers are needed,\n    precision errors should be taken into account\n    when comparing numbers.\n    A safe way to check if real numbers $a$ and $b$ are equal\n    is to compare them using $|a-b|<\\epsilon$,\n    where $\\epsilon$ is a small number (for example, $\\epsilon=10^{-9}$).\n\n    \\subsubsection*{Functions}\n\n    In the following examples, the coordinate type is\n    \\texttt{long double}.\n\n    The function $\\texttt{abs}(v)$ calculates the length\n    $|v|$ of a vector $v=(x,y)$\n    using the formula $\\sqrt{x^2+y^2}$.\n    The function can also be used for\n    calculating the distance between points\n    $(x_1,y_1)$ and $(x_2,y_2)$,\n    because that distance equals the length\n    of the vector $(x_2-x_1,y_2-y_1)$.\n\n    The following code calculates the distance\n    between points $(4,2)$ and $(3,-1)$:\n    \\begin{lstlisting}\n    P a = {4,2};\n    P b = {3,-1};\n    cout << abs(b-a) << \"\\n\"; // 3.16228\n    \\end{lstlisting}\n\n    The function $\\texttt{arg}(v)$ calculates the\n    angle of a vector $v=(x,y)$ with respect to the x axis.\n    The function gives the angle in radians,\n    where $r$ radians equals $180 r/\\pi$ degrees.\n    The angle of a vector that points to the right is 0,\n    and angles decrease clockwise and increase\n    counterclockwise.\n\n    The function $\\texttt{polar}(s,a)$ constructs a vector\n    whose length is $s$ and that points to an angle $a$.\n    A vector can be rotated by an angle $a$\n    by multiplying it by a vector with length 1 and angle $a$.\n\n    The following code calculates the angle of\n    the vector $(4,2)$, rotates it $1/2$ radians\n    counterclockwise, and then calculates the angle again:\n\n    \\begin{lstlisting}\n    P v = {4,2};\n    cout << arg(v) << \"\\n\"; // 0.463648\n    v *= polar(1.0,0.5);\n    cout << arg(v) << \"\\n\"; // 0.963648\n    \\end{lstlisting}\n[/Textbook Reference Material]\n\n\n[Textbook Reference Material]:\n    Chapter: Geometry\n    Section: Distance functions\n    Part: 1/1\n    \\section{Distance functions}\n\n    \\index{distance function}\n    \\index{Euclidean distance}\n    \\index{Manhattan distance}\n\n    A \\key{distance function} defines the distance between\n    two points.\n    The usual distance function is the\n    \\key{Euclidean distance} where the distance between\n    points $(x_1,y_1)$ and $(x_2,y_2)$ is\n    \\[\\sqrt{(x_2-x_1)^2+(y_2-y_1)^2}.\\]\n    An alternative distance function is the\n    \\key{Manhattan distance}\n    where the distance between points\n    $(x_1,y_1)$ and $(x_2,y_2)$ is\n    \\[|x_1-x_2|+|y_1-y_2|.\\]\n    \\begin{samepage}\n    For example, consider the following picture:\n    \\begin{center}\n    \\begin{tikzpicture}\n\n    \\draw[fill] (2,1) circle [radius=0.05];\n    \\draw[fill] (5,2) circle [radius=0.05];\n\n    \\node at (2,0.5) {$(2,1)$};\n    \\node at (5,1.5) {$(5,2)$};\n\n    \\draw[dashed] (2,1) -- (5,2);\n\n    \\draw[fill] (5+2,1) circle [radius=0.05];\n    \\draw[fill] (5+5,2) circle [radius=0.05];\n\n    \\node at (5+2,0.5) {$(2,1)$};\n    \\node at (5+5,1.5) {$(5,2)$};\n\n    \\draw[dashed] (5+2,1) -- (5+2,2);\n    \\draw[dashed] (5+2,2) -- (5+5,2);\n\n    \\node at (3.5,-0.5) {Euclidean distance};\n    \\node at (5+3.5,-0.5) {Manhattan distance};\n    \\end{tikzpicture}\n    \\end{center}\n    \\end{samepage}\n    The Euclidean distance between the points is\n    \\[\\sqrt{(5-2)^2+(2-1)^2}=\\sqrt{10}\\]\n    and the Manhattan distance is\n    \\[|5-2|+|2-1|=4.\\]\n    The following picture shows regions that are within a distance of 1\n    from the center point, using the Euclidean and Manhattan distances:\n    \\begin{center}\n    \\begin{tikzpicture}\n\n    \\draw[fill=gray!20] (0,0) circle [radius=1];\n    \\draw[fill] (0,0) circle [radius=0.05];\n\n    \\node at (0,-1.5) {Euclidean distance};\n\n    \\draw[fill=gray!20] (5+0,1) -- (5-1,0) -- (5+0,-1) -- (5+1,0) -- (5+0,1);\n    \\draw[fill] (5,0) circle [radius=0.05];\n    \\node at (5,-1.5) {Manhattan distance};\n    \\end{tikzpicture}\n    \\end{center}\n\n    \\subsubsection{Rotating coordinates}\n\n    Some problems are easier to solve if\n    Manhattan distances are used instead of Euclidean distances.\n    As an example, consider a problem where we are given\n    $n$ points in the two-dimensional plane\n    and our task is to calculate the maximum Manhattan\n    distance between any two points.\n\n    For example, consider the following set of points:\n    \\begin{center}\n    \\begin{tikzpicture}[scale=0.65]\n    \\draw[color=gray] (-1,-1) grid (4,4);\n\n    \\filldraw (0,2) circle (2.5pt);\n    \\filldraw (3,3) circle (2.5pt);\n    \\filldraw (1,0) circle (2.5pt);\n    \\filldraw (3,1) circle (2.5pt);\n\n    \\node at (0,1.5) {$A$};\n    \\node at (3,2.5) {$C$};\n    \\node at (1,-0.5) {$B$};\n    \\node at (3,0.5) {$D$};\n    \\end{tikzpicture}\n    \\end{center}\n    The maximum Manhattan distance is 5\n    between points $B$ and $C$:\n    \\begin{center}\n    \\begin{tikzpicture}[scale=0.65]\n    \\draw[color=gray] (-1,-1) grid (4,4);\n\n    \\filldraw (0,2) circle (2.5pt);\n    \\filldraw (3,3) circle (2.5pt);\n    \\filldraw (1,0) circle (2.5pt);\n    \\filldraw (3,1) circle (2.5pt);\n\n    \\node at (0,1.5) {$A$};\n    \\node at (3,2.5) {$C$};\n    \\node at (1,-0.5) {$B$};\n    \\node at (3,0.5) {$D$};\n\n    \\path[draw=red,thick,line width=2pt] (1,0) -- (1,3) -- (3,3);\n    \\end{tikzpicture}\n    \\end{center}\n\n    A useful technique related to Manhattan distances\n    is to rotate all coordinates 45 degrees so that\n    a point $(x,y)$ becomes $(x+y,y-x)$.\n    For example, after rotating the above points,\n    the result is:\n\n    \\begin{center}\n    \\begin{tikzpicture}[scale=0.6]\n    \\draw[color=gray] (0,-3) grid (7,3);\n\n    \\filldraw (2,2) circle (2.5pt);\n    \\filldraw (6,0) circle (2.5pt);\n    \\filldraw (1,-1) circle (2.5pt);\n    \\filldraw (4,-2) circle (2.5pt);\n\n    \\node at (2,1.5) {$A$};\n    \\node at (6,-0.5) {$C$};\n    \\node at (1,-1.5) {$B$};\n    \\node at (4,-2.5) {$D$};\n    \\end{tikzpicture}\n    \\end{center}\n    And the maximum distance is as follows:\n    \\begin{center}\n    \\begin{tikzpicture}[scale=0.6]\n    \\draw[color=gray] (0,-3) grid (7,3);\n\n    \\filldraw (2,2) circle (2.5pt);\n    \\filldraw (6,0) circle (2.5pt);\n    \\filldraw (1,-1) circle (2.5pt);\n    \\filldraw (4,-2) circle (2.5pt);\n\n    \\node at (2,1.5) {$A$};\n    \\node at (6,-0.5) {$C$};\n    \\node at (1,-1.5) {$B$};\n    \\node at (4,-2.5) {$D$};\n\n    \\path[draw=red,thick,line width=2pt] (1,-1) -- (4,2) -- (6,0);\n    \\end{tikzpicture}\n    \\end{center}\n\n    Consider two points $p_1=(x_1,y_1)$ and $p_2=(x_2,y_2)$ whose rotated\n    coordinates are $p'_1=(x'_1,y'_1)$ and $p'_2=(x'_2,y'_2)$.\n    Now there are two ways to express the Manhattan distance\n    between $p_1$ and $p_2$:\n    \\[|x_1-x_2|+|y_1-y_2| = \\max(|x'_1-x'_2|,|y'_1-y'_2|)\\]\n\n    For example, if $p_1=(1,0)$ and $p_2=(3,3)$,\n    the rotated coordinates are $p'_1=(1,-1)$ and $p'_2=(6,0)$\n    and the Manhattan distance is\n    \\[|1-3|+|0-3| = \\max(|1-6|,|-1-0|) = 5.\\]\n\n    The rotated coordinates provide a simple way\n    to operate with Manhattan distances, because we can\n    consider x and y coordinates separately.\n    To maximize the Manhattan distance between two points,\n    we should find two points whose\n    rotated coordinates maximize the value of\n    \\[\\max(|x'_1-x'_2|,|y'_1-y'_2|).\\]\n    This is easy, because either the horizontal or vertical\n    difference of the rotated coordinates has to be maximum.\n[/Textbook Reference Material]\n\n\n[Textbook Reference Material]:\n    Chapter: Number theory\n    Section: Solving equations\n    Part: 1/1\n    \\section{Solving equations}\n\n    \\subsubsection*{Diophantine equations}\n\n    \\index{Diophantine equation}\n\n    A \\key{Diophantine equation}\n    %\\footnote{Diophantus of Alexandria was a Greek mathematician who lived in the 3th century.}\n    is an equation of the form\n    \\[ ax + by = c, \\]\n    where $a$, $b$ and $c$ are constants\n    and the values of $x$ and $y$ should be found.\n    Each number in the equation has to be an integer.\n    For example, one solution for the equation\n    $5x+2y=11$ is $x=3$ and $y=-2$.\n\n    \\index{extended Euclid's algorithm}\n\n    We can efficiently solve a Diophantine equation\n    by using Euclid's algorithm.\n    It turns out that we can extend Euclid's algorithm\n    so that it will find numbers $x$ and $y$\n    that satisfy the following equation:\n    \\[\n    ax + by = \\textrm{gcd}(a,b)\n    \\]\n\n    A Diophantine equation can be solved if\n    $c$ is divisible by\n    $\\textrm{gcd}(a,b)$,\n    and otherwise it cannot be solved.\n\n    As an example, let us find numbers $x$ and $y$\n    that satisfy the following equation:\n    \\[\n    39x + 15y = 12\n    \\]\n    The equation can be solved, because\n    $\\textrm{gcd}(39,15)=3$ and $3 \\mid 12$.\n    When Euclid's algorithm calculates the\n    greatest common divisor of 39 and 15,\n    it produces the following sequence of function calls:\n    \\[\n    \\textrm{gcd}(39,15) = \\textrm{gcd}(15,9)\n    = \\textrm{gcd}(9,6) = \\textrm{gcd}(6,3)\n    = \\textrm{gcd}(3,0) = 3 \\]\n    This corresponds to the following equations:\n    \\[\n    \\begin{array}{lcl}\n    39 - 2 \\cdot 15 & = & 9 \\\\\n    15 - 1 \\cdot 9 & = & 6 \\\\\n    9 - 1 \\cdot 6 & = & 3 \\\\\n    \\end{array}\n    \\]\n    Using these equations, we can derive\n    \\[\n    39 \\cdot 2 + 15 \\cdot (-5) = 3\n    \\]\n    and by multiplying this by 4, the result is\n    \\[\n    39 \\cdot 8 + 15 \\cdot (-20) = 12,\n    \\]\n    so a solution to the equation is\n    $x=8$ and $y=-20$.\n\n    A solution to a Diophantine equation is not unique,\n    because we can form an infinite number of solutions\n    if we know one solution.\n    If a pair $(x,y)$ is a solution, then also all pairs\n    \\[(x+\\frac{kb}{\\textrm{gcd}(a,b)},y-\\frac{ka}{\\textrm{gcd}(a,b)})\\]\n    are solutions, where $k$ is any integer.\n\n    \\subsubsection{Chinese remainder theorem}\n\n    \\index{Chinese remainder theorem}\n\n    The \\key{Chinese remainder theorem} solves\n    a group of equations of the form\n    \\[\n    \\begin{array}{lcl}\n    x & = & a_1 \\bmod m_1 \\\\\n    x & = & a_2 \\bmod m_2 \\\\\n    \\cdots \\\\\n    x & = & a_n \\bmod m_n \\\\\n    \\end{array}\n    \\]\n    where all pairs of $m_1,m_2,\\ldots,m_n$ are coprime.\n\n    Let $x^{-1}_m$ be the inverse of $x$ modulo $m$, and\n    \\[ X_k = \\frac{m_1 m_2 \\cdots m_n}{m_k}.\\]\n    Using this notation, a solution to the equations is\n    \\[x = a_1 X_1 {X_1}^{-1}_{m_1} + a_2 X_2 {X_2}^{-1}_{m_2} + \\cdots + a_n X_n {X_n}^{-1}_{m_n}.\\]\n    In this solution, for each $k=1,2,\\ldots,n$,\n    \\[a_k X_k {X_k}^{-1}_{m_k} \\bmod m_k = a_k,\\]\n    because\n    \\[X_k {X_k}^{-1}_{m_k} \\bmod m_k = 1.\\]\n    Since all other terms in the sum are divisible by $m_k$,\n    they have no effect on the remainder,\n    and $x \\bmod m_k = a_k$.\n\n    For example, a solution for\n    \\[\n    \\begin{array}{lcl}\n    x & = & 3 \\bmod 5 \\\\\n    x & = & 4 \\bmod 7 \\\\\n    x & = & 2 \\bmod 3 \\\\\n    \\end{array}\n    \\]\n    is\n    \\[ 3 \\cdot 21 \\cdot 1 + 4 \\cdot 15 \\cdot 1 + 2 \\cdot 35 \\cdot 2 = 263.\\]\n\n    Once we have found a solution $x$,\n    we can create an infinite number of other solutions,\n    because all numbers of the form\n    \\[x+m_1 m_2 \\cdots m_n\\]\n    are solutions.\n[/Textbook Reference Material]\n\n"
    },
    {
        "role": "assistant",
        "content": "1. **Restate the problem in plain English**: The task is to create a function that converts an angle measured in degrees to its equivalent in radians. The function should take a single input (the angle in degrees) and return the angle in radians.\n\n2. **Conceptualize a solution first in plain English**: To convert degrees to radians, we can use the mathematical relationship that \u03c0 radians is equivalent to 180 degrees. Therefore, to convert degrees to radians, we can multiply the degree value by \u03c0 and then divide by 180. This will give us the radian equivalent of the input degree.\n\n3. **Write a pseudocode solution**:\n   ```\n   FUNCTION radian_degree(degrees):\n       SET radians = degrees * (\u03c0 / 180)\n       RETURN radians\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\n# Importing the constant pi from the math module\n# (Note: We will not use any external libraries, so we will define pi manually)\nPI = 3.141592653589793\n\n# Function to convert degrees to radians\ndef radian_degree(degrees):\n    # Calculate radians by multiplying degrees by (pi / 180)\n    radians = degrees * (PI / 180)\n    # Return the calculated radians\n    return radians\n```"
    },
    {
        "role": "user",
        "content": "\n[Environment Feedback]:\n    Note: Tests are automatically generated and can be wrong.\n\n    Tests passed:\n    assert radian_degree(90)==1.5707963267948966\n\n    Tests failed:\n    None\n[/Environment Feedback]\n"
    }
]