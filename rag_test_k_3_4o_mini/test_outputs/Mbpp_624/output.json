{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert is_upper(\"person\") ==\"PERSON\"\n\nTests failed:\nNone",
    "code": "\ndef is_upper(input_string: str) -> str:\n    # Create an empty result string to store the uppercase characters\n    result = \"\"\n    \n    # Iterate through each character in the input string\n    for char in input_string:\n        # Check if the character is a lowercase letter\n        if 'a' <= char <= 'z':\n            # Convert to uppercase by subtracting 32 from ASCII value\n            result += chr(ord(char) - 32)\n        else:\n            # If not a lowercase letter, keep it unchanged\n            result += char\n            \n    # Return the resulting uppercase string\n    return result\n",
    "full_code": "\ndef is_upper(input_string: str) -> str:\n    # Create an empty result string to store the uppercase characters\n    result = \"\"\n    \n    # Iterate through each character in the input string\n    for char in input_string:\n        # Check if the character is a lowercase letter\n        if 'a' <= char <= 'z':\n            # Convert to uppercase by subtracting 32 from ASCII value\n            result += chr(ord(char) - 32)\n        else:\n            # If not a lowercase letter, keep it unchanged\n            result += char\n            \n    # Return the resulting uppercase string\n    return result\n",
    "reward": true,
    "program_code": "\ndef is_upper(input_string: str) -> str:\n    # Create an empty result string to store the uppercase characters\n    result = \"\"\n    \n    # Iterate through each character in the input string\n    for char in input_string:\n        # Check if the character is a lowercase letter\n        if 'a' <= char <= 'z':\n            # Convert to uppercase by subtracting 32 from ASCII value\n            result += chr(ord(char) - 32)\n        else:\n            # If not a lowercase letter, keep it unchanged\n            result += char\n            \n    # Return the resulting uppercase string\n    return result\n",
    "program_name": "is_upper",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: The task is to create a Python function that takes a string as input and converts it to uppercase. The function should return the uppercase version of the string.\n\n2. **Conceptualize a solution first in plain English**: To convert a string to uppercase, we can iterate through each character of the string. For each character, we check if it is a lowercase letter (from 'a' to 'z'). If it is, we convert it to its corresponding uppercase letter by subtracting 32 from its ASCII value. If the character is not a lowercase letter, we leave it unchanged. Finally, we concatenate all the characters together to form the resulting uppercase string.\n\n3. **Write a pseudocode solution**:\n   ```\n   function is_upper(input_string):\n       create an empty result string\n       for each character in input_string:\n           if character is between 'a' and 'z':\n               convert character to uppercase by subtracting 32 from its ASCII value\n           append character (converted or not) to result string\n       return result string\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef is_upper(input_string: str) -> str:\n    # Create an empty result string to store the uppercase characters\n    result = \"\"\n    \n    # Iterate through each character in the input string\n    for char in input_string:\n        # Check if the character is a lowercase letter\n        if 'a' <= char <= 'z':\n            # Convert to uppercase by subtracting 32 from ASCII value\n            result += chr(ord(char) - 32)\n        else:\n            # If not a lowercase letter, keep it unchanged\n            result += char\n            \n    # Return the resulting uppercase string\n    return result\n```",
    "no_parent": true,
    "dependency_used": false
}