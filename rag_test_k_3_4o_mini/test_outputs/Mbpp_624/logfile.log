INFO - [test iter]: 254/378

INFO - The task prompt is Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a python function to convert a given string to uppercase.
ass...

INFO - Attempting task_id Mbpp/624
INFO - LM call n parse attempt 1 / 3

INFO - [Task id] Mbpp/624 [prompt] 
You are an expert programmer tasked with solving the problem below.

Follow the user's instructions to solve the problem.
The user can ask for analysis, code, or both.

## Instructions
When asked to output code,
- Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
- include exactly one block of code with the entire solution
- No outside libraries are allowed. 
- Builtins are allowed.
- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).
- DO NOT write any assert statements / tests.

## Problem
[BEGIN PROBLEM]
Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a python function to convert a given string to uppercase.
assert is_upper("person") =="PERSON"
"""

[END PROBLEM]

INFO - [Task id] Mbpp/624 [prompt] 
## Instructions

Reason through the problem and:
1. Restate the problem in plain English
2. Conceptualize a solution first in plain English
3. Write a pseudocode solution
4. Output the final Python 3 solution with your solution steps in comments.

Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
and include exactly one block of code with the entire solution.

No outside libraries are allowed.
Builtins are allowed.

INFO - [Task id] Mbpp/624 [generation text] 1. **Restate the problem in plain English**: 
   We need to create a function that takes a string as input and returns the same string but in uppercase letters.

2. **Conceptualize a solution first in plain English**: 
   To convert a string to uppercase, we can iterate through each character in the string, check if it is a lowercase letter, and if so, convert it to its uppercase equivalent. We can build a new string with these uppercase characters and return it.

3. **Write a pseudocode solution**:
   - Define a function named `is_upper` that takes a string `s` as an argument.
   - Initialize an empty string `result` to store the uppercase characters.
   - Loop through each character `char` in the string `s`.
     - If `char` is between 'a' and 'z', convert it to uppercase by using the formula `chr(ord(char) - 32)` and append it to `result`.
     - If `char` is not a lowercase letter, append it unchanged to `result`.
   - Return the `result` string.

4. **Output the final Python 3 solution**:
```python
def is_upper(s: str) -> str:
    # Initialize an empty string to hold the result
    result = ""
    
    # Loop through each character in the input string
    for char in s:
        # Check if the character is a lowercase letter
        if 'a' <= char <= 'z':
            # Convert to uppercase and append to result
            result += chr(ord(char) - 32)
        else:
            # Append the character unchanged
            result += char
            
    # Return the final uppercase string
    return result
```
INFO - [35m Rollout attempt 1/4[0m
INFO - [33m Retrieving 3 entries for db: semantic 
 [0m
INFO - Retrieved (score=0.5517):
Chapter: String algorithms
Section: Z-algorithm
Part: 3/3
$.
We already solved this problem efficiently
using string hashing, but the Z-algorithm
provides another way to solve the problem.

A usual idea in string processing is to
construct a string that consists of
multiple strings separated by s...


INFO - Retrieved (score=0.5518):
Title: Prefix function. Knuthâ€“Morrisâ€“Pratt algorithm
Part: 3/4
```

Here for each value of the prefix function we first count how many times it occurs in the array $\pi$, and then compute the final answers:
if we know that the length prefix $i$ appears exactly $\text{ans}[i]$ times, then this num...


INFO - Retrieved (score=0.5540):
Title: Z-function and its calculation
Part: 1/2
# Z-function and its calculation

Suppose we are given a string $s$ of length $n$. The **Z-function** for this string is an array of length $n$ where the $i$-th element is equal to the greatest number of characters starting from the position $i$ tha...


INFO - Retrieved (score=0.5517): 
[Textbook Reference Material]:
    Chapter: String algorithms
    Section: Z-algorithm
    Part: 3/3
    $.
    We already solved this problem efficiently
    using string hashing, but the Z-algorithm
    provides another way to solve the problem.

    A usual idea in string processing is to
   ...
INFO - Retrieved (score=0.5518): 
[Textbook Reference Material]:
    Title: Prefix function. Knuthâ€“Morrisâ€“Pratt algorithm
    Part: 3/4
    ```

    Here for each value of the prefix function we first count how many times it occurs in the array $\pi$, and then compute the final answers:
    if we know that the length prefix $i$ ...
INFO - Retrieved (score=0.5540): 
[Textbook Reference Material]:
    Title: Z-function and its calculation
    Part: 1/2
    # Z-function and its calculation

    Suppose we are given a string $s$ of length $n$. The **Z-function** for this string is an array of length $n$ where the $i$-th element is equal to the greatest number ...
INFO - LM call n parse attempt 1 / 3

INFO - [Task id] Mbpp/624 [prompt] 
You are an expert programmer tasked with solving the problem below.

Follow the user's instructions to solve the problem.
The user can ask for analysis, code, or both.

## Instructions
When asked to output code,
- Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
- include exactly one block of code with the entire solution
- No outside libraries are allowed. 
- Builtins are allowed.
- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).
- DO NOT write any assert statements / tests.

## Problem
[BEGIN PROBLEM]
Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a python function to convert a given string to uppercase.
assert is_upper("person") =="PERSON"
"""

[END PROBLEM]

INFO - [Task id] Mbpp/624 [prompt] 
## Instructions

Reason through the problem and:
1. Restate the problem in plain English
2. Conceptualize a solution first in plain English
3. Write a pseudocode solution
4. Output the final Python 3 solution with your solution steps in comments.

Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
and include exactly one block of code with the entire solution.

No outside libraries are allowed.
Builtins are allowed.

INFO - [Task id] Mbpp/624 [prompt] 
Also, here are some of your memories.
Feel free to use the given information to aid your problem solving process if necessary.
Do not confuse the memories with the problem statement.

## Memories

[Textbook Reference Material]:
    Chapter: String algorithms
    Section: Z-algorithm
    Part: 3/3
    $.
    We already solved this problem efficiently
    using string hashing, but the Z-algorithm
    provides another way to solve the problem.

    A usual idea in string processing is to
    construct a string that consists of
    multiple strings separated by special characters.
    In this problem, we can construct a string
    $p$\texttt{\#}$s$,
    where $p$ and $s$ are separated by a special
    character \texttt{\#} that does not occur
    in the strings.
    The Z-array of $p$\texttt{\#}$s$ tells us the positions
    where $p$ occurs in $s$,
    because such positions contain the length of $p$.

    For example, if $s=$\texttt{HATTIVATTI} and $p=$\texttt{ATT},
    the Z-array is as follows:

    \begin{center}
    \begin{tikzpicture}[scale=0.7]
    \draw (0,0) grid (14,2);

    \node at (0.5, 1.5) {A};
    \node at (1.5, 1.5) {T};
    \node at (2.5, 1.5) {T};
    \node at (3.5, 1.5) {\#};
    \node at (4.5, 1.5) {H};
    \node at (5.5, 1.5) {A};
    \node at (6.5, 1.5) {T};
    \node at (7.5, 1.5) {T};
    \node at (8.5, 1.5) {I};
    \node at (9.5, 1.5) {V};
    \node at (10.5, 1.5) {A};
    \node at (11.5, 1.5) {T};
    \node at (12.5, 1.5) {T};
    \node at (13.5, 1.5) {I};

    \node at (0.5, 0.5) {--};
    \node at (1.5, 0.5) {0};
    \node at (2.5, 0.5) {0};
    \node at (3.5, 0.5) {0};
    \node at (4.5, 0.5) {0};
    \node at (5.5, 0.5) {3};
    \node at (6.5, 0.5) {0};
    \node at (7.5, 0.5) {0};
    \node at (8.5, 0.5) {0};
    \node at (9.5, 0.5) {0};
    \node at (10.5, 0.5) {3};
    \node at (11.5, 0.5) {0};
    \node at (12.5, 0.5) {0};
    \node at (13.5, 0.5) {0};

    \footnotesize
    \node at (0.5, 2.5) {0};
    \node at (1.5, 2.5) {1};
    \node at (2.5, 2.5) {2};
    \node at (3.5, 2.5) {3};
    \node at (4.5, 2.5) {4};
    \node at (5.5, 2.5) {5};
    \node at (6.5, 2.5) {6};
    \node at (7.5, 2.5) {7};
    \node at (8.5, 2.5) {8};
    \node at (9.5, 2.5) {9};
    \node at (10.5, 2.5) {10};
    \node at (11.5, 2.5) {11};
    \node at (12.5, 2.5) {12};
    \node at (13.5, 2.5) {13};
    \end{tikzpicture}
    \end{center}

    The positions 5 and 10 contain the value 3,
    which means that the pattern \texttt{ATT}
    occurs in the corresponding positions
    of \texttt{HATTIVATTI}.

    The time complexity of the resulting algorithm
    is linear, because it suffices to construct
    the Z-array and go through its values.

    \subsubsection{Implementation}

    Here is a short implementation of the Z-algorithm
    that returns a vector that corresponds to the Z-array.

    \begin{lstlisting}
    vector<int> z(string s) {
        int n = s.size();
        vector<int> z(n);
        int x = 0, y = 0;
        for (int i = 1; i < n; i++) {
            z[i] = max(0,min(z[i-x],y-i+1));
            while (i+z[i] < n && s[z[i]] == s[i+z[i]]) {
                x = i; y = i+z[i]; z[i]++;
            }
        }
        return z;
    }
    \end{lstlisting}
[/Textbook Reference Material]


[Textbook Reference Material]:
    Title: Prefix function. Knuthâ€“Morrisâ€“Pratt algorithm
    Part: 3/4
    ```

    Here for each value of the prefix function we first count how many times it occurs in the array $\pi$, and then compute the final answers:
    if we know that the length prefix $i$ appears exactly $\text{ans}[i]$ times, then this number must be added to the number of occurrences of its longest suffix that is also a prefix.
    At the end we need to add $1$ to each result, since we also need to count the original prefixes also.

    Now let us consider the second problem.
    We apply the trick from Knuth-Morris-Pratt:
    we create the string $s + \# + t$ and compute its prefix function.
    The only differences to the first task is, that we are only interested in the prefix values that relate to the string $t$, i.e. $\pi[i]$ for $i \ge n + 1$.
    With those values we can perform the exact same computations as in the first task.

    ### The number of different substring in a string

    Given a string $s$ of length $n$.
    We want to compute the number of different substrings appearing in it.

    We will solve this problem iteratively.
    Namely we will learn, knowing the current number of different substrings, how to recompute this count by adding a character to the end.

    So let $k$ be the current number of different substrings in $s$, and we add the character $c$ to the end of $s$.
    Obviously some new substrings ending in $c$ will appear.
    We want to count these new substrings that didn't appear before.

    We take the string $t = s + c$ and reverse it.
    Now the task is transformed into computing how many prefixes there are that don't appear anywhere else.
    If we compute the maximal value of the prefix function $\pi_{\text{max}}$ of the reversed string $t$, then the longest prefix that appears in $s$ is $\pi_{\text{max}}$ long.
    Clearly also all prefixes of smaller length appear in it.

    Therefore the number of new substrings appearing when we add a new character $c$ is $|s| + 1 - \pi_{\text{max}}$.

    So for each character appended we can compute the number of new substrings in $O(n)$ times, which gives a time complexity of $O(n^2)$ in total.

    It is worth noting, that we can also compute the number of different substrings by appending the characters at the beginning, or by deleting characters from the beginning or the end.

    ### Compressing a string

    Given a string $s$ of length $n$.
    We want to find the shortest "compressed" representation of the string, i.e. we want to find a string $t$ of smallest length such that $s$ can be represented as a concatenation of one or more copies of $t$.

    It is clear, that we only need to find the length of $t$. Knowing the length, the answer to the problem will be the prefix of $s$ with this length.

    Let us compute the prefix function for $s$.
    Using the last value of it we define the value $k = n - \pi[n - 1]$.
    We will show, that if $k$ divides $n$, then $k$ will be the answer, otherwise there is no effective compression and the answer is $n$.

    Let $n$ be divisible by $k$.
    Then the string can be partitioned into blocks of the length $k$.
    By definition of the prefix function, the prefix of length $n - k$ will be equal with its suffix.
    But this means that the last block is equal to the block before.
    And the block before has to be equal to the block before it.
    And so on.
    As a result, it turns out that all blocks are equal, therefore we can compress the string $s$ to length $k$.

    Of course we still need to show that this is actually the optimum.
    Indeed, if there was a smaller compression than $k$, than the prefix function at the end would be greater than $n - k$.
    Therefore $k$ is really the answer.

    Now let us assume that $n$ is not divisible by $k$.
    We show that this implies that the length of the answer is $n$.
    We prove it by contradiction.
    Assuming there exists an answer, and the compression has length $p$ ($p$ divides $n$).
    Then the last value of the prefix function has to be greater than $n - p$, i.e. the suffix will partially cover the first block.
    Now consider the second block of the string.
    Since the prefix is equal with the suffix, and both the prefix and the suffix cover this block and their displacement relative to each other $k$ does not divide the block length $p$ (otherwise $k$ divides $n$), then all the characters of the block have to be identical.
    But then the string consists of only one character repeated over and over, hence we can compress it to a string of size $1$, which gives $k = 1$, and $k$ divides $n$.
    Contradiction.

    $$\overbrace{s_0 ~ s_1 ~ s_2 ~ s_3}^p ~ \overbrace{s_4 ~ s_5 ~ s_6 ~ s_7}^p$$

    $$s_0 ~ s_1 ~ s_2 ~ \underbrace{\overbrace{s_3 ~ s_4 ~ s_5 ~ s_6}^p ~ s_7}_{\pi[7] = 5}$$

    $$s_4 = s_3, ~ s_5 = s_4, ~ s_6 = s_5, ~ s_7 = s_6 ~ \Rightarrow ~ s_0 = s_1 = s_2 = s_3$$

    ### Building an automaton according to the prefix function

    Let's return to the concatenation to the two strings through a separator, i.e. for the strings $s$ and $t$ we compute the prefix function for the string $s + \# + t$.
    Obviously, since $\#$ is a separator, the value of the prefix function will never exceed $|s|$.
    It follows, that it is sufficient to only store the string $s + \#$ and the values of the prefix function for it, and we can compute the prefix function for all subsequent character on the fly:

    $$\underbrace{s_0 ~ s_1 ~ \dots ~ s_{n-1} ~ \#}_{\text{need to store}} ~ \underbrace{t_0 ~ t_1 ~ \dots ~ t_{m-1}}_{\text{do not need to store}}$$

    Indeed, in such a situation, knowing the next character $c \in t$ and the value of the prefix function of the previous position is enough information to compute the next value of the prefix function, without using any previous characters of the string $t$ and the value of the prefix function in them.

    In other words, we can construct an **automaton** (a finite state machine): the state in it is the current value of the prefix function, and the transition from one state to another will be performed via the next character.

    Thus, even without having the string $t$, we can construct such a transition table $(\text{old}_\pi, c) \rightarrow \text{new}_\pi$ using the same algorithm as for calculating the transition table:

    ```{.cpp file=prefix_automaton_slow}
    void compute_automaton(string s, vector<vector<int>>& aut) {
        s += '#';
        int n = s.size();
        vector<int> pi = prefix_function(s);
        aut.assign(n, vector<int>(26));
        for (int i = 0; i < n; i++) {
            for (int c = 0; c < 26; c++) {
                int j = i;
                while (j > 0 && 'a' + c != s[j])
                    j = pi[j-1];
                if ('a' + c == s[j])
                    j++;
                aut[i][c] = j;
            }
        }
    }
    ```

    However in this form the algorithm runs in $O(n^2 26)$ time for the lowercase letters of the alphabet.
    Note that we can apply dynamic programming and use the already calculated parts of the table.
    Whenever we go from the value $j$ to the value $\pi[j-1]$, we actually mean that the transition $(j, c)$ leads to the same state as the transition as $(\pi[j-1], c)$, and this answer is already accurately computed.

    ```{.cpp file=prefix_automaton_fast}
    void compute_automaton(string s, vector<vector<int>>& aut) {
        s += '#';
        int n = s.size();
        vector<int> pi = prefix_function(s);
        aut.assign(n, vector<int>(26));
        for (int i = 0; i < n; i++) {
            for (int c = 0; c < 26; c++) {
                if (i > 0 && 'a' + c != s[i])
                    aut[i][c] = aut[pi[i-1]][c];
                else
                    aut[i][c] = i + ('a' + c == s[i]);
            }
        }
    }
[/Textbook Reference Material]


[Textbook Reference Material]:
    Title: Z-function and its calculation
    Part: 1/2
    # Z-function and its calculation

    Suppose we are given a string $s$ of length $n$. The **Z-function** for this string is an array of length $n$ where the $i$-th element is equal to the greatest number of characters starting from the position $i$ that coincide with the first characters of $s$.

    In other words, $z[i]$ is the length of the longest string that is, at the same time, a prefix of $s$ and a prefix of the suffix of $s$ starting at $i$.

    **Note.** In this article, to avoid ambiguity, we assume $0$-based indexes; that is: the first character of $s$ has index $0$ and the last one has index $n-1$.

    The first element of Z-function, $z[0]$, is generally not well defined. In this article we will assume it is zero (although it doesn't change anything in the algorithm implementation).

    This article presents an algorithm for calculating the Z-function in $O(n)$ time, as well as various of its applications.

    ## Examples

    For example, here are the values of the Z-function computed for different strings:

    * "aaaaa" - $[0, 4, 3, 2, 1]$
    * "aaabaab" - $[0, 2, 1, 0, 2, 1, 0]$
    * "abacaba" - $[0, 0, 1, 0, 3, 0, 1]$

    ## Trivial algorithm

    Formal definition can be represented in the following elementary $O(n^2)$ implementation.

    ```cpp
    vector<int> z_function_trivial(string s) {
    	int n = s.size();
    	vector<int> z(n);
    	for (int i = 1; i < n; i++) {
    		while (i + z[i] < n && s[z[i]] == s[i + z[i]]) {
    			z[i]++;
    		}
    	}
    	return z;
    }
    ```

    We just iterate through every position $i$ and update $z[i]$ for each one of them, starting from $z[i] = 0$ and incrementing it as long as we don't find a mismatch (and as long as we don't reach the end of the line).

    Of course, this is not an efficient implementation. We will now show the construction of an efficient implementation.

    ## Efficient algorithm to compute the Z-function

    To obtain an efficient algorithm we will compute the values of $z[i]$ in turn from $i = 1$ to $n - 1$ but at the same time, when computing a new value, we'll try to make the best use possible of the previously computed values.

    For the sake of brevity, let's call **segment matches** those substrings that coincide with a prefix of $s$. For example, the value of the desired Z-function $z[i]$ is the length of the segment match starting at position $i$ (and that ends at position $i + z[i] - 1$).

    To do this, we will keep **the $[l, r)$ indices of the rightmost segment match**. That is, among all detected segments we will keep the one that ends rightmost. In a way, the index $r$ can be seen as the "boundary" to which our string $s$ has been scanned by the algorithm; everything beyond that point is not yet known.

    Then, if the current index (for which we have to compute the next value of the Z-function) is $i$, we have one of two options:

    *   $i \geq r$ -- the current position is **outside** of what we have already processed.

        We will then compute $z[i]$ with the **trivial algorithm** (that is, just comparing values one by one). Note that in the end, if $z[i] > 0$, we'll have to update the indices of the rightmost segment, because it's guaranteed that the new $r = i + z[i]$ is better than the previous $r$.

    *   $i < r$ -- the current position is inside the current segment match $[l, r)$.

        Then we can use the already calculated Z-values to "initialize" the value of $z[i]$ to something (it sure is better than "starting from zero"), maybe even some big number.

        For this, we observe that the substrings $s[l \dots r)$ and $s[0 \dots r-l)$ **match**. This means that as an initial approximation for $z[i]$ we can take the value already computed for the corresponding segment $s[0 \dots r-l)$, and that is $z[i-l]$.

        However, the value $z[i-l]$ could be too large: when applied to position $i$ it could exceed the index $r$. This is not allowed because we know nothing about the characters to the right of $r$: they may differ from those required.

        Here is **an example** of a similar scenario:

        $$ s = "aaaabaa" $$

        When we get to the last position ($i = 6$), the current match segment will be $[5, 7)$. Position $6$ will then match position $6 - 5 = 1$, for which the value of the Z-function is $z[1] = 3$. Obviously, we cannot initialize $z[6]$ to $3$, it would be completely incorrect. The maximum value we could initialize it to is $1$ -- because it's the largest value that doesn't bring us beyond the index $r$ of the match segment $[l, r)$.

        Thus, as an **initial approximation** for $z[i]$ we can safely take:

        $$ z_0[i] = \min(r - i,\; z[i-l]) $$

        After having $z[i]$ initialized to $z_0[i]$, we try to increment $z[i]$ by running the **trivial algorithm** -- because in general, after the border $r$, we cannot know if the segment will continue to match or not.

    Thus, the whole algorithm is split in two cases, which differ only in **the initial value** of $z[i]$: in the first case it's assumed to be zero, in the second case it is determined by the previously computed values (using the above formula). After that, both branches of this algorithm can be reduced to the implementation of **the trivial algorithm**, which starts immediately after we specify the initial value.

    The algorithm turns out to be very simple. Despite the fact that on each iteration the trivial algorithm is run, we have made significant progress, having an algorithm that runs in linear time. Later on we will prove that the running time is linear.

    ## Implementation

    Implementation turns out to be rather concise:

    ```cpp
    vector<int> z_function(string s) {
        int n = s.size();
        vector<int> z(n);
        int l = 0, r = 0;
        for(int i = 1; i < n; i++) {
            if(i < r) {
                z[i] = min(r - i, z[i - l]);
            }
            while(i + z[i] < n && s[z[i]] == s[i + z[i]]) {
                z[i]++;
            }
            if(i + z[i] > r) {
                l = i;
                r = i + z[i];
            }
        }
        return z;
    }
[/Textbook Reference Material]


INFO - [Task id] Mbpp/624 [generation text] 1. **Restate the problem in plain English**: The task is to create a Python function that takes a string as input and converts it to uppercase. The function should return the uppercase version of the string.

2. **Conceptualize a solution first in plain English**: To convert a string to uppercase, we can iterate through each character of the string. For each character, we check if it is a lowercase letter (from 'a' to 'z'). If it is, we convert it to its corresponding uppercase letter by subtracting 32 from its ASCII value. If the character is not a lowercase letter, we leave it unchanged. Finally, we concatenate all the characters together to form the resulting uppercase string.

3. **Write a pseudocode solution**:
   ```
   function is_upper(input_string):
       create an empty result string
       for each character in input_string:
           if character is between 'a' and 'z':
               convert character to uppercase by subtracting 32 from its ASCII value
           append character (converted or not) to result string
       return result string
   ```

4. **Output the final Python 3 solution with your solution steps in comments**:
```python
def is_upper(input_string: str) -> str:
    # Create an empty result string to store the uppercase characters
    result = ""
    
    # Iterate through each character in the input string
    for char in input_string:
        # Check if the character is a lowercase letter
        if 'a' <= char <= 'z':
            # Convert to uppercase by subtracting 32 from ASCII value
            result += chr(ord(char) - 32)
        else:
            # If not a lowercase letter, keep it unchanged
            result += char
            
    # Return the resulting uppercase string
    return result
```
INFO - program_code:
 
def is_upper(input_string: str) -> str:
    # Create an empty result string to store the uppercase characters
    result = ""
    
    # Iterate through each character in the input string
    for char in input_string:
        # Check if the character is a lowercase letter
        if 'a' <= char <= 'z':
            # Convert to uppercase by subtracting 32 from ASCII value
            result += chr(ord(char) - 32)
        else:
            # If not a lowercase letter, keep it unchanged
            result += char
            
    # Return the resulting uppercase string
    return result


INFO - program_name:
 is_upper

INFO - dependencies:
 []

INFO - raw_msg:
 1. **Restate the problem in plain English**: The task is to create a Python function that takes a string as input and converts it to uppercase. The function should return the uppercase version of the string.

2. **Conceptualize a solution first in plain English**: To convert a string to uppercase, we can iterate through each character of the string. For each character, we check if it is a lowercase letter (from 'a' to 'z'). If it is, we convert it to its corresponding uppercase letter by subtracting 32 from its ASCII value. If the character is not a lowercase letter, we leave it unchanged. Finally, we concatenate all the characters together to form the resulting uppercase string.

3. **Write a pseudocode solution**:
   ```
   function is_upper(input_string):
       create an empty result string
       for each character in input_string:
           if character is between 'a' and 'z':
               convert character to uppercase by subtracting 32 from its ASCII value
           append character (converted or not) to result string
       return result string
   ```

4. **Output the final Python 3 solution with your solution steps in comments**:
```python
def is_upper(input_string: str) -> str:
    # Create an empty result string to store the uppercase characters
    result = ""
    
    # Iterate through each character in the input string
    for char in input_string:
        # Check if the character is a lowercase letter
        if 'a' <= char <= 'z':
            # Convert to uppercase by subtracting 32 from ASCII value
            result += chr(ord(char) - 32)
        else:
            # If not a lowercase letter, keep it unchanged
            result += char
            
    # Return the resulting uppercase string
    return result
```

INFO - no_parent:
 True

INFO - full code to be executed: 
 
def is_upper(input_string: str) -> str:
    # Create an empty result string to store the uppercase characters
    result = ""
    
    # Iterate through each character in the input string
    for char in input_string:
        # Check if the character is a lowercase letter
        if 'a' <= char <= 'z':
            # Convert to uppercase by subtracting 32 from ASCII value
            result += chr(ord(char) - 32)
        else:
            # If not a lowercase letter, keep it unchanged
            result += char
            
    # Return the resulting uppercase string
    return result


INFO - obs: Note: Tests are automatically generated and can be wrong.

Tests passed:
assert is_upper("person") =="PERSON"

Tests failed:
None
reward: True
done: None
info: {'individual_results': (True,)}
INFO - acc:238/254 = 93.70%
