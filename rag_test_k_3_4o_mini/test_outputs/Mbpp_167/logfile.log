INFO - [test iter]: 44/378

INFO - The task prompt is Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a python function to find the smallest power of 2 greater tha...

INFO - Attempting task_id Mbpp/167
INFO - LM call n parse attempt 1 / 3

INFO - [Task id] Mbpp/167 [prompt] 
You are an expert programmer tasked with solving the problem below.

Follow the user's instructions to solve the problem.
The user can ask for analysis, code, or both.

## Instructions
When asked to output code,
- Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
- include exactly one block of code with the entire solution
- No outside libraries are allowed. 
- Builtins are allowed.
- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).
- DO NOT write any assert statements / tests.

## Problem
[BEGIN PROBLEM]
Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a python function to find the smallest power of 2 greater than or equal to n.
assert next_power_of_2(0) == 1
"""

[END PROBLEM]

INFO - [Task id] Mbpp/167 [prompt] 
## Instructions

Reason through the problem and:
1. Restate the problem in plain English
2. Conceptualize a solution first in plain English
3. Write a pseudocode solution
4. Output the final Python 3 solution with your solution steps in comments.

Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
and include exactly one block of code with the entire solution.

No outside libraries are allowed.
Builtins are allowed.

INFO - [Task id] Mbpp/167 [generation text] 1. **Restate the problem in plain English**: 
   We need to create a function that takes a non-negative integer `n` and returns the smallest power of 2 that is greater than or equal to `n`. For example, if `n` is 0, the function should return 1, since 2^0 = 1 is the smallest power of 2.

2. **Conceptualize a solution first in plain English**: 
   To find the smallest power of 2 that is greater than or equal to `n`, we can start with the smallest power of 2 (which is 1) and keep multiplying by 2 until we reach or exceed `n`. We can use a loop to achieve this, starting from 1 and doubling the value until it is no longer less than `n`.

3. **Write a pseudocode solution**:
   ```
   function next_power_of_2(n):
       if n is 0:
           return 1
       power = 1
       while power < n:
           power = power * 2
       return power
   ```

4. **Output the final Python 3 solution with your solution steps in comments**:
```python
def next_power_of_2(n: int) -> int:
    # If n is 0, the smallest power of 2 is 1
    if n == 0:
        return 1
    
    # Start with the smallest power of 2
    power = 1
    
    # Keep doubling the power until it is greater than or equal to n
    while power < n:
        power *= 2
    
    # Return the found power of 2
    return power
```
INFO - [35m Rollout attempt 1/4[0m
INFO - [33m Retrieving 3 entries for db: semantic 
 [0m
INFO - Retrieved (score=0.4516):
Title: Bit manipulation
Part: 1/2
# Bit manipulation

## Binary number

A **binary number** is a number expressed in the base-2 numeral system or binary numeral system, it is a method of mathematical expression which uses only two symbols: typically "0" (zero) and "1" (one).

We say that a certai...


INFO - Retrieved (score=0.4561):
Title: Finding Power of Factorial Divisor
Part: 1/1
# Finding Power of Factorial Divisor

You are given two numbers $n$ and $k$. Find the largest power of $k$ $x$ such that $n!$ is divisible by $k^x$.

## Prime $k$ {data-toc-label="Prime k"}

Let's first consider the case of prime $k$. The explic...


INFO - Retrieved (score=0.4607):
Title: Binary Exponentiation
Part: 1/2
# Binary Exponentiation

Binary exponentiation (also known as exponentiation by squaring) is a trick which allows to calculate $a^n$ using only $O(\log n)$ multiplications (instead of $O(n)$ multiplications required by the naive approach).

It also has impor...


INFO - Retrieved (score=0.4516): 
[Textbook Reference Material]:
    Title: Bit manipulation
    Part: 1/2
    # Bit manipulation

    ## Binary number

    A **binary number** is a number expressed in the base-2 numeral system or binary numeral system, it is a method of mathematical expression which uses only two symbols: typic...
INFO - Retrieved (score=0.4561): 
[Textbook Reference Material]:
    Title: Finding Power of Factorial Divisor
    Part: 1/1
    # Finding Power of Factorial Divisor

    You are given two numbers $n$ and $k$. Find the largest power of $k$ $x$ such that $n!$ is divisible by $k^x$.

    ## Prime $k$ {data-toc-label="Prime k"}

  ...
INFO - Retrieved (score=0.4607): 
[Textbook Reference Material]:
    Title: Binary Exponentiation
    Part: 1/2
    # Binary Exponentiation

    Binary exponentiation (also known as exponentiation by squaring) is a trick which allows to calculate $a^n$ using only $O(\log n)$ multiplications (instead of $O(n)$ multiplications req...
INFO - LM call n parse attempt 1 / 3

INFO - [Task id] Mbpp/167 [prompt] 
You are an expert programmer tasked with solving the problem below.

Follow the user's instructions to solve the problem.
The user can ask for analysis, code, or both.

## Instructions
When asked to output code,
- Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
- include exactly one block of code with the entire solution
- No outside libraries are allowed. 
- Builtins are allowed.
- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).
- DO NOT write any assert statements / tests.

## Problem
[BEGIN PROBLEM]
Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a python function to find the smallest power of 2 greater than or equal to n.
assert next_power_of_2(0) == 1
"""

[END PROBLEM]

INFO - [Task id] Mbpp/167 [prompt] 
## Instructions

Reason through the problem and:
1. Restate the problem in plain English
2. Conceptualize a solution first in plain English
3. Write a pseudocode solution
4. Output the final Python 3 solution with your solution steps in comments.

Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
and include exactly one block of code with the entire solution.

No outside libraries are allowed.
Builtins are allowed.

INFO - [Task id] Mbpp/167 [prompt] 
Also, here are some of your memories.
Feel free to use the given information to aid your problem solving process if necessary.
Do not confuse the memories with the problem statement.

## Memories

[Textbook Reference Material]:
    Title: Bit manipulation
    Part: 1/2
    # Bit manipulation

    ## Binary number

    A **binary number** is a number expressed in the base-2 numeral system or binary numeral system, it is a method of mathematical expression which uses only two symbols: typically "0" (zero) and "1" (one).

    We say that a certain bit is **set**, if it is one, and **cleared** if it is zero.

    The binary number $(a_k a_{k-1} \dots a_1 a_0)_2$ represents the number:

    $$(a_k a_{k-1} \dots a_1 a_0)_2 = a_k \cdot 2^k + a_{k-1} \cdot 2^{k-1} + \dots + a_1 \cdot 2^1 + a_0 \cdot 2^0.$$

    For instance the binary number $1101_2$ represents the number $13$:

    $$\begin{align}
    1101_2 &= 1 \cdot 2^3 + 1 \cdot 2^2 + 0 \cdot 2^1 + 1 \cdot 2^0 \\
           &= 1\cdot 8 + 1 \cdot 4 + 0 \cdot 2 + 1 \cdot 1 = 13
    \end{align}$$

    Computers represent integers as binary numbers.
    Positive integers (both signed and unsigned) are just represented with their binary digits, and negative signed numbers (which can be positive and negative) are usually represented with the [Two's complement](https://en.wikipedia.org/wiki/Two%27s_complement).

    ```cpp
    unsigned int unsigned_number = 13;
    assert(unsigned_number == 0b1101);

    int positive_signed_number = 13;
    assert(positive_signed_number == 0b1101);

    int negative_signed_number = -13;
    assert(negative_signed_number == 0b1111'1111'1111'1111'1111'1111'1111'0011);
    ```

    CPUs are very fast manipulating those bits with specific operations.
    For some problems we can take these binary number representations to our advantage, and speed up the execution time.
    And for some problems (typically in combinatorics or dynamic programming) where we want to track which objects we already picked from a given set of objects, we can just use an large enough integer where each digit represents an object and depending on if we pick or drop the object we set or clear the digit.

    ## Bit operators

    All those introduced operators are instant (same speed as an addition) on a CPU for fixed-length integers.

    ### Bitwise operators

    -   $\&$ : The bitwise AND operator compares each bit of its first operand with the corresponding bit of its second operand. 
        If both bits are 1, the corresponding result bit is set to 1. Otherwise, the corresponding result bit is set to 0.
 	
    -   $|$ : The bitwise inclusive OR operator compares each bit of its first operand with the corresponding bit of its second operand.
        If one of the two bits is 1, the corresponding result bit is set to 1. Otherwise, the corresponding result bit is set to 0.

    -   $\wedge$ : The bitwise exclusive OR (XOR) operator compares each bit of its first operand with the corresponding bit of its second operand.
        If one bit is 0 and the other bit is 1, the corresponding result bit is set to 1. Otherwise, the corresponding result bit is set to 0.

    -   $\sim$ : The bitwise complement (NOT) operator flips each bit of a number, if a bit is set the operator will clear it, if it is cleared the operator sets it.

    Examples:

    ```
    n         = 01011000
    n-1       = 01010111
    --------------------
    n & (n-1) = 01010000
    ```

    ```
    n         = 01011000
    n-1       = 01010111
    --------------------
    n | (n-1) = 01011111
    ```

    ```
    n         = 01011000
    n-1       = 01010111
    --------------------
    n ^ (n-1) = 00001111
    ```

    ```
    n         = 01011000
    --------------------
    ~n        = 10100111
    ```

    ### Shift operators

    There are two operators for shifting bits.

    -   $\gg$ Shifts a number to the right by removing the last few binary digits of the number.
        Each shift by one represents an integer division by 2, so a right shift by $k$ represents an integer division by $2^k$.

        E.g. $5 \gg 2 = 101_2 \gg 2 = 1_2 = 1$ which is the same as $\frac{5}{2^2} = \frac{5}{4} = 1$.
        For a computer though shifting some bits is a lot faster than doing divisions.

    -   $\ll$ Shifts a number to left by appending zero digits.
        In similar fashion to a right shift by $k$, a left shift by $k$ represents a multiplication by $2^k$.

        E.g. $5 \ll 3 = 101_2 \ll 3 = 101000_2 = 40$ which is the same as $5 \cdot 2^3 = 5 \cdot 8 = 40$.

        Notice however that for a fixed-length integer that means dropping the most left digits, and if you shift too much you end up with the number $0$.


    ## Useful tricks

    ### Set/flip/clear a bit

    Using bitwise shifts and some basic bitwise operations we can easily set, flip or clear a bit.
    $1 \ll x$ is a number with only the $x$-th bit set, while $\sim(1 \ll x)$ is a number with all bits set except the $x$-th bit.

    - $n ~|~ (1 \ll x)$ sets the $x$-th bit in the number $n$
    - $n ~\wedge~ (1 \ll x)$ flips the $x$-th bit in the number $n$
    - $n ~\&~ \sim(1 \ll x)$ clears the $x$-th bit in the number $n$

    ### Check if a bit is set

    The value of the $x$-th bit can be checked by shifting the number $x$ positions to the right, so that the $x$-th bit is at the unit place, after which we can extract it by performing a bitwise & with 1.

    ``` cpp
    bool is_set(unsigned int number, int x) {
        return (number >> x) & 1;
    }
    ```

    ### Check if an integer is a power of 2

    A power of two is a number that has only a single bit in it (e.g. $32 = 0010~0000_2$), while the predecessor of that number has that digit not set and all the digits after it set ($31 = 0001~1111_2$).
    So the bitwise AND of a number with it's predecessor will always be 0, as they don't have any common digits set.
    You can easily check that this only happens for the the power of twos and for the number $0$ which already has no digit set.

    ``` cpp
    bool isPowerOfTwo(unsigned int n) {
        return n && !(n & (n - 1));
    }
    ```

    ### Clear the most-right set bit

    The expression $n ~\&~ (n-1)$ can be used to turn off the rightmost set bit of a number $n$.
    This works because the expression $n-1$ flips all bits after the rightmost set bit of $n$, including the rightmost set bit.
    So all those digits are different from the original number, and by doing a bitwise AND they are all set to 0, giving you the original number $n$ with the rightmost set bit flipped.

    For example, consider the number $52 = 0011~0100_2$:

    ```
    n         = 00110100
    n-1       = 00110011
    --------------------
    n & (n-1) = 00110000
    ```

    ### Brian Kernighan's algorithm

    We can count the number of bits set with the above expression.

    The idea is to consider only the set bits of an integer by turning off its rightmost set bit (after counting it), so the next iteration of the loop considers the Next Rightmost bit.

    ``` cpp
    int countSetBits(int n)
    {
        int count = 0;
        while (n)
        {
            n = n & (n - 1);
            count++;
        }
        return count;
    }
[/Textbook Reference Material]


[Textbook Reference Material]:
    Title: Finding Power of Factorial Divisor
    Part: 1/1
    # Finding Power of Factorial Divisor

    You are given two numbers $n$ and $k$. Find the largest power of $k$ $x$ such that $n!$ is divisible by $k^x$.

    ## Prime $k$ {data-toc-label="Prime k"}

    Let's first consider the case of prime $k$. The explicit expression for factorial

    $$n! = 1 \cdot 2 \cdot 3 \ldots (n-1) \cdot n$$

    Note that every $k$-th element of the product is divisible by $k$, i.e. adds $+1$ to the answer; the number of such elements is $\Bigl\lfloor\dfrac{n}{k}\Bigr\rfloor$.

    Next, every $k^2$-th element is divisible by $k^2$, i.e. adds another $+1$ to the answer (the first power of $k$ has already been counted in the previous paragraph). The number of such elements is $\Bigl\lfloor\dfrac{n}{k^2}\Bigr\rfloor$.

    And so on, for every $i$ each $k^i$-th element adds another $+1$ to the answer, and there are $\Bigl\lfloor\dfrac{n}{k^i}\Bigr\rfloor$ such elements.

    The final answer is

    $$\Bigl\lfloor\dfrac{n}{k}\Bigr\rfloor + \Bigl\lfloor\dfrac{n}{k^2}\Bigr\rfloor + \ldots + \Bigl\lfloor\dfrac{n}{k^i}\Bigr\rfloor + \ldots$$

    This result is also known as [Legendre's formula](https://en.wikipedia.org/wiki/Legendre%27s_formula).
    The sum is of course finite, since only approximately the first $\log_k n$ elements are not zeros. Thus, the runtime of this algorithm is $O(\log_k n)$.

    ### Implementation

    ```cpp

    int fact_pow (int n, int k) {
    	int res = 0;
    	while (n) {
    		n /= k;
    		res += n;
    	}
    	return res;
    }

    ```

    ## Composite $k$ {data-toc-label="Composite k"}

    The same idea can't be applied directly. Instead we can factor $k$, representing it as $k = k_1^{p_1} \cdot \ldots \cdot k_m^{p_m}$. For each $k_i$, we find the number of times it is present in $n!$ using the algorithm described above - let's call this value $a_i$. The answer for composite $k$ will be

    $$\min_ {i=1 \ldots m} \dfrac{a_i}{p_i}$$
[/Textbook Reference Material]


[Textbook Reference Material]:
    Title: Binary Exponentiation
    Part: 1/2
    # Binary Exponentiation

    Binary exponentiation (also known as exponentiation by squaring) is a trick which allows to calculate $a^n$ using only $O(\log n)$ multiplications (instead of $O(n)$ multiplications required by the naive approach).

    It also has important applications in many tasks unrelated to arithmetic, since it
    can be used with any operations that have the property of **associativity**:

    $$(X \cdot Y) \cdot Z = X \cdot (Y \cdot Z)$$

    Most obviously this applies to modular multiplication, to multiplication of matrices and
    to other problems which we will discuss below.

    ## Algorithm

    Raising $a$ to the power of $n$ is expressed naively as multiplication by $a$ done $n - 1$ times:
    $a^{n} = a \cdot a \cdot \ldots \cdot a$. However, this approach is not practical for large $a$ or $n$.

    $a^{b+c} = a^b \cdot a^c$ and $a^{2b} = a^b \cdot a^b = (a^b)^2$.

    The idea of binary exponentiation is, that we split the work using the binary representation of the exponent.

    Let's write $n$ in base 2, for example:

    $$3^{13} = 3^{1101_2} = 3^8 \cdot 3^4 \cdot 3^1$$

    Since the number $n$ has exactly $\lfloor \log_2 n \rfloor + 1$ digits in base 2, we only need to perform $O(\log n)$ multiplications, if we know the powers $a^1, a^2, a^4, a^8, \dots, a^{2^{\lfloor \log n \rfloor}}$.

    So we only need to know a fast way to compute those.
    Luckily this is very easy, since an element in the sequence is just the square of the previous element.

    $$\begin{align}
    3^1 &= 3 \\
    3^2 &= \left(3^1\right)^2 = 3^2 = 9 \\
    3^4 &= \left(3^2\right)^2 = 9^2 = 81 \\
    3^8 &= \left(3^4\right)^2 = 81^2 = 6561
    \end{align}$$

    So to get the final answer for $3^{13}$, we only need to multiply three of them (skipping $3^2$ because the corresponding bit in $n$ is not set):
    $3^{13} = 6561 \cdot 81 \cdot 3 = 1594323$

    The final complexity of this algorithm is $O(\log n)$: we have to compute $\log n$ powers of $a$, and then have to do at most $\log n$ multiplications to get the final answer from them.

    The following recursive approach expresses the same idea:

    $$a^n = \begin{cases}
    1 &\text{if } n == 0 \\
    \left(a^{\frac{n}{2}}\right)^2 &\text{if } n > 0 \text{ and } n \text{ even}\\
    \left(a^{\frac{n - 1}{2}}\right)^2 \cdot a &\text{if } n > 0 \text{ and } n \text{ odd}\\
    \end{cases}$$

    ## Implementation

    First the recursive approach, which is a direct translation of the recursive formula:

    ```cpp
    long long binpow(long long a, long long b) {
        if (b == 0)
            return 1;
        long long res = binpow(a, b / 2);
        if (b % 2)
            return res * res * a;
        else
            return res * res;
    }
    ```

    The second approach accomplishes the same task without recursion.
    It computes all the powers in a loop, and multiplies the ones with the corresponding set bit in $n$.
    Although the complexity of both approaches is identical, this approach will be faster in practice since we don't have the overhead of the recursive calls.

    ```cpp
    long long binpow(long long a, long long b) {
        long long res = 1;
        while (b > 0) {
            if (b & 1)
                res = res * a;
            a = a * a;
            b >>= 1;
        }
        return res;
    }
    ```

    ## Applications

    ### Effective computation of large exponents modulo a number

    **Problem:**
    Compute $x^n \bmod m$.
    This is a very common operation. For instance it is used in computing the [modular multiplicative inverse](module-inverse.md).

    **Solution:**
    Since we know that the modulo operator doesn't interfere with multiplications ($a \cdot b \equiv (a \bmod m) \cdot (b \bmod m) \pmod m$), we can directly use the same code, and just replace every multiplication with a modular multiplication:

    ```cpp
    long long binpow(long long a, long long b, long long m) {
        a %= m;
        long long res = 1;
        while (b > 0) {
            if (b & 1)
                res = res * a % m;
            a = a * a % m;
            b >>= 1;
        }
        return res;
    }
    ```

    **Note:**
    It's possible to speed this algorithm for large $b >> m$.
    If $m$ is a prime number $x^n \equiv x^{n \bmod (m-1)} \pmod{m}$ for prime $m$, and $x^n \equiv x^{n \bmod{\phi(m)}} \pmod{m}$ for composite $m$.
    This follows directly from Fermat's little theorem and Euler's theorem, see the article about [Modular Inverses](module-inverse.md#fermat-euler) for more details.

    ### Effective computation of Fibonacci numbers

    **Problem:** Compute $n$-th Fibonacci number $F_n$.

    **Solution:** For more details, see the [Fibonacci Number article](fibonacci-numbers.md).
    We will only go through an overview of the algorithm.
    To compute the next Fibonacci number, only the two previous ones are needed, as $F_n = F_{n-1} + F_{n-2}$.
    We can build a $2 \times 2$ matrix that describes this transformation:
    the transition from $F_i$ and $F_{i+1}$ to $F_{i+1}$ and $F_{i+2}$.
    For example, applying this transformation to the pair $F_0$ and $F_1$ would change it into $F_1$ and $F_2$.
    Therefore, we can raise this transformation matrix to the $n$-th power to find $F_n$ in time complexity $O(\log n)$.

    ### Applying a permutation $k$ times { data-toc-label='Applying a permutation <script type="math/tex">k</script> times' }

    **Problem:** You are given a sequence of length $n$. Apply to it a given permutation $k$ times.

    **Solution:** Simply raise the permutation to $k$-th power using binary exponentiation, and then apply it to the sequence. This will give you a time complexity of $O(n \log k)$.

    ```cpp
    vector<int> applyPermutation(vector<int> sequence, vector<int> permutation) {
        vector<int> newSequence(sequence.size());
        for(int i = 0; i < sequence.size(); i++) {
            newSequence[i] = sequence[permutation[i]];
        }
        return newSequence;
    }

    vector<int> permute(vector<int> sequence, vector<int> permutation, long long b) {
        while (b > 0) {
            if (b & 1) {
                sequence = applyPermutation(sequence, permutation);
            }
            permutation = applyPermutation(permutation, permutation);
            b >>= 1;
        }
        return sequence;
    }
[/Textbook Reference Material]


INFO - [Task id] Mbpp/167 [generation text] 1. **Restate the problem in plain English**: 
   The task is to create a function that finds the smallest power of 2 that is greater than or equal to a given number `n`. For example, if `n` is 0, the smallest power of 2 that meets this condition is 1.

2. **Conceptualize a solution first in plain English**: 
   To find the smallest power of 2 that is greater than or equal to `n`, we can start with the number 1 (which is 2^0) and keep multiplying by 2 until we reach or exceed `n`. This approach ensures that we find the smallest power of 2 that satisfies the condition.

3. **Write a pseudocode solution**:
   ```
   function next_power_of_2(n):
       if n is 0:
           return 1
       power = 1
       while power < n:
           power = power * 2
       return power
   ```

4. **Output the final Python 3 solution with your solution steps in comments**:
```python
def next_power_of_2(n: int) -> int:
    # If n is 0, the smallest power of 2 is 1
    if n == 0:
        return 1
    
    # Start with the smallest power of 2 (2^0 = 1)
    power = 1
    
    # Keep multiplying by 2 until we reach or exceed n
    while power < n:
        power *= 2
    
    # Return the smallest power of 2 that is >= n
    return power
```
INFO - program_code:
 
def next_power_of_2(n: int) -> int:
    # If n is 0, the smallest power of 2 is 1
    if n == 0:
        return 1
    
    # Start with the smallest power of 2 (2^0 = 1)
    power = 1
    
    # Keep multiplying by 2 until we reach or exceed n
    while power < n:
        power *= 2
    
    # Return the smallest power of 2 that is >= n
    return power


INFO - program_name:
 next_power_of_2

INFO - dependencies:
 []

INFO - raw_msg:
 1. **Restate the problem in plain English**: 
   The task is to create a function that finds the smallest power of 2 that is greater than or equal to a given number `n`. For example, if `n` is 0, the smallest power of 2 that meets this condition is 1.

2. **Conceptualize a solution first in plain English**: 
   To find the smallest power of 2 that is greater than or equal to `n`, we can start with the number 1 (which is 2^0) and keep multiplying by 2 until we reach or exceed `n`. This approach ensures that we find the smallest power of 2 that satisfies the condition.

3. **Write a pseudocode solution**:
   ```
   function next_power_of_2(n):
       if n is 0:
           return 1
       power = 1
       while power < n:
           power = power * 2
       return power
   ```

4. **Output the final Python 3 solution with your solution steps in comments**:
```python
def next_power_of_2(n: int) -> int:
    # If n is 0, the smallest power of 2 is 1
    if n == 0:
        return 1
    
    # Start with the smallest power of 2 (2^0 = 1)
    power = 1
    
    # Keep multiplying by 2 until we reach or exceed n
    while power < n:
        power *= 2
    
    # Return the smallest power of 2 that is >= n
    return power
```

INFO - no_parent:
 True

INFO - full code to be executed: 
 
def next_power_of_2(n: int) -> int:
    # If n is 0, the smallest power of 2 is 1
    if n == 0:
        return 1
    
    # Start with the smallest power of 2 (2^0 = 1)
    power = 1
    
    # Keep multiplying by 2 until we reach or exceed n
    while power < n:
        power *= 2
    
    # Return the smallest power of 2 that is >= n
    return power


INFO - obs: Note: Tests are automatically generated and can be wrong.

Tests passed:
assert next_power_of_2(0) == 1

Tests failed:
None
reward: True
done: None
info: {'individual_results': (True,)}
INFO - acc:43/44 = 97.73%
