INFO - [test iter]: 291/378

INFO - The task prompt is Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a function to find the index of the first occurrence of a giv...

INFO - Attempting task_id Mbpp/733
INFO - LM call n parse attempt 1 / 3

INFO - [Task id] Mbpp/733 [prompt] 
You are an expert programmer tasked with solving the problem below.

Follow the user's instructions to solve the problem.
The user can ask for analysis, code, or both.

## Instructions
When asked to output code,
- Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
- include exactly one block of code with the entire solution
- No outside libraries are allowed. 
- Builtins are allowed.
- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).
- DO NOT write any assert statements / tests.

## Problem
[BEGIN PROBLEM]
Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a function to find the index of the first occurrence of a given number in a sorted array.
assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1
"""

[END PROBLEM]

INFO - [Task id] Mbpp/733 [prompt] 
## Instructions

Reason through the problem and:
1. Restate the problem in plain English
2. Conceptualize a solution first in plain English
3. Write a pseudocode solution
4. Output the final Python 3 solution with your solution steps in comments.

Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
and include exactly one block of code with the entire solution.

No outside libraries are allowed.
Builtins are allowed.

INFO - [Task id] Mbpp/733 [generation text] 1. **Restate the problem in plain English**: 
   We need to create a function that takes a sorted list of numbers and a target number. The function should return the index of the first occurrence of the target number in the list. If the target number is not found, the function should return -1.

2. **Conceptualize a solution first in plain English**: 
   Since the array is sorted, we can use a linear search to find the first occurrence of the target number. We will iterate through the list, and as soon as we find the target number, we will return its index. If we reach the end of the list without finding the target, we will return -1.

3. **Write a pseudocode solution**:
   ```
   function find_first_occurrence(array, target):
       for index from 0 to length of array - 1:
           if array[index] is equal to target:
               return index
       return -1
   ```

4. **Output the final Python 3 solution with your solution steps in comments**:
```python
def find_first_occurrence(array, target):
    # Iterate through the array using an index
    for index in range(len(array)):
        # Check if the current element is equal to the target
        if array[index] == target:
            # Return the index of the first occurrence
            return index
    # If the target is not found, return -1
    return -1
```
INFO - [35m Rollout attempt 1/4[0m
INFO - [33m Retrieving 3 entries for db: semantic 
 [0m
INFO - Retrieved (score=0.4813):
Chapter: Sorting
Section: Binary search
Part: 1/1
\section{Binary search}

\index{binary search}

A general method for searching for an element
in an array is to use a \texttt{for} loop
that iterates through the elements of the array.
For example, the following code searches for
an element $x$ in...


INFO - Retrieved (score=0.4889):
Title: Binary search
Part: 1/2
# Binary search

**Binary search** is a method that allows for quicker search of something by splitting the search interval into two. Its most common application is searching values in sorted arrays, however the splitting idea is crucial in many other typical tasks....


INFO - Retrieved (score=0.5008):
Title: Search the subarray with the maximum/minimum sum
Part: 1/2
# Search the subarray with the maximum/minimum sum

Here, we consider the problem of finding a subarray with maximum sum, as well as some of its variations (including the algorithm for solving this problem online).

## Problem stat...


INFO - Retrieved (score=0.4813): 
[Textbook Reference Material]:
    Chapter: Sorting
    Section: Binary search
    Part: 1/1
    \section{Binary search}

    \index{binary search}

    A general method for searching for an element
    in an array is to use a \texttt{for} loop
    that iterates through the elements of the array...
INFO - Retrieved (score=0.4889): 
[Textbook Reference Material]:
    Title: Binary search
    Part: 1/2
    # Binary search

    **Binary search** is a method that allows for quicker search of something by splitting the search interval into two. Its most common application is searching values in sorted arrays, however the splitt...
INFO - Retrieved (score=0.5008): 
[Textbook Reference Material]:
    Title: Search the subarray with the maximum/minimum sum
    Part: 1/2
    # Search the subarray with the maximum/minimum sum

    Here, we consider the problem of finding a subarray with maximum sum, as well as some of its variations (including the algorithm fo...
INFO - LM call n parse attempt 1 / 3

INFO - [Task id] Mbpp/733 [prompt] 
You are an expert programmer tasked with solving the problem below.

Follow the user's instructions to solve the problem.
The user can ask for analysis, code, or both.

## Instructions
When asked to output code,
- Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
- include exactly one block of code with the entire solution
- No outside libraries are allowed. 
- Builtins are allowed.
- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).
- DO NOT write any assert statements / tests.

## Problem
[BEGIN PROBLEM]
Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a function to find the index of the first occurrence of a given number in a sorted array.
assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1
"""

[END PROBLEM]

INFO - [Task id] Mbpp/733 [prompt] 
## Instructions

Reason through the problem and:
1. Restate the problem in plain English
2. Conceptualize a solution first in plain English
3. Write a pseudocode solution
4. Output the final Python 3 solution with your solution steps in comments.

Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
and include exactly one block of code with the entire solution.

No outside libraries are allowed.
Builtins are allowed.

INFO - [Task id] Mbpp/733 [prompt] 
Also, here are some of your memories.
Feel free to use the given information to aid your problem solving process if necessary.
Do not confuse the memories with the problem statement.

## Memories

[Textbook Reference Material]:
    Chapter: Sorting
    Section: Binary search
    Part: 1/1
    \section{Binary search}

    \index{binary search}

    A general method for searching for an element
    in an array is to use a \texttt{for} loop
    that iterates through the elements of the array.
    For example, the following code searches for
    an element $x$ in an array:

    \begin{lstlisting}
    for (int i = 0; i < n; i++) {
        if (array[i] == x) {
            // x found at index i
        }
    }
    \end{lstlisting}

    The time complexity of this approach is $O(n)$,
    because in the worst case, it is necessary to check
    all elements of the array.
    If the order of the elements is arbitrary,
    this is also the best possible approach, because
    there is no additional information available where
    in the array we should search for the element $x$.

    However, if the array is \emph{sorted},
    the situation is different.
    In this case it is possible to perform the
    search much faster, because the order of the
    elements in the array guides the search.
    The following \key{binary search} algorithm
    efficiently searches for an element in a sorted array
    in $O(\log n)$ time.

    \subsubsection{Method 1}

    The usual way to implement binary search
    resembles looking for a word in a dictionary.
    The search maintains an active region in the array,
    which initially contains all array elements.
    Then, a number of steps is performed,
    each of which halves the size of the region.

    At each step, the search checks the middle element
    of the active region.
    If the middle element is the target element,
    the search terminates.
    Otherwise, the search recursively continues
    to the left or right half of the region,
    depending on the value of the middle element.

    The above idea can be implemented as follows:
    \begin{lstlisting}
    int a = 0, b = n-1;
    while (a <= b) {
        int k = (a+b)/2;
        if (array[k] == x) {
            // x found at index k
        }
        if (array[k] > x) b = k-1;
        else a = k+1;
    }
    \end{lstlisting}

    In this implementation, the active region is $a \ldots b$,
    and initially the region is $0 \ldots n-1$.
    The algorithm halves the size of the region at each step,
    so the time complexity is $O(\log n)$.

    \subsubsection{Method 2}

    An alternative method to implement binary search
    is based on an efficient way to iterate through
    the elements of the array.
    The idea is to make jumps and slow the speed
    when we get closer to the target element.

    The search goes through the array from left to
    right, and the initial jump length is $n/2$.
    At each step, the jump length will be halved:
    first $n/4$, then $n/8$, $n/16$, etc., until
    finally the length is 1.
    After the jumps, either the target element has
    been found or we know that it does not appear in the array.

    The following code implements the above idea:
    \begin{lstlisting}
    int k = 0;
    for (int b = n/2; b >= 1; b /= 2) {
        while (k+b < n && array[k+b] <= x) k += b;
    }
    if (array[k] == x) {
        // x found at index k
    }
    \end{lstlisting}

    During the search, the variable $b$
    contains the current jump length.
    The time complexity of the algorithm is $O(\log n)$,
    because the code in the \texttt{while} loop
    is performed at most twice for each jump length.

    \subsubsection{C++ functions}

    The C++ standard library contains the following functions
    that are based on binary search and work in logarithmic time:

    \begin{itemize}
    \item \texttt{lower\_bound} returns a pointer to the
    first array element whose value is at least $x$.
    \item \texttt{upper\_bound} returns a pointer to the
    first array element whose value is larger than $x$.
    \item \texttt{equal\_range} returns both above pointers.
    \end{itemize}

    The functions assume that the array is sorted.
    If there is no such element, the pointer points to
    the element after the last array element.
    For example, the following code finds out whether
    an array contains an element with value $x$:

    \begin{lstlisting}
    auto k = lower_bound(array,array+n,x)-array;
    if (k < n && array[k] == x) {
        // x found at index k
    }
    \end{lstlisting}

    Then, the following code counts the number of elements
    whose value is $x$:

    \begin{lstlisting}
    auto a = lower_bound(array, array+n, x);
    auto b = upper_bound(array, array+n, x);
    cout << b-a << "\n";
    \end{lstlisting}

    Using \texttt{equal\_range}, the code becomes shorter:

    \begin{lstlisting}
    auto r = equal_range(array, array+n, x);
    cout << r.second-r.first << "\n";
    \end{lstlisting}

    \subsubsection{Finding the smallest solution}

    An important use for binary search is
    to find the position where the value of a \emph{function} changes.
    Suppose that we wish to find the smallest value $k$
    that is a valid solution for a problem.
    We are given a function $\texttt{ok}(x)$
    that returns \texttt{true} if $x$ is a valid solution
    and \texttt{false} otherwise.
    In addition, we know that $\texttt{ok}(x)$ is \texttt{false}
    when $x<k$ and \texttt{true} when $x \ge k$.
    The situation looks as follows:

    \begin{center}
    \begin{tabular}{r|rrrrrrrr}
    $x$ & 0 & 1 & $\cdots$ & $k-1$ & $k$ & $k+1$ & $\cdots$ \\
    \hline
    $\texttt{ok}(x)$ & \texttt{false} & \texttt{false}
    & $\cdots$ & \texttt{false} & \texttt{true} & \texttt{true} & $\cdots$ \\
    \end{tabular}
    \end{center}

    \noindent
    Now, the value of $k$ can be found using binary search:

    \begin{lstlisting}
    int x = -1;
    for (int b = z; b >= 1; b /= 2) {
        while (!ok(x+b)) x += b;
    }
    int k = x+1;
    \end{lstlisting}

    The search finds the largest value of $x$ for which
    $\texttt{ok}(x)$ is \texttt{false}.
    Thus, the next value $k=x+1$
    is the smallest possible value for which
    $\texttt{ok}(k)$ is \texttt{true}.
    The initial jump length $z$ has to be
    large enough, for example some value
    for which we know beforehand that $\texttt{ok}(z)$ is \texttt{true}.

    The algorithm calls the function \texttt{ok}
    $O(\log z)$ times, so the total time complexity
    depends on the function \texttt{ok}.
    For example, if the function works in $O(n)$ time,
    the total time complexity is $O(n \log z)$.

    \subsubsection{Finding the maximum value}

    Binary search can also be used to find
    the maximum value for a function that is
    first increasing and then decreasing.
    Our task is to find a position $k$ such that

    \begin{itemize}
    \item
    $f(x)<f(x+1)$ when $x<k$, and
    \item
    $f(x)>f(x+1)$ when $x \ge k$.
    \end{itemize}

    The idea is to use binary search
    for finding the largest value of $x$
    for which $f(x)<f(x+1)$.
    This implies that $k=x+1$
    because $f(x+1)>f(x+2)$.
    The following code implements the search: 

    \begin{lstlisting}
    int x = -1;
    for (int b = z; b >= 1; b /= 2) {
        while (f(x+b) < f(x+b+1)) x += b;
    }
    int k = x+1;
    \end{lstlisting}

    Note that unlike in the ordinary binary search,
    here it is not allowed that consecutive values
    of the function are equal.
    In this case it would not be possible to know
    how to continue the search.
[/Textbook Reference Material]


[Textbook Reference Material]:
    Title: Binary search
    Part: 1/2
    # Binary search

    **Binary search** is a method that allows for quicker search of something by splitting the search interval into two. Its most common application is searching values in sorted arrays, however the splitting idea is crucial in many other typical tasks.

    ## Search in sorted arrays

    The most typical problem that leads to the binary search is as follows. You're given a sorted array $A_0 \leq A_1 \leq \dots \leq A_{n-1}$, check if $k$ is present within the sequence. The simplest solution would be to check every element one by one and compare it with $k$ (a so-called linear search). This approach works in $O(n)$, but doesn't utilize the fact that the array is sorted.

    <center>
    <img src="https://upload.wikimedia.org/wikipedia/commons/8/83/Binary_Search_Depiction.svg" width="800px">
    <br>
    <i>Binary search of the value $7$ in an array</i>.
    <br>
    <i>The <a href="https://commons.wikimedia.org/wiki/File:Binary_Search_Depiction.svg">image</a> by [AlwaysAngry](https://commons.wikimedia.org/wiki/User:AlwaysAngry) is distributed under <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.en">CC BY-SA 4.0</a></i> license.
    </center>

    Now assume that we know two indices $L < R$ such that $A_L \leq k \leq A_R$. Because the array is sorted, we can deduce that $k$ either occurs among $A_L, A_{L+1}, \dots, A_R$ or doesn't occur in the array at all. If we pick an arbitrary index $M$ such that $L < M < R$ and check whether $k$ is less or greater than $A_M$. We have two possible cases:

    1. $A_L \leq k \leq A_M$. In this case, we reduce the problem from $[L, R]$ to $[L, M]$;
    1. $A_M \leq k \leq A_R$. In this case, we reduce the problem from $[L, R]$ to $[M, R]$.

    When it is impossible to pick  $M$, that is, when $R = L + 1$, we directly compare $k$ with $A_L$ and $A_R$. Otherwise we would want to pick $M$ in such manner that it reduces the active segment to a single element as quickly as possible _in the worst case_.

    Since in the worst case we will always reduce to larger segment of $[L, M]$ and $[M, R]$. Thus, in the worst case scenario the reduction would be from $R-L$ to $\max(M-L, R-M)$. To minimize this value, we should pick $M \approx \frac{L+R}{2}$, then

    $$
    M-L \approx \frac{R-L}{2} \approx R-M.
    $$

    In other words, from the worst-case scenario perspective it is optimal to always pick $M$ in the middle of $[L, R]$ and split it in half. Thus, the active segment halves on each step until it becomes of size $1$. So, if the process needs $h$ steps, in the end it reduces the difference between $R$ and $L$ from $R-L$ to $\frac{R-L}{2^h} \approx 1$, giving us the equation $2^h \approx R-L$.

    Taking $\log_2$ on both sides, we get $h \approx \log_2(R-L) \in O(\log n)$.

    Logarithmic number of steps is drastically better than that of linear search. For example, for $n \approx 2^{20} \approx 10^6$ you'd need to make approximately a million operations for linear search, but only around $20$ operations with the binary search.

    ### Lower bound and upper bound

    It is often convenient to find the position of the first element that is not less than $k$ (called the lower bound of $k$ in the array) or the position of the first element that is greater than $k$ (called the upper bound of $k$) rather than the exact position of the element.

    Together, lower and upper bounds produce a possibly empty half-interval of the array elements that are equal to $k$. To check whether $k$ is present in the array it's enough to find its lower bound and check if the corresponding element equates to $k$.

    ### Implementation

    The explanation above provides a rough description of the algorithm. For the implementation details, we'd need to be more precise.

    We will maintain a pair $L < R$ such that $A_L \leq k < A_R$. Meaning that the active search interval is $[L, R)$. We use half-interval here instead of a segment $[L, R]$ as it turns out to require less corner case work.

    When $R = L+1$, we can deduce from definitions above that $R$ is the upper bound of $k$. It is convenient to initialize $R$ with past-the-end index, that is $R=n$ and $L$ with before-the-beginning index, that is $L=-1$. It is fine as long as we never evaluate $A_L$ and $A_R$ in our algorithm directly, formally treating it as $A_L = -\infty$ and $A_R = +\infty$.

    Finally, to be specific about the value of $M$ we pick, we will stick with $M = \lfloor \frac{L+R}{2} \rfloor$.

    Then the implementation could look like this:

    ```cpp
    ... // a sorted array is stored as a[0], a[1], ..., a[n-1]
    int l = -1, r = n;
    while(r - l > 1) {
        int m = (l + r) / 2;
        if(k < a[m]) {
            r = m; // a[l] <= k < a[m] <= a[r]
        } else {
            l = m; // a[l] <= a[m] <= k < a[r]
        }
    }
    ```

    During the execution of the algorithm, we never evaluate neither $A_L$ nor $A_R$, as $L < M < R$. In the end, $L$ will be the index of the last element that is not greater than $k$ (or $-1$ if there is no such element) and $R$ will be the index of the first element larger than $k$ (or $n$ if there is no such element).

    ## Search on arbitrary predicate

    Let $f : \{0,1,\dots, n-1\} \to \{0, 1\}$ be a boolean function defined on $0,1,\dots,n-1$ such that it is monotonous, that is

    $$
    f(0) \leq f(1) \leq \dots \leq f(n-1).
    $$

    The binary search, the way it is described above, finds the partition of the array by the predicate $f(M)$, holding the boolean value of $k < A_M$ expression. In other words, binary search finds the unique index $L$ such that $f(L) = 0$ and $f(R)=f(L+1)=1$.

    It is possible to use arbitrary monotonous predicate instead of $k < A_M$. It is particularly useful when the computation of $f(k)$ is requires too much time to actually compute it for every possible value.

    ```cpp
    ... // f(i) is a boolean function such that f(0) <= ... <= f(n-1)
    int l = -1, r = n;
    while(r - l > 1) {
        int m = (l + r) / 2;
        if(f(m)) {
            r = m; // 0 = f(l) < f(m) = 1
        } else {
            l = m; // 0 = f(m) < f(r) = 1
        }
    }
[/Textbook Reference Material]


[Textbook Reference Material]:
    Title: Search the subarray with the maximum/minimum sum
    Part: 1/2
    # Search the subarray with the maximum/minimum sum

    Here, we consider the problem of finding a subarray with maximum sum, as well as some of its variations (including the algorithm for solving this problem online).

    ## Problem statement

    Given an array of numbers $a[1 \ldots n]$. It is required to find a subarray $a[l \ldots r]$ with the maximal sum:

    $$ \max_{ 1 \le l \le r \le n } \sum_{i=l}^{r} a[i].$$

    For example, if all integers in array $a[]$ were non-negative, then the answer would be the array itself.
    However, the solution is non-trivial when the array can contain both positive and negative numbers.

    It is clear that the problem of finding the **minimum** subarray is essentially the same, you just need to change the signs of all numbers.

    ## Algorithm 1

    Here we consider an almost obvious algorithm. (Next, we'll look at another algorithm, which is a little harder to come up with, but its implementation is even shorter.)

    ### Algorithm description

    The algorithm is very simple.

    We introduce for convenience the **notation**: $s[i] = \sum_{j=1}^{i} a[j]$. That is, the array $s[i]$ is an array of partial sums of array $a[]$. Also, set $s[0] = 0$.

    Let us now iterate over the index $r = 1 \ldots n$, and learn how to quickly find the optimal $l$ for each current value $r$, at which the maximum sum is reached on the subarray $[l, r]$.

    Formally, this means that for the current $r$ we need to find an $l$ (not exceeding $r$), so that the value of $s[r] - s[l-1]$ is maximal. After a trivial transformation, we can see that we need to find in the array $s[]$ a minimum on the segment $[0, r-1]$.

    From here, we immediately obtain a solution: we simply store where the current minimum is in the array $s[]$. Using this minimum, we find the current optimal index $l$ in $O(1)$, and when moving from the current index $r$ to the next one, we simply update this minimum.

    Obviously, this algorithm works in $O(n)$ and is asymptotically optimal.

    ### Implementation

    To implement it, we don't even need to explicitly store an array of partial sums $s[]$ — we will only need the current element from it.

    The implementation is given in 0-indexed arrays, not in 1-numbering as described above.

    We first give a solution that finds a simple numerical answer without finding the indices of the desired segment:

    ```cpp
    int ans = a[0], sum = 0, min_sum = 0;

    for (int r = 0; r < n; ++r) {
        sum += a[r];
        ans = max(ans, sum - min_sum);
        min_sum = min(min_sum, sum);
    }
    ```

    Now we give a full version of the solution, which additionally also finds the boundaries of the desired segment:

    ```cpp
    int ans = a[0], ans_l = 0, ans_r = 0;
    int sum = 0, min_sum = 0, min_pos = -1;

    for (int r = 0; r < n; ++r) {
        sum += a[r];
        int cur = sum - min_sum;
        if (cur > ans) {
            ans = cur;
            ans_l = min_pos + 1;
            ans_r = r;
        }
        if (sum < min_sum) {
            min_sum = sum;
            min_pos = r;
        }
    }
    ```

    ## Algorithm 2

    Here we consider a different algorithm. It is a little more difficult to understand, but it is more elegant than the above, and its implementation is a little bit shorter. This algorithm was proposed by Jay Kadane in 1984.

    ### Algorithm description

    The algorithm itself is as follows. Let's go through the array and accumulate the current partial sum in some variable $s$. If at some point $s$ is negative, we just assign $s=0$. It is argued that the maximum all the values that the variable $s$ is assigned to during the algorithm will be the answer to the problem.

    **Proof:**

    Consider the first index when the sum of $s$ becomes negative. This means that starting with a zero partial sum, we eventually obtain a negative partial sum — so this whole prefix of the array, as well as any suffix, has a negative sum. Therefore, this subarray never contributes to the partial sum of any subarray of which it is a prefix, and can simply be dropped.

    However, this is not enough to prove the algorithm. In the algorithm, we are actually limited in finding the answer only to such segments that begin immediately after the places when $s<0$ happened.

    But, in fact, consider an arbitrary segment $[l, r]$, and $l$ is not in such a "critical" position (i.e. $l > p+1$, where $p$ is the last such position, in which $s<0$). Since the last critical position is strictly earlier than in $l-1$, it turns out that the sum of $a[p+1 \ldots l-1]$ is non-negative. This means that by moving $l$ to position $p+1$, we will increase the answer or, in extreme cases, we will not change it.

    One way or another, it turns out that when searching for an answer, you can limit yourself to only segments that begin immediately after the positions in which $s<0$ appeared. This proves that the algorithm is correct.

    ### Implementation

    As in algorithm 1, we first gave a simplified implementation that looks for only a numerical answer without finding the boundaries of the desired segment:

    ```cpp
    int ans = a[0], sum = 0;

    for (int r = 0; r < n; ++r) {
        sum += a[r];
        ans = max(ans, sum);
        sum = max(sum, 0);
    }
    ```

    A complete solution, maintaining the indexes of the boundaries of the corresponding segment:

    ```cpp
    int ans = a[0], ans_l = 0, ans_r = 0;
    int sum = 0, minus_pos = -1;

    for (int r = 0; r < n; ++r) {
        sum += a[r];
        if (sum > ans) {
            ans = sum;
            ans_l = minus_pos + 1;
            ans_r = r;
        }
        if (sum < 0) {
            sum = 0;
            minus_pos = r;
        }
    }
[/Textbook Reference Material]


INFO - [Task id] Mbpp/733 [generation text] 1. **Restate the problem in plain English**: 
   The task is to create a function that finds the index of the first occurrence of a specified number in a sorted list of numbers. If the number is not present in the list, the function should return -1.

2. **Conceptualize a solution first in plain English**: 
   Since the array is sorted, we can use a binary search approach to efficiently find the first occurrence of the target number. The binary search will allow us to repeatedly divide the search interval in half, checking the middle element each time. If the middle element is equal to the target, we will continue searching in the left half to find the first occurrence. If the middle element is less than the target, we will search in the right half. If it is greater, we will search in the left half.

3. **Write a pseudocode solution**:
   ```
   function find_first_occurrence(array, target):
       left = 0
       right = length of array - 1
       result = -1
       
       while left <= right:
           mid = (left + right) // 2
           if array[mid] == target:
               result = mid
               right = mid - 1  // continue searching in the left half
           elif array[mid] < target:
               left = mid + 1
           else:
               right = mid - 1
       
       return result
   ```

4. **Output the final Python 3 solution with your solution steps in comments**:
```python
def find_first_occurrence(array, target):
    # Initialize left and right pointers for binary search
    left = 0
    right = len(array) - 1
    result = -1  # This will hold the index of the first occurrence

    # Perform binary search
    while left <= right:
        mid = (left + right) // 2  # Find the middle index
        if array[mid] == target:
            result = mid  # Update result if target is found
            right = mid - 1  # Continue searching in the left half
        elif array[mid] < target:
            left = mid + 1  # Search in the right half
        else:
            right = mid - 1  # Search in the left half

    return result  # Return the index of the first occurrence or -1 if not found
```
INFO - program_code:
 
def find_first_occurrence(array, target):
    # Initialize left and right pointers for binary search
    left = 0
    right = len(array) - 1
    result = -1  # This will hold the index of the first occurrence

    # Perform binary search
    while left <= right:
        mid = (left + right) // 2  # Find the middle index
        if array[mid] == target:
            result = mid  # Update result if target is found
            right = mid - 1  # Continue searching in the left half
        elif array[mid] < target:
            left = mid + 1  # Search in the right half
        else:
            right = mid - 1  # Search in the left half

    return result  # Return the index of the first occurrence or -1 if not found


INFO - program_name:
 find_first_occurrence

INFO - dependencies:
 []

INFO - raw_msg:
 1. **Restate the problem in plain English**: 
   The task is to create a function that finds the index of the first occurrence of a specified number in a sorted list of numbers. If the number is not present in the list, the function should return -1.

2. **Conceptualize a solution first in plain English**: 
   Since the array is sorted, we can use a binary search approach to efficiently find the first occurrence of the target number. The binary search will allow us to repeatedly divide the search interval in half, checking the middle element each time. If the middle element is equal to the target, we will continue searching in the left half to find the first occurrence. If the middle element is less than the target, we will search in the right half. If it is greater, we will search in the left half.

3. **Write a pseudocode solution**:
   ```
   function find_first_occurrence(array, target):
       left = 0
       right = length of array - 1
       result = -1
       
       while left <= right:
           mid = (left + right) // 2
           if array[mid] == target:
               result = mid
               right = mid - 1  // continue searching in the left half
           elif array[mid] < target:
               left = mid + 1
           else:
               right = mid - 1
       
       return result
   ```

4. **Output the final Python 3 solution with your solution steps in comments**:
```python
def find_first_occurrence(array, target):
    # Initialize left and right pointers for binary search
    left = 0
    right = len(array) - 1
    result = -1  # This will hold the index of the first occurrence

    # Perform binary search
    while left <= right:
        mid = (left + right) // 2  # Find the middle index
        if array[mid] == target:
            result = mid  # Update result if target is found
            right = mid - 1  # Continue searching in the left half
        elif array[mid] < target:
            left = mid + 1  # Search in the right half
        else:
            right = mid - 1  # Search in the left half

    return result  # Return the index of the first occurrence or -1 if not found
```

INFO - no_parent:
 True

INFO - full code to be executed: 
 
def find_first_occurrence(array, target):
    # Initialize left and right pointers for binary search
    left = 0
    right = len(array) - 1
    result = -1  # This will hold the index of the first occurrence

    # Perform binary search
    while left <= right:
        mid = (left + right) // 2  # Find the middle index
        if array[mid] == target:
            result = mid  # Update result if target is found
            right = mid - 1  # Continue searching in the left half
        elif array[mid] < target:
            left = mid + 1  # Search in the right half
        else:
            right = mid - 1  # Search in the left half

    return result  # Return the index of the first occurrence or -1 if not found


INFO - obs: Note: Tests are automatically generated and can be wrong.

Tests passed:
assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1

Tests failed:
None
reward: True
done: None
info: {'individual_results': (True,)}
INFO - acc:275/291 = 94.50%
