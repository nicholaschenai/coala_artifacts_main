{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\nTests failed:\nNone",
    "code": "\ndef find_first_occurrence(array, target):\n    # Initialize left and right pointers for binary search\n    left = 0\n    right = len(array) - 1\n    result = -1  # This will hold the index of the first occurrence\n\n    # Perform binary search\n    while left <= right:\n        mid = (left + right) // 2  # Find the middle index\n        if array[mid] == target:\n            result = mid  # Update result if target is found\n            right = mid - 1  # Continue searching in the left half\n        elif array[mid] < target:\n            left = mid + 1  # Search in the right half\n        else:\n            right = mid - 1  # Search in the left half\n\n    return result  # Return the index of the first occurrence or -1 if not found\n",
    "full_code": "\ndef find_first_occurrence(array, target):\n    # Initialize left and right pointers for binary search\n    left = 0\n    right = len(array) - 1\n    result = -1  # This will hold the index of the first occurrence\n\n    # Perform binary search\n    while left <= right:\n        mid = (left + right) // 2  # Find the middle index\n        if array[mid] == target:\n            result = mid  # Update result if target is found\n            right = mid - 1  # Continue searching in the left half\n        elif array[mid] < target:\n            left = mid + 1  # Search in the right half\n        else:\n            right = mid - 1  # Search in the left half\n\n    return result  # Return the index of the first occurrence or -1 if not found\n",
    "reward": true,
    "program_code": "\ndef find_first_occurrence(array, target):\n    # Initialize left and right pointers for binary search\n    left = 0\n    right = len(array) - 1\n    result = -1  # This will hold the index of the first occurrence\n\n    # Perform binary search\n    while left <= right:\n        mid = (left + right) // 2  # Find the middle index\n        if array[mid] == target:\n            result = mid  # Update result if target is found\n            right = mid - 1  # Continue searching in the left half\n        elif array[mid] < target:\n            left = mid + 1  # Search in the right half\n        else:\n            right = mid - 1  # Search in the left half\n\n    return result  # Return the index of the first occurrence or -1 if not found\n",
    "program_name": "find_first_occurrence",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: \n   The task is to create a function that finds the index of the first occurrence of a specified number in a sorted list of numbers. If the number is not present in the list, the function should return -1.\n\n2. **Conceptualize a solution first in plain English**: \n   Since the array is sorted, we can use a binary search approach to efficiently find the first occurrence of the target number. The binary search will allow us to repeatedly divide the search interval in half, checking the middle element each time. If the middle element is equal to the target, we will continue searching in the left half to find the first occurrence. If the middle element is less than the target, we will search in the right half. If it is greater, we will search in the left half.\n\n3. **Write a pseudocode solution**:\n   ```\n   function find_first_occurrence(array, target):\n       left = 0\n       right = length of array - 1\n       result = -1\n       \n       while left <= right:\n           mid = (left + right) // 2\n           if array[mid] == target:\n               result = mid\n               right = mid - 1  // continue searching in the left half\n           elif array[mid] < target:\n               left = mid + 1\n           else:\n               right = mid - 1\n       \n       return result\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef find_first_occurrence(array, target):\n    # Initialize left and right pointers for binary search\n    left = 0\n    right = len(array) - 1\n    result = -1  # This will hold the index of the first occurrence\n\n    # Perform binary search\n    while left <= right:\n        mid = (left + right) // 2  # Find the middle index\n        if array[mid] == target:\n            result = mid  # Update result if target is found\n            right = mid - 1  # Continue searching in the left half\n        elif array[mid] < target:\n            left = mid + 1  # Search in the right half\n        else:\n            right = mid - 1  # Search in the left half\n\n    return result  # Return the index of the first occurrence or -1 if not found\n```",
    "no_parent": true,
    "dependency_used": false
}