{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\nTests failed:\nNone",
    "code": "\ndef move_num(input_string: str) -> str:\n    # Initialize empty strings for letters and numbers\n    letters = ''\n    numbers = ''\n    \n    # Iterate through each character in the input string\n    for char in input_string:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Append to numbers string\n            numbers += char\n        else:\n            # Append to letters string\n            letters += char\n    \n    # Concatenate letters and numbers and return the result\n    return letters + numbers\n",
    "full_code": "\ndef move_num(input_string: str) -> str:\n    # Initialize empty strings for letters and numbers\n    letters = ''\n    numbers = ''\n    \n    # Iterate through each character in the input string\n    for char in input_string:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Append to numbers string\n            numbers += char\n        else:\n            # Append to letters string\n            letters += char\n    \n    # Concatenate letters and numbers and return the result\n    return letters + numbers\n",
    "reward": true,
    "program_code": "\ndef move_num(input_string: str) -> str:\n    # Initialize empty strings for letters and numbers\n    letters = ''\n    numbers = ''\n    \n    # Iterate through each character in the input string\n    for char in input_string:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Append to numbers string\n            numbers += char\n        else:\n            # Append to letters string\n            letters += char\n    \n    # Concatenate letters and numbers and return the result\n    return letters + numbers\n",
    "program_name": "move_num",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: The task is to create a function that takes a string containing both letters and numbers, and rearranges it so that all the numbers are moved to the end of the string while keeping the order of the letters and numbers intact.\n\n2. **Conceptualize a solution first in plain English**: \n   - We will iterate through each character in the string.\n   - We will separate the characters into two groups: letters and numbers.\n   - After processing the entire string, we will concatenate the letters followed by the numbers to form the final result.\n\n3. **Write a pseudocode solution**:\n   ```\n   function move_num(input_string):\n       initialize empty string for letters\n       initialize empty string for numbers\n       \n       for each character in input_string:\n           if character is a digit:\n               append character to numbers\n           else:\n               append character to letters\n       \n       return letters + numbers\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef move_num(input_string: str) -> str:\n    # Initialize empty strings for letters and numbers\n    letters = ''\n    numbers = ''\n    \n    # Iterate through each character in the input string\n    for char in input_string:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Append to numbers string\n            numbers += char\n        else:\n            # Append to letters string\n            letters += char\n    \n    # Concatenate letters and numbers and return the result\n    return letters + numbers\n```",
    "no_parent": true,
    "dependency_used": false
}