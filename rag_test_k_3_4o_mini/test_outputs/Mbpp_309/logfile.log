INFO - [test iter]: 119/378

INFO - The task prompt is Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a python function to find the maximum of two numbers.
assert ...

INFO - Attempting task_id Mbpp/309
INFO - LM call n parse attempt 1 / 3

INFO - [Task id] Mbpp/309 [prompt] 
You are an expert programmer tasked with solving the problem below.

Follow the user's instructions to solve the problem.
The user can ask for analysis, code, or both.

## Instructions
When asked to output code,
- Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
- include exactly one block of code with the entire solution
- No outside libraries are allowed. 
- Builtins are allowed.
- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).
- DO NOT write any assert statements / tests.

## Problem
[BEGIN PROBLEM]
Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a python function to find the maximum of two numbers.
assert maximum(5,10) == 10
"""

[END PROBLEM]

INFO - [Task id] Mbpp/309 [prompt] 
## Instructions

Reason through the problem and:
1. Restate the problem in plain English
2. Conceptualize a solution first in plain English
3. Write a pseudocode solution
4. Output the final Python 3 solution with your solution steps in comments.

Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
and include exactly one block of code with the entire solution.

No outside libraries are allowed.
Builtins are allowed.

INFO - [Task id] Mbpp/309 [generation text] 1. **Restate the problem in plain English**: 
   We need to create a function that takes two numbers as input and returns the larger of the two numbers.

2. **Conceptualize a solution first in plain English**: 
   To find the maximum of two numbers, we can compare the two numbers using a simple conditional statement. If the first number is greater than the second, we return the first number; otherwise, we return the second number.

3. **Write a pseudocode solution**:
   ```
   FUNCTION maximum(a, b):
       IF a is greater than b:
           RETURN a
       ELSE:
           RETURN b
   ```

4. **Output the final Python 3 solution with your solution steps in comments**:
```python
# Define a function named maximum that takes two parameters
def maximum(a, b):
    # Compare the two numbers
    if a > b:
        # If the first number is greater, return it
        return a
    else:
        # Otherwise, return the second number
        return b
```
INFO - [35m Rollout attempt 1/4[0m
INFO - [33m Retrieving 3 entries for db: semantic 
 [0m
INFO - Retrieved (score=0.4986):
Title: Search the subarray with the maximum/minimum sum
Part: 1/2
# Search the subarray with the maximum/minimum sum

Here, we consider the problem of finding a subarray with maximum sum, as well as some of its variations (including the algorithm for solving this problem online).

## Problem stat...


INFO - Retrieved (score=0.5095):
Title: Ternary Search
Part: 1/1
# Ternary Search

We are given a function $f(x)$ which is unimodal on an interval $[l, r]$. By unimodal function, we mean one of two behaviors of the function: 

1. The function strictly increases first, reaches a maximum (at a single point or over an interval), an...


INFO - Retrieved (score=0.5163):
Chapter: Time complexity
Section: Maximum subarray sum
Part: 1/1
\section{Maximum subarray sum}

\index{maximum subarray sum}

There are often several possible algorithms
for solving a problem such that their
time complexities are different.
This section discusses a classic problem that
has a str...


INFO - Retrieved (score=0.4986): 
[Textbook Reference Material]:
    Title: Search the subarray with the maximum/minimum sum
    Part: 1/2
    # Search the subarray with the maximum/minimum sum

    Here, we consider the problem of finding a subarray with maximum sum, as well as some of its variations (including the algorithm fo...
INFO - Retrieved (score=0.5095): 
[Textbook Reference Material]:
    Title: Ternary Search
    Part: 1/1
    # Ternary Search

    We are given a function $f(x)$ which is unimodal on an interval $[l, r]$. By unimodal function, we mean one of two behaviors of the function: 

    1. The function strictly increases first, reaches a...
INFO - Retrieved (score=0.5163): 
[Textbook Reference Material]:
    Chapter: Time complexity
    Section: Maximum subarray sum
    Part: 1/1
    \section{Maximum subarray sum}

    \index{maximum subarray sum}

    There are often several possible algorithms
    for solving a problem such that their
    time complexities are di...
INFO - LM call n parse attempt 1 / 3

INFO - [Task id] Mbpp/309 [prompt] 
You are an expert programmer tasked with solving the problem below.

Follow the user's instructions to solve the problem.
The user can ask for analysis, code, or both.

## Instructions
When asked to output code,
- Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
- include exactly one block of code with the entire solution
- No outside libraries are allowed. 
- Builtins are allowed.
- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).
- DO NOT write any assert statements / tests.

## Problem
[BEGIN PROBLEM]
Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a python function to find the maximum of two numbers.
assert maximum(5,10) == 10
"""

[END PROBLEM]

INFO - [Task id] Mbpp/309 [prompt] 
## Instructions

Reason through the problem and:
1. Restate the problem in plain English
2. Conceptualize a solution first in plain English
3. Write a pseudocode solution
4. Output the final Python 3 solution with your solution steps in comments.

Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
and include exactly one block of code with the entire solution.

No outside libraries are allowed.
Builtins are allowed.

INFO - [Task id] Mbpp/309 [prompt] 
Also, here are some of your memories.
Feel free to use the given information to aid your problem solving process if necessary.
Do not confuse the memories with the problem statement.

## Memories

[Textbook Reference Material]:
    Title: Search the subarray with the maximum/minimum sum
    Part: 1/2
    # Search the subarray with the maximum/minimum sum

    Here, we consider the problem of finding a subarray with maximum sum, as well as some of its variations (including the algorithm for solving this problem online).

    ## Problem statement

    Given an array of numbers $a[1 \ldots n]$. It is required to find a subarray $a[l \ldots r]$ with the maximal sum:

    $$ \max_{ 1 \le l \le r \le n } \sum_{i=l}^{r} a[i].$$

    For example, if all integers in array $a[]$ were non-negative, then the answer would be the array itself.
    However, the solution is non-trivial when the array can contain both positive and negative numbers.

    It is clear that the problem of finding the **minimum** subarray is essentially the same, you just need to change the signs of all numbers.

    ## Algorithm 1

    Here we consider an almost obvious algorithm. (Next, we'll look at another algorithm, which is a little harder to come up with, but its implementation is even shorter.)

    ### Algorithm description

    The algorithm is very simple.

    We introduce for convenience the **notation**: $s[i] = \sum_{j=1}^{i} a[j]$. That is, the array $s[i]$ is an array of partial sums of array $a[]$. Also, set $s[0] = 0$.

    Let us now iterate over the index $r = 1 \ldots n$, and learn how to quickly find the optimal $l$ for each current value $r$, at which the maximum sum is reached on the subarray $[l, r]$.

    Formally, this means that for the current $r$ we need to find an $l$ (not exceeding $r$), so that the value of $s[r] - s[l-1]$ is maximal. After a trivial transformation, we can see that we need to find in the array $s[]$ a minimum on the segment $[0, r-1]$.

    From here, we immediately obtain a solution: we simply store where the current minimum is in the array $s[]$. Using this minimum, we find the current optimal index $l$ in $O(1)$, and when moving from the current index $r$ to the next one, we simply update this minimum.

    Obviously, this algorithm works in $O(n)$ and is asymptotically optimal.

    ### Implementation

    To implement it, we don't even need to explicitly store an array of partial sums $s[]$ â€” we will only need the current element from it.

    The implementation is given in 0-indexed arrays, not in 1-numbering as described above.

    We first give a solution that finds a simple numerical answer without finding the indices of the desired segment:

    ```cpp
    int ans = a[0], sum = 0, min_sum = 0;

    for (int r = 0; r < n; ++r) {
        sum += a[r];
        ans = max(ans, sum - min_sum);
        min_sum = min(min_sum, sum);
    }
    ```

    Now we give a full version of the solution, which additionally also finds the boundaries of the desired segment:

    ```cpp
    int ans = a[0], ans_l = 0, ans_r = 0;
    int sum = 0, min_sum = 0, min_pos = -1;

    for (int r = 0; r < n; ++r) {
        sum += a[r];
        int cur = sum - min_sum;
        if (cur > ans) {
            ans = cur;
            ans_l = min_pos + 1;
            ans_r = r;
        }
        if (sum < min_sum) {
            min_sum = sum;
            min_pos = r;
        }
    }
    ```

    ## Algorithm 2

    Here we consider a different algorithm. It is a little more difficult to understand, but it is more elegant than the above, and its implementation is a little bit shorter. This algorithm was proposed by Jay Kadane in 1984.

    ### Algorithm description

    The algorithm itself is as follows. Let's go through the array and accumulate the current partial sum in some variable $s$. If at some point $s$ is negative, we just assign $s=0$. It is argued that the maximum all the values that the variable $s$ is assigned to during the algorithm will be the answer to the problem.

    **Proof:**

    Consider the first index when the sum of $s$ becomes negative. This means that starting with a zero partial sum, we eventually obtain a negative partial sum â€” so this whole prefix of the array, as well as any suffix, has a negative sum. Therefore, this subarray never contributes to the partial sum of any subarray of which it is a prefix, and can simply be dropped.

    However, this is not enough to prove the algorithm. In the algorithm, we are actually limited in finding the answer only to such segments that begin immediately after the places when $s<0$ happened.

    But, in fact, consider an arbitrary segment $[l, r]$, and $l$ is not in such a "critical" position (i.e. $l > p+1$, where $p$ is the last such position, in which $s<0$). Since the last critical position is strictly earlier than in $l-1$, it turns out that the sum of $a[p+1 \ldots l-1]$ is non-negative. This means that by moving $l$ to position $p+1$, we will increase the answer or, in extreme cases, we will not change it.

    One way or another, it turns out that when searching for an answer, you can limit yourself to only segments that begin immediately after the positions in which $s<0$ appeared. This proves that the algorithm is correct.

    ### Implementation

    As in algorithm 1, we first gave a simplified implementation that looks for only a numerical answer without finding the boundaries of the desired segment:

    ```cpp
    int ans = a[0], sum = 0;

    for (int r = 0; r < n; ++r) {
        sum += a[r];
        ans = max(ans, sum);
        sum = max(sum, 0);
    }
    ```

    A complete solution, maintaining the indexes of the boundaries of the corresponding segment:

    ```cpp
    int ans = a[0], ans_l = 0, ans_r = 0;
    int sum = 0, minus_pos = -1;

    for (int r = 0; r < n; ++r) {
        sum += a[r];
        if (sum > ans) {
            ans = sum;
            ans_l = minus_pos + 1;
            ans_r = r;
        }
        if (sum < 0) {
            sum = 0;
            minus_pos = r;
        }
    }
[/Textbook Reference Material]


[Textbook Reference Material]:
    Title: Ternary Search
    Part: 1/1
    # Ternary Search

    We are given a function $f(x)$ which is unimodal on an interval $[l, r]$. By unimodal function, we mean one of two behaviors of the function: 

    1. The function strictly increases first, reaches a maximum (at a single point or over an interval), and then strictly decreases.

    2. The function strictly decreases first, reaches a minimum, and then strictly increases.

    In this article, we will assume the first scenario.
    The second scenario is completely symmetrical to the first.

    The task is to find the maximum of function $f(x)$ on the interval $[l, r]$.

    ## Algorithm

    Consider any 2 points $m_1$, and $m_2$ in this interval: $l < m_1 < m_2 < r$. We evaluate the function at $m_1$ and $m_2$, i.e. find the values of $f(m_1)$ and $f(m_2)$. Now, we get one of three options:

    -   $f(m_1) < f(m_2)$

        The desired maximum can not be located on the left side of $m_1$, i.e. on the interval $[l, m_1]$, since either both points $m_1$ and $m_2$ or just $m_1$ belong to the area where the function increases. In either case, this means that we have to search for the maximum in the segment $[m_1, r]$.

    -   $f(m_1) > f(m_2)$

        This situation is symmetrical to the previous one: the maximum can not be located on the right side of $m_2$, i.e. on the interval $[m_2, r]$, and the search space is reduced to the segment $[l, m_2]$.

    -   $f(m_1) = f(m_2)$

        We can see that either both of these points belong to the area where the value of the function is maximized, or $m_1$ is in the area of increasing values and $m_2$ is in the area of descending values (here we used the strictness of function increasing/decreasing). Thus, the search space is reduced to $[m_1, m_2]$. To simplify the code, this case can be combined with any of the previous cases.

    Thus, based on the comparison of the values in the two inner points, we can replace the current interval $[l, r]$ with a new, shorter interval $[l^\prime, r^\prime]$. Repeatedly applying the described procedure to the interval, we can get an arbitrarily short interval. Eventually, its length will be less than a certain pre-defined constant (accuracy), and the process can be stopped. This is a numerical method, so we can assume that after that the function reaches its maximum at all points of the last interval $[l, r]$. Without loss of generality, we can take $f(l)$ as the return value.

    We didn't impose any restrictions on the choice of points $m_1$ and $m_2$. This choice will define the convergence rate and the accuracy of the implementation. The most common way is to choose the points so that they divide the interval $[l, r]$ into three equal parts. Thus, we have

    $$m_1 = l + \frac{(r - l)}{3}$$

    $$m_2 = r - \frac{(r - l)}{3}$$ 

    If $m_1$ and $m_2$ are chosen to be closer to each other, the convergence rate will increase slightly.

    ### Run time analysis

    $$T(n) = T({2n}/{3}) + 1 = \Theta(\log n)$$

    It can be visualized as follows: every time after evaluating the function at points $m_1$ and $m_2$, we are essentially ignoring about one third of the interval, either the left or right one. Thus the size of the search space is ${2n}/{3}$ of the original one. 

    Applying [Master's Theorem](https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms)), we get the desired complexity estimate.

    ### The case of the integer arguments

    If $f(x)$ takes integer parameter, the interval $[l, r]$ becomes discrete. Since we did not impose any restrictions on the choice of points $m_1$ and $m_2$, the correctness of the algorithm is not affected. $m_1$ and $m_2$ can still be chosen to divide $[l, r]$ into 3 approximately equal parts.

    The difference occurs in the stopping criterion of the algorithm. Ternary search will have to stop when $(r - l) < 3$, because in that case we can no longer select $m_1$ and $m_2$ to be different from each other as well as from $l$ and $r$, and this can cause an infinite loop. Once $(r - l) < 3$, the remaining pool of candidate points $(l, l + 1, \ldots, r)$ needs to be checked to find the point which produces the maximum value $f(x)$.

    ## Implementation

    ```cpp
    double ternary_search(double l, double r) {
    	double eps = 1e-9;				//set the error limit here
    	while (r - l > eps) {
    		double m1 = l + (r - l) / 3;
    		double m2 = r - (r - l) / 3;
    		double f1 = f(m1);		//evaluates the function at m1
    		double f2 = f(m2);		//evaluates the function at m2
    		if (f1 < f2)
    			l = m1;
    		else
    			r = m2;
    	}
    	return f(l);					//return the maximum of f(x) in [l, r]
    }
    ```

    Here `eps` is in fact the absolute error (not taking into account errors due to the inaccurate calculation of the function).

    Instead of the criterion `r - l > eps`, we can select a constant number of iterations as a stopping criterion. The number of iterations should be chosen to ensure the required accuracy. Typically, in most programming challenges the error limit is ${10}^{-6}$ and thus 200 - 300 iterations are sufficient. Also, the number of iterations doesn't depend on the values of $l$ and $r$, so the number of iterations corresponds to the required relative error.
[/Textbook Reference Material]


[Textbook Reference Material]:
    Chapter: Time complexity
    Section: Maximum subarray sum
    Part: 1/1
    \section{Maximum subarray sum}

    \index{maximum subarray sum}

    There are often several possible algorithms
    for solving a problem such that their
    time complexities are different.
    This section discusses a classic problem that
    has a straightforward $O(n^3)$ solution.
    However, by designing a better algorithm, it
    is possible to solve the problem in $O(n^2)$
    time and even in $O(n)$ time.

    Given an array of $n$ numbers,
    our task is to calculate the
    \key{maximum subarray sum}, i.e.,
    the largest possible sum of 
    a sequence of consecutive values
    in the array\footnote{J. Bentley's
    book \emph{Programming Pearls} \cite{ben86} made the problem popular.}.
    The problem is interesting when there may be
    negative values in the array.
    For example, in the array
    \begin{center}
    \begin{tikzpicture}[scale=0.7]
    \draw (0,0) grid (8,1);

    \node at (0.5,0.5) {$-1$};
    \node at (1.5,0.5) {$2$};
    \node at (2.5,0.5) {$4$};
    \node at (3.5,0.5) {$-3$};
    \node at (4.5,0.5) {$5$};
    \node at (5.5,0.5) {$2$};
    \node at (6.5,0.5) {$-5$};
    \node at (7.5,0.5) {$2$};
    \end{tikzpicture}
    \end{center}
    \begin{samepage}
    the following subarray produces the maximum sum $10$:
    \begin{center}
    \begin{tikzpicture}[scale=0.7]
    \fill[color=lightgray] (1,0) rectangle (6,1);
    \draw (0,0) grid (8,1);

    \node at (0.5,0.5) {$-1$};
    \node at (1.5,0.5) {$2$};
    \node at (2.5,0.5) {$4$};
    \node at (3.5,0.5) {$-3$};
    \node at (4.5,0.5) {$5$};
    \node at (5.5,0.5) {$2$};
    \node at (6.5,0.5) {$-5$};
    \node at (7.5,0.5) {$2$};
    \end{tikzpicture}
    \end{center}
    \end{samepage}

    We assume that an empty subarray is allowed,
    so the maximum subarray sum is always at least $0$.

    \subsubsection{Algorithm 1}

    A straightforward way to solve the problem
    is to go through all possible subarrays,
    calculate the sum of values in each subarray and maintain
    the maximum sum.
    The following code implements this algorithm:

    \begin{lstlisting}
    int best = 0;
    for (int a = 0; a < n; a++) {
        for (int b = a; b < n; b++) {
            int sum = 0;
            for (int k = a; k <= b; k++) {
                sum += array[k];
            }
            best = max(best,sum);
        }
    }
    cout << best << "\n";
    \end{lstlisting}

    The variables \texttt{a} and \texttt{b} fix the first and
    last index of the subarray,
    and the sum of values is calculated to the variable \texttt{sum}.
    The variable \texttt{best} contains the maximum sum found during the search.

    The time complexity of the algorithm is $O(n^3)$,
    because it consists of three nested loops 
    that go through the input.

    \subsubsection{Algorithm 2}

    It is easy to make Algorithm 1 more efficient
    by removing one loop from it.
    This is possible by calculating the sum at the same
    time when the right end of the subarray moves.
    The result is the following code:

    \begin{lstlisting}
    int best = 0;
    for (int a = 0; a < n; a++) {
        int sum = 0;
        for (int b = a; b < n; b++) {
            sum += array[b];
            best = max(best,sum);
        }
    }
    cout << best << "\n";
    \end{lstlisting}
    After this change, the time complexity is $O(n^2)$.

    \subsubsection{Algorithm 3}

    Surprisingly, it is possible to solve the problem
    in $O(n)$ time\footnote{In \cite{ben86}, this linear-time algorithm
    is attributed to J. B. Kadane, and the algorithm is sometimes
    called \index{Kadane's algorithm} \key{Kadane's algorithm}.}, which means
    that just one loop is enough.
    The idea is to calculate, for each array position,
    the maximum sum of a subarray that ends at that position.
    After this, the answer for the problem is the
    maximum of those sums.

    Consider the subproblem of finding the maximum-sum subarray
    that ends at position $k$.
    There are two possibilities:
    \begin{enumerate}
    \item The subarray only contains the element at position $k$.
    \item The subarray consists of a subarray that ends
    at position $k-1$, followed by the element at position $k$.
    \end{enumerate}

    In the latter case, since we want to
    find a subarray with maximum sum,
    the subarray that ends at position $k-1$
    should also have the maximum sum.
    Thus, we can solve the problem efficiently
    by calculating the maximum subarray sum
    for each ending position from left to right.

    The following code implements the algorithm:
    \begin{lstlisting}
    int best = 0, sum = 0;
    for (int k = 0; k < n; k++) {
        sum = max(array[k],sum+array[k]);
        best = max(best,sum);
    }
    cout << best << "\n";
    \end{lstlisting}

    The algorithm only contains one loop
    that goes through the input,
    so the time complexity is $O(n)$.
    This is also the best possible time complexity,
    because any algorithm for the problem
    has to examine all array elements at least once.

    \subsubsection{Efficiency comparison}

    It is interesting to study how efficient 
    algorithms are in practice.
    The following table shows the running times
    of the above algorithms for different
    values of $n$ on a modern computer.

    In each test, the input was generated randomly.
    The time needed for reading the input was not
    measured.

    \begin{center}
    \begin{tabular}{rrrr}
    array size $n$ & Algorithm 1 & Algorithm 2 & Algorithm 3 \\
    \hline
    $10^2$ & $0.0$ s & $0.0$ s & $0.0$ s \\
    $10^3$ & $0.1$ s & $0.0$ s & $0.0$ s \\
    $10^4$ & > $10.0$ s & $0.1$ s & $0.0$ s \\
    $10^5$ & > $10.0$ s & $5.3$ s & $0.0$ s \\
    $10^6$ & > $10.0$ s & > $10.0$ s & $0.0$ s \\
    $10^7$ & > $10.0$ s & > $10.0$ s & $0.0$ s \\
    \end{tabular}
    \end{center}

    The comparison shows that all algorithms
    are efficient when the input size is small,
    but larger inputs bring out remarkable
    differences in the running times of the algorithms.
    Algorithm 1 becomes slow
    when $n=10^4$, and Algorithm 2
    becomes slow when $n=10^5$.
    Only Algorithm 3 is able to process
    even the largest inputs instantly.
[/Textbook Reference Material]


INFO - [Task id] Mbpp/309 [generation text] 1. **Restate the problem in plain English**: The task is to create a function that takes two numbers as input and returns the larger of the two.

2. **Conceptualize a solution first in plain English**: To find the maximum of two numbers, we can compare them using a simple conditional statement. If the first number is greater than the second, we return the first number; otherwise, we return the second number.

3. **Write a pseudocode solution**:
   ```
   function maximum(a, b):
       if a is greater than b:
           return a
       else:
           return b
   ```

4. **Output the final Python 3 solution with your solution steps in comments**:
```python
# Define a function to find the maximum of two numbers
def maximum(a: int, b: int) -> int:
    # Compare the two numbers
    if a > b:
        # If the first number is greater, return it
        return a
    else:
        # Otherwise, return the second number
        return b
```
INFO - program_code:
 
# Define a function to find the maximum of two numbers
def maximum(a: int, b: int) -> int:
    # Compare the two numbers
    if a > b:
        # If the first number is greater, return it
        return a
    else:
        # Otherwise, return the second number
        return b


INFO - program_name:
 maximum

INFO - dependencies:
 []

INFO - raw_msg:
 1. **Restate the problem in plain English**: The task is to create a function that takes two numbers as input and returns the larger of the two.

2. **Conceptualize a solution first in plain English**: To find the maximum of two numbers, we can compare them using a simple conditional statement. If the first number is greater than the second, we return the first number; otherwise, we return the second number.

3. **Write a pseudocode solution**:
   ```
   function maximum(a, b):
       if a is greater than b:
           return a
       else:
           return b
   ```

4. **Output the final Python 3 solution with your solution steps in comments**:
```python
# Define a function to find the maximum of two numbers
def maximum(a: int, b: int) -> int:
    # Compare the two numbers
    if a > b:
        # If the first number is greater, return it
        return a
    else:
        # Otherwise, return the second number
        return b
```

INFO - no_parent:
 True

INFO - full code to be executed: 
 
# Define a function to find the maximum of two numbers
def maximum(a: int, b: int) -> int:
    # Compare the two numbers
    if a > b:
        # If the first number is greater, return it
        return a
    else:
        # Otherwise, return the second number
        return b


INFO - obs: Note: Tests are automatically generated and can be wrong.

Tests passed:
assert maximum(5,10) == 10

Tests failed:
None
reward: True
done: None
info: {'individual_results': (True,)}
INFO - acc:114/119 = 95.80%
