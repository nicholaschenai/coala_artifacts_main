INFO - [test iter]: 357/378

INFO - The task prompt is Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a function to find maximum run of uppercase characters in the...

INFO - Attempting task_id Mbpp/806
INFO - LM call n parse attempt 1 / 3

INFO - [Task id] Mbpp/806 [prompt] 
You are an expert programmer tasked with solving the problem below.

Follow the user's instructions to solve the problem.
The user can ask for analysis, code, or both.

## Instructions
When asked to output code,
- Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
- include exactly one block of code with the entire solution
- No outside libraries are allowed. 
- Builtins are allowed.
- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).
- DO NOT write any assert statements / tests.

## Problem
[BEGIN PROBLEM]
Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a function to find maximum run of uppercase characters in the given string.
assert max_run_uppercase('GeMKSForGERksISBESt') == 5
"""

[END PROBLEM]

INFO - [Task id] Mbpp/806 [prompt] 
## Instructions

Reason through the problem and:
1. Restate the problem in plain English
2. Conceptualize a solution first in plain English
3. Write a pseudocode solution
4. Output the final Python 3 solution with your solution steps in comments.

Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
and include exactly one block of code with the entire solution.

No outside libraries are allowed.
Builtins are allowed.

INFO - [Task id] Mbpp/806 [generation text] 1. **Restate the problem in plain English:**
   We need to create a function that takes a string as input and returns the length of the longest consecutive sequence of uppercase letters found in that string.

2. **Conceptualize a solution first in plain English:**
   To solve this problem, we can iterate through each character in the string while keeping track of the current count of consecutive uppercase letters. If we encounter an uppercase letter, we increment our current count. If we encounter a lowercase letter or a non-letter character, we compare the current count with the maximum count found so far and reset the current count to zero. At the end of the iteration, we need to check one last time to ensure we account for any uppercase sequence that might end at the last character of the string.

3. **Write a pseudocode solution:**
   ```
   function max_run_uppercase(s):
       initialize max_count to 0
       initialize current_count to 0
       
       for each character in s:
           if character is uppercase:
               increment current_count
           else:
               if current_count > max_count:
                   update max_count
               reset current_count to 0
       
       if current_count > max_count:
           update max_count
       
       return max_count
   ```

4. **Output the final Python 3 solution with your solution steps in comments:**
```python
def max_run_uppercase(s: str) -> int:
    # Initialize the maximum count of uppercase letters found
    max_count = 0
    # Initialize the current count of consecutive uppercase letters
    current_count = 0
    
    # Iterate through each character in the string
    for char in s:
        # Check if the character is uppercase
        if char.isupper():
            # Increment the current count
            current_count += 1
        else:
            # If we encounter a lowercase letter, check if the current count is greater than max_count
            if current_count > max_count:
                max_count = current_count
            # Reset the current count to 0
            current_count = 0
    
    # Final check to update max_count in case the string ends with uppercase letters
    if current_count > max_count:
        max_count = current_count
    
    # Return the maximum count of consecutive uppercase letters found
    return max_count
```
INFO - [35m Rollout attempt 1/4[0m
INFO - [33m Retrieving 3 entries for db: semantic 
 [0m
INFO - Retrieved (score=0.4779):
Title: Finding repetitions
Part: 1/2
# Finding repetitions

Given a string $s$ of length $n$.

A **repetition** is two occurrences of a string in a row.
In other words a repetition can be described by a pair of indices $i < j$ such that the substring $s[i \dots j]$ consists of two identical strin...


INFO - Retrieved (score=0.4857):
Title: Prefix function. Knuthâ€“Morrisâ€“Pratt algorithm
Part: 3/4
```

Here for each value of the prefix function we first count how many times it occurs in the array $\pi$, and then compute the final answers:
if we know that the length prefix $i$ appears exactly $\text{ans}[i]$ times, then this num...


INFO - Retrieved (score=0.4875):
Title: Z-function and its calculation
Part: 1/2
# Z-function and its calculation

Suppose we are given a string $s$ of length $n$. The **Z-function** for this string is an array of length $n$ where the $i$-th element is equal to the greatest number of characters starting from the position $i$ tha...


INFO - Retrieved (score=0.4779): 
[Textbook Reference Material]:
    Title: Finding repetitions
    Part: 1/2
    # Finding repetitions

    Given a string $s$ of length $n$.

    A **repetition** is two occurrences of a string in a row.
    In other words a repetition can be described by a pair of indices $i < j$ such that the ...
INFO - Retrieved (score=0.4857): 
[Textbook Reference Material]:
    Title: Prefix function. Knuthâ€“Morrisâ€“Pratt algorithm
    Part: 3/4
    ```

    Here for each value of the prefix function we first count how many times it occurs in the array $\pi$, and then compute the final answers:
    if we know that the length prefix $i$ ...
INFO - Retrieved (score=0.4875): 
[Textbook Reference Material]:
    Title: Z-function and its calculation
    Part: 1/2
    # Z-function and its calculation

    Suppose we are given a string $s$ of length $n$. The **Z-function** for this string is an array of length $n$ where the $i$-th element is equal to the greatest number ...
INFO - LM call n parse attempt 1 / 3

INFO - [Task id] Mbpp/806 [prompt] 
You are an expert programmer tasked with solving the problem below.

Follow the user's instructions to solve the problem.
The user can ask for analysis, code, or both.

## Instructions
When asked to output code,
- Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
- include exactly one block of code with the entire solution
- No outside libraries are allowed. 
- Builtins are allowed.
- If the task specifies a function name to be used, follow it strictly (be case sensitive!) and declare the that function last (helper functions are declared first).
- DO NOT write any assert statements / tests.

## Problem
[BEGIN PROBLEM]
Write a Python function that satisfies the description below. Your code must strictly follow the function name and typings of the input and output specified in the assert statement below, and pass the assertion when executed.
"""
Write a function to find maximum run of uppercase characters in the given string.
assert max_run_uppercase('GeMKSForGERksISBESt') == 5
"""

[END PROBLEM]

INFO - [Task id] Mbpp/806 [prompt] 
## Instructions

Reason through the problem and:
1. Restate the problem in plain English
2. Conceptualize a solution first in plain English
3. Write a pseudocode solution
4. Output the final Python 3 solution with your solution steps in comments.

Make sure to wrap your code in '```python' and '```' Markdown delimiters, 
and include exactly one block of code with the entire solution.

No outside libraries are allowed.
Builtins are allowed.

INFO - [Task id] Mbpp/806 [prompt] 
Also, here are some of your memories.
Feel free to use the given information to aid your problem solving process if necessary.
Do not confuse the memories with the problem statement.

## Memories

[Textbook Reference Material]:
    Title: Finding repetitions
    Part: 1/2
    # Finding repetitions

    Given a string $s$ of length $n$.

    A **repetition** is two occurrences of a string in a row.
    In other words a repetition can be described by a pair of indices $i < j$ such that the substring $s[i \dots j]$ consists of two identical strings written after each other.

    The challenge is to **find all repetitions** in a given string $s$.
    Or a simplified task: find **any** repetition or find the **longest** repetition.

    The algorithm described here was published in 1982 by Main and Lorentz.

    ## Example

    Consider the repetitions in the following example string:

    $$acababaee$$

    The string contains the following three repetitions:

    - $s[2 \dots 5] = abab$
    - $s[3 \dots 6] = baba$
    - $s[7 \dots 7] = ee$

    Another example:

    $$abaaba$$

    Here there are only two repetitions

    - $s[0 \dots 5] = abaaba$
    - $s[2 \dots 3] = aa$

    ## Number of repetitions

    In general there can be up to $O(n^2)$ repetitions in a string of length $n$.
    An obvious example is a string consisting of $n$ times the same letter, in this case any substring of even length is a repetition.
    In general any periodic string with a short period will contain a lot of repetitions.

    On the other hand this fact does not prevent computing the number of repetitions in $O(n \log n)$ time, because the algorithm can give the repetitions in compressed form, in groups of several pieces at once.

    There is even the concept, that describes groups of periodic substrings with tuples of size four.
    It has been proven that we the number of such groups is at most linear with respect to the string length.

    Also, here are some more interesting results related to the number of repetitions:

      - The number of primitive repetitions (those whose halves are not repetitions) is at most $O(n \log n)$.
      - If we encode repetitions with tuples of numbers (called Crochemore triples) $(i,~ p,~ r)$ (where $i$ is the position of the beginning, $p$ the length of the repeating substring, and $r$ the number of repetitions), then all repetitions can be described with $O(n \log n)$ such triples.
      - Fibonacci strings, defined as 
    
        \[\begin{align}
        t_0 &= a, \\\\
        t_1 &= b, \\\\
        t_i &= t_{i-1} + t_{i-2},
        \end{align}\]
    
        are "strongly" periodic.
        The number of repetitions in the Fibonacci string $f_i$, even in the compressed with Crochemore triples, is $O(f_n \log f_n)$.
        The number of primitive repetitions is also $O(f_n \log f_n)$.

    ## Main-Lorentz algorithm

    The idea behind the Main-Lorentz algorithm is **divide-and-conquer**.

    It splits the initial string into halves, and computes the number of repetitions that lie completely in each halve by two recursive calls.
    Then comes the difficult part.
    The algorithm finds all repetitions starting in the first half and ending in the second half (which we will call **crossing repetitions**).
    This is the essential part of the Main-Lorentz algorithm, and we will discuss it in detail here.

    The complexity of divide-and-conquer algorithms is well researched.
    The [master theorem](https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms)) says, that we will end up with an $O(n \log n)$ algorithm, if we can compute the crossing repetitions in $O(n)$ time.

    ### Search for crossing repetitions

    So we want to find all such repetitions that start in the first half of the string, let's call it $u$, and end in the second half, let's call it $v$:

    $$s = u + v$$

    Their lengths are approximately equal to the length of $s$ divided by two.

    Consider an arbitrary repetition and look at the middle character (more precisely the first character of the second half of the repetition).
    I.e. if the repetition is a substring $s[i \dots j]$, then the middle character is $(i + j + 1) / 2$.

    We call a repetition **left** or **right** depending on which string this character is located - in the string $u$ or in the string $v$.
    In other words a string is called left, if the majority of it lies in $u$, otherwise we call it right.

    We will now discuss how to find **all left repetitions**.
    Finding all right repetitions can be done in the same way.

    Let us denote the length of the left repetition by $2l$ (i.e. each half of the repetition has length $l$).
    Consider the first character of the repetition falling into the string $v$ (it is at position $|u|$ in the string $s$).
    It coincides with the character $l$ positions before it, let's denote this position $cntr$.

    We will fixate this position $cntr$, and **look for all repetitions at this position** $cntr$.

    For example:

    $$c ~ \underset{cntr}{a} ~ c ~ | ~ a ~ d ~ a$$

    The vertical lines divides the two halves.
    Here we fixated the position $cntr = 1$, and at this position we find the repetition $caca$.

    It is clear, that if we fixate the position $cntr$, we simultaneously fixate the length of the possible repetitions: $l = |u| - cntr$.
    Once we know how to find these repetitions, we will iterate over all possible values for $cntr$ from $0$ to $|u|-1$, and find all left crossover repetitions of length $l = |u|,~ |u|-1,~ \dots, 1$.

    ### Criterion for left crossing repetitions

    Now, how can we find all such repetitions for a fixated $cntr$?
    Keep in mind that there still can be multiple such repetitions.

    Let's again look at a visualization, this time for the repetition $abcabc$:

    $$\overbrace{a}^{l_1} ~ \overbrace{\underset{cntr}{b} ~ c}^{l_2} ~ \overbrace{a}^{l_1} ~ | ~ \overbrace{b ~ c}^{l_2}$$

    Here we denoted the lengths of the two pieces of the repetition with $l_1$ and $l_2$:
    $l_1$ is the length of the repetition up to the position $cntr-1$, and $l_2$ is the length of the repetition from $cntr$ to the end of the half of the repetition.
    We have $2l = l_1 + l_2 + l_1 + l_2$ as the total length of the repetition.

    Let us generate **necessary and sufficient** conditions for such a repetition at position $cntr$ of length $2l = 2(l_1 + l_2) = 2(|u| - cntr)$:

    - Let $k_1$ be the largest number such that the first $k_1$ characters before the position $cntr$ coincide with the last $k_1$ characters in the string $u$:
  
    $$
    u[cntr - k_1 \dots cntr - 1] = u[|u| - k_1 \dots |u| - 1]
    $$
  
    - Let $k_2$ be the largest number such that the $k_2$ characters starting at position $cntr$ coincide with the first $k_2$ characters in the string $v$:

    $$  
      u[cntr \dots cntr + k_2 - 1] = v[0 \dots k_2 - 1]
    $$
  
    - Then we have a repetition exactly for any pair $(l_1,~ l_2)$ with

    $$
      \begin{align}
      l_1 &\le k_1, \\\\
      l_2 &\le k_2. \\\\
      \end{align}
    $$

    To summarize:

    - We fixate a specific position $cntr$.
    - All repetition which we will find now have length $2l = 2(|u| - cntr)$.
      There might be multiple such repetitions, they depend on the lengths $l_1$ and $l_2 = l - l_1$.
    - We find $k_1$ and $k_2$ as described above.
    - Then all suitable repetitions are the ones for which the lengths of the pieces $l_1$ and $l_2$ satisfy the conditions:

    $$
      \begin{align}
      l_1 + l_2 &= l = |u| - cntr \\\\
      l_1 &\le k_1, \\\\
      l_2 &\le k_2. \\\\
      \end{align}
    $$

    Therefore the only remaining part is how we can compute the values $k_1$ and $k_2$ quickly for every position $cntr$.
    Luckily we can compute them in $O(1)$ using the [Z-function](../string/z-function.md):

    - To can find the value $k_1$ for each position by calculating the Z-function for the string $\overline{u}$ (i.e. the reversed string $u$).
      Then the value $k_1$ for a particular $cntr$ will be equal to the corresponding value of the array of the Z-function.
    - To precompute all values $k_2$, we calculate the Z-function for the string $v + \# + u$ (i.e. the string $u$ concatenated with the separator character $\#$ and the string $v$).
      Again we just need to look up the corresponding value in the Z-function to get the $k_2$ value.

    So this is enough to find all left crossing repetitions.

    ### Right crossing repetitions

    For computing the right crossing repetitions we act similarly:
    we define the center $cntr$ as the character corresponding to the last character in the string $u$.
[/Textbook Reference Material]


[Textbook Reference Material]:
    Title: Prefix function. Knuthâ€“Morrisâ€“Pratt algorithm
    Part: 3/4
    ```

    Here for each value of the prefix function we first count how many times it occurs in the array $\pi$, and then compute the final answers:
    if we know that the length prefix $i$ appears exactly $\text{ans}[i]$ times, then this number must be added to the number of occurrences of its longest suffix that is also a prefix.
    At the end we need to add $1$ to each result, since we also need to count the original prefixes also.

    Now let us consider the second problem.
    We apply the trick from Knuth-Morris-Pratt:
    we create the string $s + \# + t$ and compute its prefix function.
    The only differences to the first task is, that we are only interested in the prefix values that relate to the string $t$, i.e. $\pi[i]$ for $i \ge n + 1$.
    With those values we can perform the exact same computations as in the first task.

    ### The number of different substring in a string

    Given a string $s$ of length $n$.
    We want to compute the number of different substrings appearing in it.

    We will solve this problem iteratively.
    Namely we will learn, knowing the current number of different substrings, how to recompute this count by adding a character to the end.

    So let $k$ be the current number of different substrings in $s$, and we add the character $c$ to the end of $s$.
    Obviously some new substrings ending in $c$ will appear.
    We want to count these new substrings that didn't appear before.

    We take the string $t = s + c$ and reverse it.
    Now the task is transformed into computing how many prefixes there are that don't appear anywhere else.
    If we compute the maximal value of the prefix function $\pi_{\text{max}}$ of the reversed string $t$, then the longest prefix that appears in $s$ is $\pi_{\text{max}}$ long.
    Clearly also all prefixes of smaller length appear in it.

    Therefore the number of new substrings appearing when we add a new character $c$ is $|s| + 1 - \pi_{\text{max}}$.

    So for each character appended we can compute the number of new substrings in $O(n)$ times, which gives a time complexity of $O(n^2)$ in total.

    It is worth noting, that we can also compute the number of different substrings by appending the characters at the beginning, or by deleting characters from the beginning or the end.

    ### Compressing a string

    Given a string $s$ of length $n$.
    We want to find the shortest "compressed" representation of the string, i.e. we want to find a string $t$ of smallest length such that $s$ can be represented as a concatenation of one or more copies of $t$.

    It is clear, that we only need to find the length of $t$. Knowing the length, the answer to the problem will be the prefix of $s$ with this length.

    Let us compute the prefix function for $s$.
    Using the last value of it we define the value $k = n - \pi[n - 1]$.
    We will show, that if $k$ divides $n$, then $k$ will be the answer, otherwise there is no effective compression and the answer is $n$.

    Let $n$ be divisible by $k$.
    Then the string can be partitioned into blocks of the length $k$.
    By definition of the prefix function, the prefix of length $n - k$ will be equal with its suffix.
    But this means that the last block is equal to the block before.
    And the block before has to be equal to the block before it.
    And so on.
    As a result, it turns out that all blocks are equal, therefore we can compress the string $s$ to length $k$.

    Of course we still need to show that this is actually the optimum.
    Indeed, if there was a smaller compression than $k$, than the prefix function at the end would be greater than $n - k$.
    Therefore $k$ is really the answer.

    Now let us assume that $n$ is not divisible by $k$.
    We show that this implies that the length of the answer is $n$.
    We prove it by contradiction.
    Assuming there exists an answer, and the compression has length $p$ ($p$ divides $n$).
    Then the last value of the prefix function has to be greater than $n - p$, i.e. the suffix will partially cover the first block.
    Now consider the second block of the string.
    Since the prefix is equal with the suffix, and both the prefix and the suffix cover this block and their displacement relative to each other $k$ does not divide the block length $p$ (otherwise $k$ divides $n$), then all the characters of the block have to be identical.
    But then the string consists of only one character repeated over and over, hence we can compress it to a string of size $1$, which gives $k = 1$, and $k$ divides $n$.
    Contradiction.

    $$\overbrace{s_0 ~ s_1 ~ s_2 ~ s_3}^p ~ \overbrace{s_4 ~ s_5 ~ s_6 ~ s_7}^p$$

    $$s_0 ~ s_1 ~ s_2 ~ \underbrace{\overbrace{s_3 ~ s_4 ~ s_5 ~ s_6}^p ~ s_7}_{\pi[7] = 5}$$

    $$s_4 = s_3, ~ s_5 = s_4, ~ s_6 = s_5, ~ s_7 = s_6 ~ \Rightarrow ~ s_0 = s_1 = s_2 = s_3$$

    ### Building an automaton according to the prefix function

    Let's return to the concatenation to the two strings through a separator, i.e. for the strings $s$ and $t$ we compute the prefix function for the string $s + \# + t$.
    Obviously, since $\#$ is a separator, the value of the prefix function will never exceed $|s|$.
    It follows, that it is sufficient to only store the string $s + \#$ and the values of the prefix function for it, and we can compute the prefix function for all subsequent character on the fly:

    $$\underbrace{s_0 ~ s_1 ~ \dots ~ s_{n-1} ~ \#}_{\text{need to store}} ~ \underbrace{t_0 ~ t_1 ~ \dots ~ t_{m-1}}_{\text{do not need to store}}$$

    Indeed, in such a situation, knowing the next character $c \in t$ and the value of the prefix function of the previous position is enough information to compute the next value of the prefix function, without using any previous characters of the string $t$ and the value of the prefix function in them.

    In other words, we can construct an **automaton** (a finite state machine): the state in it is the current value of the prefix function, and the transition from one state to another will be performed via the next character.

    Thus, even without having the string $t$, we can construct such a transition table $(\text{old}_\pi, c) \rightarrow \text{new}_\pi$ using the same algorithm as for calculating the transition table:

    ```{.cpp file=prefix_automaton_slow}
    void compute_automaton(string s, vector<vector<int>>& aut) {
        s += '#';
        int n = s.size();
        vector<int> pi = prefix_function(s);
        aut.assign(n, vector<int>(26));
        for (int i = 0; i < n; i++) {
            for (int c = 0; c < 26; c++) {
                int j = i;
                while (j > 0 && 'a' + c != s[j])
                    j = pi[j-1];
                if ('a' + c == s[j])
                    j++;
                aut[i][c] = j;
            }
        }
    }
    ```

    However in this form the algorithm runs in $O(n^2 26)$ time for the lowercase letters of the alphabet.
    Note that we can apply dynamic programming and use the already calculated parts of the table.
    Whenever we go from the value $j$ to the value $\pi[j-1]$, we actually mean that the transition $(j, c)$ leads to the same state as the transition as $(\pi[j-1], c)$, and this answer is already accurately computed.

    ```{.cpp file=prefix_automaton_fast}
    void compute_automaton(string s, vector<vector<int>>& aut) {
        s += '#';
        int n = s.size();
        vector<int> pi = prefix_function(s);
        aut.assign(n, vector<int>(26));
        for (int i = 0; i < n; i++) {
            for (int c = 0; c < 26; c++) {
                if (i > 0 && 'a' + c != s[i])
                    aut[i][c] = aut[pi[i-1]][c];
                else
                    aut[i][c] = i + ('a' + c == s[i]);
            }
        }
    }
[/Textbook Reference Material]


[Textbook Reference Material]:
    Title: Z-function and its calculation
    Part: 1/2
    # Z-function and its calculation

    Suppose we are given a string $s$ of length $n$. The **Z-function** for this string is an array of length $n$ where the $i$-th element is equal to the greatest number of characters starting from the position $i$ that coincide with the first characters of $s$.

    In other words, $z[i]$ is the length of the longest string that is, at the same time, a prefix of $s$ and a prefix of the suffix of $s$ starting at $i$.

    **Note.** In this article, to avoid ambiguity, we assume $0$-based indexes; that is: the first character of $s$ has index $0$ and the last one has index $n-1$.

    The first element of Z-function, $z[0]$, is generally not well defined. In this article we will assume it is zero (although it doesn't change anything in the algorithm implementation).

    This article presents an algorithm for calculating the Z-function in $O(n)$ time, as well as various of its applications.

    ## Examples

    For example, here are the values of the Z-function computed for different strings:

    * "aaaaa" - $[0, 4, 3, 2, 1]$
    * "aaabaab" - $[0, 2, 1, 0, 2, 1, 0]$
    * "abacaba" - $[0, 0, 1, 0, 3, 0, 1]$

    ## Trivial algorithm

    Formal definition can be represented in the following elementary $O(n^2)$ implementation.

    ```cpp
    vector<int> z_function_trivial(string s) {
    	int n = s.size();
    	vector<int> z(n);
    	for (int i = 1; i < n; i++) {
    		while (i + z[i] < n && s[z[i]] == s[i + z[i]]) {
    			z[i]++;
    		}
    	}
    	return z;
    }
    ```

    We just iterate through every position $i$ and update $z[i]$ for each one of them, starting from $z[i] = 0$ and incrementing it as long as we don't find a mismatch (and as long as we don't reach the end of the line).

    Of course, this is not an efficient implementation. We will now show the construction of an efficient implementation.

    ## Efficient algorithm to compute the Z-function

    To obtain an efficient algorithm we will compute the values of $z[i]$ in turn from $i = 1$ to $n - 1$ but at the same time, when computing a new value, we'll try to make the best use possible of the previously computed values.

    For the sake of brevity, let's call **segment matches** those substrings that coincide with a prefix of $s$. For example, the value of the desired Z-function $z[i]$ is the length of the segment match starting at position $i$ (and that ends at position $i + z[i] - 1$).

    To do this, we will keep **the $[l, r)$ indices of the rightmost segment match**. That is, among all detected segments we will keep the one that ends rightmost. In a way, the index $r$ can be seen as the "boundary" to which our string $s$ has been scanned by the algorithm; everything beyond that point is not yet known.

    Then, if the current index (for which we have to compute the next value of the Z-function) is $i$, we have one of two options:

    *   $i \geq r$ -- the current position is **outside** of what we have already processed.

        We will then compute $z[i]$ with the **trivial algorithm** (that is, just comparing values one by one). Note that in the end, if $z[i] > 0$, we'll have to update the indices of the rightmost segment, because it's guaranteed that the new $r = i + z[i]$ is better than the previous $r$.

    *   $i < r$ -- the current position is inside the current segment match $[l, r)$.

        Then we can use the already calculated Z-values to "initialize" the value of $z[i]$ to something (it sure is better than "starting from zero"), maybe even some big number.

        For this, we observe that the substrings $s[l \dots r)$ and $s[0 \dots r-l)$ **match**. This means that as an initial approximation for $z[i]$ we can take the value already computed for the corresponding segment $s[0 \dots r-l)$, and that is $z[i-l]$.

        However, the value $z[i-l]$ could be too large: when applied to position $i$ it could exceed the index $r$. This is not allowed because we know nothing about the characters to the right of $r$: they may differ from those required.

        Here is **an example** of a similar scenario:

        $$ s = "aaaabaa" $$

        When we get to the last position ($i = 6$), the current match segment will be $[5, 7)$. Position $6$ will then match position $6 - 5 = 1$, for which the value of the Z-function is $z[1] = 3$. Obviously, we cannot initialize $z[6]$ to $3$, it would be completely incorrect. The maximum value we could initialize it to is $1$ -- because it's the largest value that doesn't bring us beyond the index $r$ of the match segment $[l, r)$.

        Thus, as an **initial approximation** for $z[i]$ we can safely take:

        $$ z_0[i] = \min(r - i,\; z[i-l]) $$

        After having $z[i]$ initialized to $z_0[i]$, we try to increment $z[i]$ by running the **trivial algorithm** -- because in general, after the border $r$, we cannot know if the segment will continue to match or not.

    Thus, the whole algorithm is split in two cases, which differ only in **the initial value** of $z[i]$: in the first case it's assumed to be zero, in the second case it is determined by the previously computed values (using the above formula). After that, both branches of this algorithm can be reduced to the implementation of **the trivial algorithm**, which starts immediately after we specify the initial value.

    The algorithm turns out to be very simple. Despite the fact that on each iteration the trivial algorithm is run, we have made significant progress, having an algorithm that runs in linear time. Later on we will prove that the running time is linear.

    ## Implementation

    Implementation turns out to be rather concise:

    ```cpp
    vector<int> z_function(string s) {
        int n = s.size();
        vector<int> z(n);
        int l = 0, r = 0;
        for(int i = 1; i < n; i++) {
            if(i < r) {
                z[i] = min(r - i, z[i - l]);
            }
            while(i + z[i] < n && s[z[i]] == s[i + z[i]]) {
                z[i]++;
            }
            if(i + z[i] > r) {
                l = i;
                r = i + z[i];
            }
        }
        return z;
    }
[/Textbook Reference Material]


INFO - [Task id] Mbpp/806 [generation text] 1. **Restate the problem in plain English**: 
   The task is to create a function that takes a string as input and returns the length of the longest consecutive sequence of uppercase letters found in that string.

2. **Conceptualize a solution first in plain English**: 
   To solve this problem, we can iterate through each character in the string while keeping track of the current length of consecutive uppercase letters. If we encounter an uppercase letter, we increase the current length. If we encounter a lowercase letter or reach the end of the string, we compare the current length with the maximum length found so far and reset the current length. Finally, we return the maximum length of consecutive uppercase letters.

3. **Write a pseudocode solution**:
   ```
   function max_run_uppercase(s):
       max_length = 0
       current_length = 0
       
       for each character in s:
           if character is uppercase:
               current_length += 1
           else:
               if current_length > max_length:
                   max_length = current_length
               current_length = 0
       
       if current_length > max_length:
           max_length = current_length
       
       return max_length
   ```

4. **Output the final Python 3 solution with your solution steps in comments**:
```python
def max_run_uppercase(s: str) -> int:
    # Initialize variables to track the maximum length and current length of uppercase runs
    max_length = 0
    current_length = 0
    
    # Iterate through each character in the string
    for char in s:
        # Check if the character is uppercase
        if char.isupper():
            current_length += 1  # Increment the current length
        else:
            # If we hit a lowercase letter, check if the current length is greater than max_length
            if current_length > max_length:
                max_length = current_length  # Update max_length if needed
            current_length = 0  # Reset current length for the next run
    
    # Final check at the end of the string in case it ends with an uppercase run
    if current_length > max_length:
        max_length = current_length
    
    return max_length  # Return the maximum length of uppercase runs
```
INFO - program_code:
 
def max_run_uppercase(s: str) -> int:
    # Initialize variables to track the maximum length and current length of uppercase runs
    max_length = 0
    current_length = 0
    
    # Iterate through each character in the string
    for char in s:
        # Check if the character is uppercase
        if char.isupper():
            current_length += 1  # Increment the current length
        else:
            # If we hit a lowercase letter, check if the current length is greater than max_length
            if current_length > max_length:
                max_length = current_length  # Update max_length if needed
            current_length = 0  # Reset current length for the next run
    
    # Final check at the end of the string in case it ends with an uppercase run
    if current_length > max_length:
        max_length = current_length
    
    return max_length  # Return the maximum length of uppercase runs


INFO - program_name:
 max_run_uppercase

INFO - dependencies:
 []

INFO - raw_msg:
 1. **Restate the problem in plain English**: 
   The task is to create a function that takes a string as input and returns the length of the longest consecutive sequence of uppercase letters found in that string.

2. **Conceptualize a solution first in plain English**: 
   To solve this problem, we can iterate through each character in the string while keeping track of the current length of consecutive uppercase letters. If we encounter an uppercase letter, we increase the current length. If we encounter a lowercase letter or reach the end of the string, we compare the current length with the maximum length found so far and reset the current length. Finally, we return the maximum length of consecutive uppercase letters.

3. **Write a pseudocode solution**:
   ```
   function max_run_uppercase(s):
       max_length = 0
       current_length = 0
       
       for each character in s:
           if character is uppercase:
               current_length += 1
           else:
               if current_length > max_length:
                   max_length = current_length
               current_length = 0
       
       if current_length > max_length:
           max_length = current_length
       
       return max_length
   ```

4. **Output the final Python 3 solution with your solution steps in comments**:
```python
def max_run_uppercase(s: str) -> int:
    # Initialize variables to track the maximum length and current length of uppercase runs
    max_length = 0
    current_length = 0
    
    # Iterate through each character in the string
    for char in s:
        # Check if the character is uppercase
        if char.isupper():
            current_length += 1  # Increment the current length
        else:
            # If we hit a lowercase letter, check if the current length is greater than max_length
            if current_length > max_length:
                max_length = current_length  # Update max_length if needed
            current_length = 0  # Reset current length for the next run
    
    # Final check at the end of the string in case it ends with an uppercase run
    if current_length > max_length:
        max_length = current_length
    
    return max_length  # Return the maximum length of uppercase runs
```

INFO - no_parent:
 True

INFO - full code to be executed: 
 
def max_run_uppercase(s: str) -> int:
    # Initialize variables to track the maximum length and current length of uppercase runs
    max_length = 0
    current_length = 0
    
    # Iterate through each character in the string
    for char in s:
        # Check if the character is uppercase
        if char.isupper():
            current_length += 1  # Increment the current length
        else:
            # If we hit a lowercase letter, check if the current length is greater than max_length
            if current_length > max_length:
                max_length = current_length  # Update max_length if needed
            current_length = 0  # Reset current length for the next run
    
    # Final check at the end of the string in case it ends with an uppercase run
    if current_length > max_length:
        max_length = current_length
    
    return max_length  # Return the maximum length of uppercase runs


INFO - obs: Note: Tests are automatically generated and can be wrong.

Tests passed:
assert max_run_uppercase('GeMKSForGERksISBESt') == 5

Tests failed:
None
reward: True
done: None
info: {'individual_results': (True,)}
INFO - acc:338/357 = 94.68%
