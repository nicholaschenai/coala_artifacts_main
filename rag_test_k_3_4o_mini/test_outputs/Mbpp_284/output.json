{
    "env_feedback": "Note: Tests are automatically generated and can be wrong.\n\nTests passed:\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\nTests failed:\nNone",
    "code": "\ndef check_element(lst, elem):\n    # Iterate through each item in the list\n    for item in lst:\n        # Check if the current item is not equal to the specified element\n        if item != elem:\n            return False  # Return False if any item is not equal\n    return True  # Return True if all items are equal to the specified element\n",
    "full_code": "\ndef check_element(lst, elem):\n    # Iterate through each item in the list\n    for item in lst:\n        # Check if the current item is not equal to the specified element\n        if item != elem:\n            return False  # Return False if any item is not equal\n    return True  # Return True if all items are equal to the specified element\n",
    "reward": true,
    "program_code": "\ndef check_element(lst, elem):\n    # Iterate through each item in the list\n    for item in lst:\n        # Check if the current item is not equal to the specified element\n        if item != elem:\n            return False  # Return False if any item is not equal\n    return True  # Return True if all items are equal to the specified element\n",
    "program_name": "check_element",
    "dependencies": [],
    "raw_msg": "1. **Restate the problem in plain English**: The task is to create a function that checks if all elements in a given list are equal to a specified element. If they are all equal, the function should return `True`; otherwise, it should return `False`.\n\n2. **Conceptualize a solution first in plain English**: To solve this problem, we can iterate through each item in the list and compare it to the specified element. If we find any item that is not equal to the specified element, we can immediately return `False`. If we finish checking all items and they are all equal to the specified element, we return `True`.\n\n3. **Write a pseudocode solution**:\n   ```\n   function check_element(list, element):\n       for each item in list:\n           if item is not equal to element:\n               return False\n       return True\n   ```\n\n4. **Output the final Python 3 solution with your solution steps in comments**:\n```python\ndef check_element(lst, elem):\n    # Iterate through each item in the list\n    for item in lst:\n        # Check if the current item is not equal to the specified element\n        if item != elem:\n            return False  # Return False if any item is not equal\n    return True  # Return True if all items are equal to the specified element\n```",
    "no_parent": true,
    "dependency_used": false
}